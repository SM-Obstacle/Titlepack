#Extends "Modes/ShootMania/Base/ModeShootMania.Script.txt"

#Const CompatibleMapTypes "ObstacleArena,ObstacleTitleArena,ObstacleTitleArenaOld,TimeAttackArena,ObstacleBetaArena,Randomizer"
#Const Version           "2.7.4"
#Const ScriptName        "Modes/ShootMania/Obstacle.Script.txt"


// ---------------------------------- //
// Libraries
// ---------------------------------- //
#Include "Libs/crAsh/Dynamics.Script.txt" as Dynamics

#Include "TimeLib" as TimeLib
#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/miltant/Nadeo_Fork/TabsServer.Script.txt" as Tabs

#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/smokegun/ObstacleLib.Script.txt" as Obstacle
#Include "Libs/smokegun/Constants.Script.txt" as Constants

#Include "Libs/miltant/Nadeo_Fork/CustomUI.Script.txt" as CustomUI
#Include "Libs/miltant/UI/Markers.Script.txt" as Markers
#Include "Libs/ahmad3/UI/LeaderboardWidget.Script.txt" as LeaderboardWidget
#Include "Libs/smokegun/UI/TimeDiff.Script.txt" as TimeDiff
#Include "Libs/smokegun/UI/Chrono.Script.txt" as Chrono
#Include "Libs/miltant/UI/Glitches.Script.txt" as Glitches
#Include "Libs/miltant/UI/JumpBack.Script.txt" as JumpBack
#Include "Libs/smokegun/UI/CpProgress.Script.txt" as CpProgress
#Include "Libs/smokegun/UI/SpectatorCount.Script.txt" as SpectatorCount
#Include "Libs/smokegun/UI/NextMapVote.Script.txt" as NextMapVote
#Include "Libs/smokegun/UI/RespawnBehavior.Script.txt" as RespawnBehavior
#Include "Libs/smokegun/UI/SpecKeys.Script.txt" as SpecKeys
#Include "Libs/smokegun/UI/SurvivalRanking.Script.txt" as SurvivalRanking

#Include "Libs/smokegun/CPTimes.Script.txt" as CPTimes
#Include "Libs/ahmad3/UI/EventsUI.Script.txt" as EventsUI
//#Include "Libs/miltant/KeysSettings.Script.txt" as KeysSettings

#Include "Libs/ahmad3/UI/AntiDevMode.Script.txt" as AntiDevMode
#Include "Libs/ahmad3/InGameDialog.Script.txt" as Dialog
#Include "Libs/ahmad3/UI/CachedRequests.Script.txt" as CachReqs
#Include "Libs/ahmad3/RequestManager.Script.txt" as RequestManager
#Include "Libs/ahmad3/UI/InitPb.Script.txt" as InitPb
#Include "Libs/ahmad3/UI/PlayerFinished.Script.txt" as PlayerFinished
#Include "Libs/ahmad3/UI/UpdateAuth.Script.txt" as UpdateAuth
#Include "Libs/ahmad3/UI/UpdatePlayer.Script.txt" as UpdatePlayer

#Include "Libs/smokegun/Items.Script.txt" as Items
#Include "Libs/smokegun/Weapons.Script.txt" as Weapons
#Include "Libs/smokegun/Settings.Script.txt" as Settings
#Include "Libs/smokegun/Tools.Script.txt" as Tools
#Include "Libs/miltant/Randomizer.Script.txt" as RNG

#Include "Libs/smokegun/Score.Script.txt" as ObsScores

#Include "Libs/ahmad3/UI/SpecList.Script.txt" as SpecList
#Include "Libs/ahmad3/Ban.Script.txt" as Ban
#Include "Libs/ahmad3/MapAttributes.Script.txt" as MapAttr
#Include "Libs/ahmad3/EventAPI/InGame.Script.txt" as ObsEvents

#Include "Libs/ahmad3/ErrorReport.Script.txt" as ErrorReport

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit -1 as _("Time limit")
#Setting S_FastRespawn True as _("Fast respawn on the checkpoint")
#Setting S_AllowJump True as _("Enable checkpoint jumping")
#Setting S_EnableRecords True as "Enable records"
#Setting S_ForceInvisibleSkin True as "Force invisible skin"
#Setting S_EnablePlayerHighlight False as "Highlight players"

#Setting S_NextMapVotingRatio 0.7 as "<hidden>"
#Setting S_FullAmmoSpawn True as "<hidden>"
#Setting S_LegacyRespawn False as "<hidden>"
#Setting S_BestNewRecordMsg "%1$z made a new record! (%2, got %3)" as "<hidden>"
#Setting S_WorseNewRecordMsg "$zToo late by %5 (previous was %4)!" as "<hidden>"
#Setting S_CheckpointMarkersCount 1 as "Count of different checkpoint markers"

#Setting S_ForceRNGSeed "" as "Seed to use for randomizer maps (Integer)"
#Setting S_PvPWeapons False as "Force PvP Weapons"
#Setting S_PvPCollisions False as "Force PvP Collisions"

#Setting S_EventHandle "" as "Event handle"
#Setting S_EventEdition -1 as "Event edition (Integer)"
#Setting S_TimeBeforeSwitchEvent 15000 as "Time before switching event (Integer in milliseconds)"
#Setting S_SwitchEventVotingRatio 0.7 as "<hidden>"
#Setting S_LockEventsUI False as "<hidden>"

#Setting S_ScriptEnvironment "production"

#Command Command_BeginSurvival (Integer) as _("Begin survival cup (max lives)")
#Command Command_EndSurvival (Integer) as _("End survival cup")

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_HudModulePath "Obstacle/UI.Module.Gbx"
#Const C_SettingsUpdateInterval 1000


declare Ident   G_InvisibleSkinId;
declare Ident   G_ObstacleModelId;
declare Boolean G_ForceInvisibleSkin;
declare Ident   G_WayPointSpawn;
declare Boolean[Ident] G_PendingRS;

declare Boolean G_LastUsePvPWeapons;
declare Boolean G_LastUsePvPCollisions;

***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
RequestManager::Load(Version);
***

***Match_Settings***
***
MB_Settings_UseDefaultHud = False;
MB_Settings_UseDefaultTimer = False;
MB_Settings_UseDefaultObjects = False;
MB_Settings_UseDefaultUIManagement = False;

UseClans = False;
UseSameWallJump = True;
UsePvPWeapons = S_PvPWeapons;
UsePvPCollisions = S_PvPCollisions;
G_LastUsePvPWeapons = S_PvPWeapons;
G_LastUsePvPCollisions = S_PvPCollisions;

UIManager.UIAll.OverlayHide321Go = False;
***

***Match_Rules***
***
ModeInfo::SetName("Obstacle");
ModeInfo::SetType(ModeInfo::Type_FreeForAll());

declare OpenSpecial1Text = "$<$00f";
declare OpenSpecial2Text = "$<$88f";
declare OpenSpecial3Text = "$<$0f0";
declare OpenSpecial4Text = "$<$f80";
declare OpenBoldText = "$<$o";
declare OpenSettingText = "$<$08f";
declare CloseText = "$>";

declare ModeRules = """
Finish the {{{OpenSpecial2Text}}}Obstacle Course{{{CloseText}}} as fast as possible.
To validate a race you must touch the {{{OpenSpecial2Text}}}Goal{{{CloseText}}} after going through all the {{{OpenSpecial2Text}}}Checkpoints{{{CloseText}}}.
You can start over and improve your time as often as you want during {{{OpenSettingText^S_TimeLimit^CloseText}}} minutes.
The player with the best time wins the map.
Press the {{{OpenBoldText}}}Respawn{{{CloseText}}} button (default: {{{OpenSpecial2Text}}}Backspace{{{CloseText}}}) or die to {{{OpenSpecial3Text}}}Respawn{{{CloseText}}} at the last reached checkpoint.
Press the {{{OpenBoldText}}}Give Up{{{CloseText}}} button (default: {{{OpenSpecial2Text}}}Delete{{{CloseText}}}) to {{{OpenSpecial3Text}}}Restart{{{CloseText}}} from the beginning.

Press {{{OpenSpecial4Text}}}F3{{{CloseText}}} when you're ready for the next Map (Press F3 again to change your decision).
Press {{{OpenSpecial4Text}}}F4{{{CloseText}}} to disable/enable respawning at checkpoints.
Press {{{OpenSpecial4Text}}}F5{{{CloseText}}} to disable/enable respawning from the start.
""";


ModeInfo::SetRules(ModeRules);
ModeInfo::SetStatusMessage(_("Finish the map as fast as possible."));
***

***Obs_LoadHud***
***
if (Hud.ScoresTable != Null) {
    Hud.ScoresTable.Scores_Sort(CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints);

    Tabs::Load();
    declare TabsLayer <=> Tabs::CreateTabPaneLayer(
        [ "ScoresTab" => "Rankings"
        , "CPTimes" => "Race"
        , "EventsUI" => "Events"]
    // , "KeysSettings" => "Inputs"]
        , 15, 7, False);
    TabsLayer.Type = CUILayer::EUILayerType::AltMenu;
    UIManager.UIAll.UILayers.add(TabsLayer);
}
***

***Match_LoadHud***
***
Hud_Load(C_HudModulePath);

foreach (Module in Hud.Modules) {
    switchtype (Module) {
        case CModulePlaygroundScoresTable: Hud.ScoresTable = (Module as CModulePlaygroundScoresTable);
        default: {}
    }
}

if (Hud != Null) {
    +++ Obs_LoadHud +++
}
***

***Match_SpawnScreen***
***
SpawnScreen::CreateScores("Score.Points");
***

***Match_InitServer***
***
log("""@@@@@@@@@@@@@@@@@@@@@@
@@@ OBSTACLE START @@@
@@@@@@@@@@@@@@@@@@@@@@""");
ItemList_Begin();
// G_InvisibleSkinId = ItemList_Add("StadiumCar");
G_InvisibleSkinId = ItemList_AddWithSkin("DefaultPlayerModel", Constants::C_InvisibleSkin);
//G_ObstacleModelId = ItemList_AddWithSkin(Constants::C_ObstacleModel, "Profile");
//G_ObstacleModelId = ItemList_AddWithSkin("DefaultPlayerModel", Constants::C_ObstacleModel);
Items::LoadItems();
ItemList_End();
***

***Match_StartServer***
***
// ServerModeName is "" in the editor
Settings::SetForceDisableRecords(ServerModeName == "");
// ServerLogin is "" in local play
G_ForceInvisibleSkin = !(ServerModeName == "" || ServerLogin == "");
UpdateSettings();

SM::SetupDefaultVisibility();

Obstacle::LoadActions();
***

***Match_InitMap***
***
declare netwrite Integer Net_MapStartUpdate for Teams[0] = -1;
Net_MapStartUpdate = Now;

Dialog::Load();

// This needs to be called before PrepareMap to have the right settings.
// It also updates the event ids for ObsEvents, used to load the event later.
UpdateSettings();

declare PrevTimeLimit = -1;
declare LastUpdate = -1;
declare NextLowTimeMessage = 0;

ObsEvents::Init();
if (ObsEvents::HasFailed()) {
    ObsEvents::ClearSelectedEvent(True);

    log("--- EVENT INIT FAIL ---");
    log("event loading has failed, cancelling its use");
    log("reason: " ^ ObsEvents::GetFailReason());
    log("event handle: `" ^ ObsEvents::GetLastEventHandle() ^ "`, edition id: " ^ ObsEvents::GetLastEventEdition());
    log("--- END ---");
}

***

***Match_StartMap***
***

PlayerFinished::Load();
CPTimes::Init();

EventsUI::Init();
if (ObsEvents::HasEventLoaded()) {
    LeaderboardWidget::Init();
}

Dynamics::UseDynamics();

declare Editor_WayPointSpawn_Flag for This = 0;

if (Editor_WayPointSpawn_Flag != 0) {
    foreach (Landmark in MapLandmarks) {
        declare metadata Editor_WayPointSpawn_Stamp for Landmark = 0;
        
        if (Editor_WayPointSpawn_Stamp == Editor_WayPointSpawn_Flag) {

            G_WayPointSpawn = Landmark.Id;
            break;
        }
    }
}
// map is invalid
if (!Obstacle::PrepareMap(ModeInfo::GetName()) && Editor_WayPointSpawn_Flag == 0)
{
    MB_Private_StopMap();
}

UsePvPWeapons = Obstacle::IsPvPWeaponsMap();
UsePvPCollisions = Obstacle::IsPvPCollisionsMap();
UseSameWallJump = Obstacle::IsSameWallJumpMap();
SpawnInvulnerabilityDuration = Obstacle::InvulnerabilityDuration();


Settings::SetForceDisableRecords(Settings::GetForceDisableRecords() || Obstacle::IsRandomizerMap() || ServerModeName == "");

if (Obstacle::IsRandomizerMap()) {
    declare Text Seed = "";

    if (Settings::GetForceRNGSeed() == "") {
        Seed = RNG::RandomizeLandmarksWithSeed(
            Obstacle::GetRNGLandmarks(), Obstacle::GetRNGTargetNumbers(),
            Obstacle::GetSpawnLandmarks(), Obstacle::GetGoalLandmarks(),
            ""
        );

        UIManager.UIAll.SendChat("""Map randomized with the seed $<$f80{{{Seed}}}$>.""");
    } else if (Settings::GetForceRNGSeed() == "0") {
        RNG::ClearLandmarks();
        UIManager.UIAll.SendChat("""Randomizer map: checkpoints left with no particular order accordingly to the value of the setting ForceRNGSeed.""");
    } else {
        Seed = RNG::RandomizeLandmarksWithSeed(
            Obstacle::GetRNGLandmarks(), Obstacle::GetRNGTargetNumbers(),
            Obstacle::GetSpawnLandmarks(), Obstacle::GetGoalLandmarks(),
            Settings::GetForceRNGSeed()
        );

        UIManager.UIAll.SendChat("""Map randomized with the seed $<$f80{{{Seed}}}$> (forced by script settings).""");
    }

    Layers::Detach("Records");
}

Items::Place();

foreach (Player in AllPlayers) {
    Player::setInitialized(Player, False);
    Obstacle::NewPlayer(Player);
}

---Ladder_OpenMatch_All---

StartTime = Now;
if (S_TimeLimit > 0) {
    EndTime = (StartTime + S_TimeLimit * 1000 * 60);
} else {
    EndTime = -1;
}

declare netwrite Text Net_MapStartTime for Teams[0];
Net_MapStartTime = TimeLib::GetCurrent();

CreateUI();

***

***Obs_YieldRecordsWidget***
***
LeaderboardWidget::Yield();
***

***Match_Yield***
***
--- Obs_YieldRecordsWidget ---
PlayerFinished::Yield();
ErrorReport::Yield();
SpectatorCount::Yield();
SpecList::Yield();
AntiDevMode::Yield();
NextMapVote::Yield(S_NextMapVotingRatio);
InitPb::Yield();
Dialog::Yield();
CachReqs::Yield();

foreach (Event in UIManager.PendingEvents) {
    if (Event.Type == CUIConfigEvent::EType::OnLayerCustomEvent) {
        --- Campaign_Match_Yield ---
        switch(Event.CustomEventType) {
            case "jump_request": {
                declare Player = SM::GetPlayer(Event.CustomEventData[0]);
                declare CP = TL::ToInteger(Event.CustomEventData[1]);
                Obstacle::JumpToCheckpoint(Player, CP);
            }
            case "jumpback_request": {
                declare Player = SM::GetPlayer(Event.CustomEventData[0]);
                Obstacle::JumpBack(Player);
            }
            case "ban:update": {
                // Not necessarily a ban, it's a "ban status"
                declare Player = SM::GetPlayer(Event.CustomEventData[0]);
                declare Ban::K_OptBanishment ban;
                ban.fromjson(Event.CustomEventData[1]);
                Player::setBanned(Player, ban);
            }
            case "cpstimes:reset": {
                declare Player = SM::GetPlayer(Event.CustomEventData[0]);
                Obstacle::UpdatePlayerRsCounterColumn(Player);
                Player::setBestRun(Player, -1);
                Player::setBestCPTimes(Player, []);
                Obstacle::UpdatePlayerBestTimeColumn(Player);
                CPTimes::ResetLayer(Player, Obstacle::GetCheckpointsTotal());
            }
            default: {
                UpdateAuth::HandleCustomEvent(Event);
                EventsUI::HandleCustomEvent(Event);
                ErrorReport::HandleCustomEvent(Event);
            }
        }
    }
}
***

***Obs_PlayerTookGoalRS***
***
Obstacle::ObsRespawnPlayer(Player, RS.GiveUp);
***

***Obs_PlayerTookGoal***
***
Obstacle::ObsRespawnPlayer(Player, True);
***

***Obs_CreateRecordsLayer***
***
Layers::Create("Records", LeaderboardWidget::GetLayer());
***


***Obs_CreateSurvivalRankingLayer***
***
Layers::Create("SurvivalRanking", SurvivalRanking::GetLayer());
Layers::Attach("SurvivalRanking");
***

***Obs_CreateRespawnBehaviorLayer***
***
Layers::Create("RespawnBehavior", RespawnBehavior::GetLayer(False));
***

***Match_PlayLoop***
***
//Replay_SaveInterface();
Dynamics::Compute();

// If a new event edition was loaded, notify the UI
if (ObsEvents::Loop()) {
    EventsUI::UpdateActiveEvents();
}

EventsUI::Loop();

if (LastUpdate + C_SettingsUpdateInterval < Now) {
    LastUpdate = Now;
    UpdateSettings();
}

if (Settings::GetForceInvisibleSkin()) {
    Obstacle::UpdatePlayersSkin(G_InvisibleSkinId);
} else {
    Obstacle::UpdatePlayersSkin(NullId);
}

if (Settings::GetEnableRecords()) {
    Layers::Attach("Records");
} else {
    Layers::Detach("Records");
}

if (EndTime > 0 && Now > EndTime) {
    if (EventsUI::RequestedRestart()) {
        EventsUI::BeginRestartMap();
        CreateUI(False);
        EventsUI::EndRestartMap();
    } else {
        Message::SendBigMessage(_("Time limit reached"),    2000, 3, CUIConfig::EUISound::Silence, 0);
        MB_Private_StopMatch();
    }
}

if ((EndTime - StartTime) > 60000 && Now > EndTime - 300500 && Now < EndTime - 290000 && Now > NextLowTimeMessage) {
    UIManager.UIAll.SendChat("Warning: the map ends in $<$f805$> minutes!");
    NextLowTimeMessage = Now + 305000;
}
declare CSmModeEvent[] PendingRespawns;
declare CSmModeEvent[] PendingCaptures;

foreach (Event in PendingEvents) {
    switch (Event.Type) {
				case CSmModeEvent::EType::OnShoot: {
					//Dynamics::Info();
					
				}
        case CSmModeEvent::EType::OnArmorEmpty: {
            // Discard the defaut behaviour (e.g Player is eliminated)
            Events::Invalid(Event);

            declare CSmPlayer Victim = Null;

            switchtype (Event.VictimEntity) {
                case CSmPlayer: {
                    Victim = (Event.VictimEntity as CSmPlayer);
                }
                default: {
                    continue;
                }
            }

            // Dont respawn if the player has the offzone item
            if (Victim.IsInOffZone) {
                declare ItemBuffs = Player::getBuffTimes(Victim);
                if (ItemBuffs.existskey(Constants::C_ItemOffzone) && ItemBuffs[Constants::C_ItemOffzone] >= Now) {
                    continue;
                } 
            }

            Obstacle::ObsRespawnPlayer(Victim);
        }

        case CSmModeEvent::EType::OnHit: {
            // Disable the loose of armor when hit
						 Dynamics::OnHit(Event.Victim, Event.VictimEntity);
            Events::Invalid(Event);
        }

        case CSmModeEvent::EType::OnActionCustomEvent : {
            // :'(
        }

        case CSmModeEvent::EType::OnPlayerTouchesObject: {
						declare Boolean PerformEliminate = Dynamics::CheckEliminatingObject(Event.Object, "touch", Event.Player);
							
						if(PerformEliminate) {
							if(Player::getLastCheckpoint(Event.Player) == NullId && (ServerModeName == "" || ServerLogin == "")) {
								Dynamics::ForceResetAll();
							}
							Obstacle::ObsRespawnPlayer(Event.Player);
						}
						
						if(Dynamics::IsDynamic(Event.Object)) {
								Events::Invalid(Event);
								continue;
						}
					
           if (Event.Object != Null && Event.Player != Null && Items::PickupItems(Event)) {
								
                Events::Valid(Event);
            }
            else {
                Events::Invalid(Event);
            }
        }

        case CSmModeEvent::EType::OnCommand: {
            if (Event.CommandName == "Command_BeginSurvival") {
                if (Settings::GetScoreMode() != Constants::C_Score_Survival) {
                    ObsScores::Survival_Begin(Event.CommandValueInteger);
                    MB_Private_StopMap();
                }
            }
            else if (Event.CommandName == "Command_EndSurvival") {
                if (Settings::GetScoreMode() == Constants::C_Score_Survival) {
                    ObsScores::Survival_ForceEnd();
                }
            }
        }

        case CSmModeEvent::EType::OnPlayerRequestRespawn: {
            PendingRespawns.add(Event);
        }

        case CSmModeEvent::EType::OnPlayerTriggersSector: {
            PendingCaptures.add(Event);
        }

        default: {
            Events::Valid(Event);
        }

    }
}

foreach (Player => GiveUp in G_PendingRS) {
    //todo: asserts exists
    Obstacle::ObsRespawnPlayer(Players[Player], GiveUp);
}

G_PendingRS.clear();


foreach (RS in PendingRespawns) {
    declare Player = RS.Player;
    declare CSmModeEvent CaptureToPerform = Null;

    foreach (Cap in PendingCaptures) {
        if (Cap.Player == Player) {
            CaptureToPerform <=> Cap;
            PendingCaptures.remove(Cap);
            break;
        }
    }

    if (CaptureToPerform == Null) {
        Obstacle::ObsRespawnPlayer(Player, RS.GiveUp);

        if(Player::getLastCheckpoint(Player) == NullId && (ServerModeName == "" || ServerLogin == "") ) {
            Dynamics::ForceResetAll();
        }

    } else if(Tools::IsGoal(Player.CapturedLandmark)) {
        declare TookGoal = Obstacle::HandleCapture(Player);

        if (TookGoal) {
            if(ServerModeName == "" || ServerLogin == "") {
                Dynamics::ForceResetAll();
            }
                        
            Events::Valid(CaptureToPerform);
            --- Obs_PlayerTookGoalRS ---
        }
    } else if (Player::allowRSBug(Player)) {
        Obstacle::ObsRespawnPlayer(Player, RS.GiveUp);

        Obstacle::HandleCapture(CaptureToPerform.Player);
        Events::Valid(CaptureToPerform);
        Player::setUsedRSBug(CaptureToPerform.Player, True);
    } else {
        G_PendingRS[Player.Id] = RS.GiveUp; // to be performed next tick

        Obstacle::HandleCapture(CaptureToPerform.Player);
        Events::Valid(CaptureToPerform);
    }

    Events::Invalid(RS);
}

foreach (Cap in PendingCaptures) {
    declare Player = Cap.Player;
    declare TookGoal = Obstacle::HandleCapture(Cap.Player);

    if (TookGoal) {
        Events::Valid(Cap);
        --- Obs_PlayerTookGoal ---
    }
}

foreach (Player in AllPlayers) {
    switch (Player.SpawnStatus) {
        case CSmPlayer::ESpawnStatus::NotSpawned: {
            if (!Player::isInitialized(Player)) {
                Obstacle::NewPlayer(Player);
            } else if (!Player::hasTabsInitialized(Player)) {
                declare CUIConfig UI <=> UIManager.GetUI(Player);
                Tabs::UseTabs(UI, "ScoresTable");
                Player::setTabsInitialized(Player, True);
            }

            if (!Player.RequestsSpectate && ObsScores::PlayerShouldSpawn(Player)) {
                Obstacle::ObsRespawnPlayer(Player);
            }
        }
    }
}

foreach (Player in Players) {
    if (Player::getBanStatus(Player).IsPresent && ServerAdmin != Null) {
        ServerAdmin.Kick(Player.User, Player::getBanStatus(Player).Ban.ban.reason);
    }

    switch (Player.SpawnStatus) {
        case CSmPlayer::ESpawnStatus::Spawning: {
            if (Player.Position == <0., 0., 0.>) {
                if (Player::getLastSpawnPosition(Player) != <0., 0., 0.>) {
                    Player::setLastSpawnPosition(Player, <0., 0., 0.>);
                }
            } else if (Player.Post == CSmPlayer::EPost::Char && Player::getLastSpawnPosition(Player) != Player.Position) {
                if (Player::getLastSpawnPosition(Player) == <0., 0., 0.>)
                    Player::setLastSpawnPosition(Player, Player.Position);
                else {
                    declare UI <=> UIManager.GetUI(Player);
                    declare netread Boolean _AltMenu_Visible for UI = False;

                    if  (_AltMenu_Visible){
                        Player::setUsedAltGlitch(Player, True);
                    }
                }
            }
        }

        case CSmPlayer::ESpawnStatus::Spawned: {

            if (UsePvPWeapons != G_LastUsePvPWeapons) {
                if (UsePvPWeapons)
                    Player::setUsedPvPWeapons(Player, True);
            }
            if (UsePvPCollisions != G_LastUsePvPCollisions) {
                if (UsePvPCollisions)
                    Player::setUsedPvPCollisions(Player, True);
            }

            if (G_WayPointSpawn != NullId && Player::getLastCheckpoint(Player) == NullId) {
                declare Editor_WayPointSpawn_isCheckpoint for This = False;
                if (Editor_WayPointSpawn_isCheckpoint)
                    Obstacle::JumpToCheckpointIdent_ByPassSpawn(Player, G_WayPointSpawn);

                G_WayPointSpawn = NullId;
            }
            
            SpecKeys::UpdateLayer(Player);

            // Unlimited stam
            declare StaminaUnlimited for Player = False;
            if (StaminaUnlimited && Player.Stamina != ML::TruncInteger(Player.StaminaMaxValue / 1.8)) {
                Player.Stamina = ML::TruncInteger(Player.StaminaMaxValue / 1.8);
            }

            // Effects on respawn
            declare PlayerHasRespawned for Player = False;
            if (PlayerHasRespawned) {
                if (S_FullAmmoSpawn) {
                    Weapons::FillUpPlayerAmmo(Player);
                }

                PlayerHasRespawned = False;
            }

            // Manage item effects
            declare ItemBuff = Player::getBuffTimes(Player);
            foreach (Name => Time in ItemBuff) {
                if (Time < Now) continue;
                switch (Name) {
                    // Progressively grant ammo
                    case Constants::C_ItemAmmo: {
                        declare AmmoItemBuffDuration for Player = 0.;
                        if (AmmoItemBuffDuration <= 0.) continue;
                        declare AmmoItemBuffAmount for Player = 1.;

                        declare AmmoItemStart = Time - AmmoItemBuffDuration * 1000;
                        declare TickDuration = 1000. * AmmoItemBuffDuration / AmmoItemBuffAmount;
                        declare AmmoItemBuffTicks for Player = 0;

                        if (Now > AmmoItemStart + AmmoItemBuffTicks * TickDuration)
                        {
                            AddPlayerAmmo(Player, SM::GetWeapon(Player.CurWeapon), 1.);
                            AmmoItemBuffTicks += 1;
                        }
                    }
                }
            }
        }

    }
}

G_LastUsePvPCollisions = UsePvPCollisions;
G_LastUsePvPWeapons = UsePvPWeapons;
***


***Match_EndMap***
***
DestroyUI(False);
EndTime = -1;

Dynamics::Clear();
Items::Destroy();
UIManager.UIAll.MarkersXML = "";
SM::UnspawnAllPlayers();

ObsScores::OnMapEnd();
***

***Match_BeforeCloseLadder***
***
declare CSmScore[] Unranked = [];

declare WorstRun = -1;
foreach (Score in Scores) {
    declare BestRun for Score = 1;
    if (BestRun > 0) {
        Score.LadderRankSortValue = BestRun;

        if (BestRun > WorstRun) WorstRun = BestRun;
    }
    else {
        Unranked.add(Score);
    }
}

foreach (Score in Unranked) {
    Score.LadderRankSortValue = WorstRun + 1;
}
***

***Match_AfterCloseLadder***
***
DoNothing();
***

***Match_EndServer***
***
SpawnScreen::DestroyRules();
SpawnScreen::DestroyMapInfo();
DestroyUI();
***

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
Void DoNothing(){}

Void CreateUI(Boolean _Replace) {
    CustomUI::Load();

    Layers::Create("EventsUI", EventsUI::GetLayer());
    Layers::Attach("EventsUI");
    if (_Replace) {
        Layers::Create("Markers", Markers::GetLayer(S_CheckpointMarkersCount));
        Layers::SetType("Markers", CUILayer::EUILayerType::Markers);
        UIManager.UIAll.MarkersXML = Markers::GetXML();

        Layers::Create("UpdateAuth", UpdateAuth::GetLayer());
        Layers::Create("CachReqs", CachReqs::GetLayer());
    }
    Layers::Attach("Markers");

    --- Campaign_CreateUI ---

    Layers::Create("Chrono", Chrono::GetLayer());
    Layers::Create("JumpBack", JumpBack::GetLayer());
    Layers::Create("TimeDiff", TimeDiff::GetLayer());
    Layers::Create("CpProgress", CpProgress::GetLayer());
    Layers::Create("CPTimes", CPTimes::GetLayer());
    //Layers::Create("KeysSettings", KeysSettings::GetLayer());
    Layers::Create("SpecKeys", SpecKeys::GetLayer());
    Layers::Create("AntiDevMode", AntiDevMode::GetLayer());

    Layers::Create("UpdatePlayer", UpdatePlayer::GetLayer());

    Layers::Create("Items", Items::CreateLayerItems());

    if (Settings::GetEnableRecords()) {
        Layers::Create("PlayerFinished", PlayerFinished::GetLayer());
        Layers::Attach("PlayerFinished");
        Layers::Create("InitPb", InitPb::GetLayer());
        Layers::Attach("InitPb");

        --- Obs_CreateRecordsLayer ---
        Layers::Attach("Records");
    }

    Layers::Attach("Chrono");
    Layers::Attach("JumpBack");
    Layers::Attach("TimeDiff");
    Layers::Attach("CpProgress");
    Layers::Attach("CPTimes");
    //Layers::Attach("KeysSettings");
    Layers::Attach("Items");
    Layers::Attach("SpecKeys");
    Layers::Attach("AntiDevMode");

    --- Obs_CreateRespawnBehaviorLayer ---
    Layers::Create("NextMapVote", NextMapVote::GetLayer(Settings::GetNextMapVotingRatio()));
    Layers::Attach("RespawnBehavior");
    Layers::Attach("NextMapVote");
    Layers::Create("SpectatorCount", SpectatorCount::GetLayer());
    Layers::Create("SpecList", SpecList::GetLayer());
    Layers::Create("Glitches", Glitches::GetLayer());
    Layers::Attach("SpectatorCount");
    Layers::Attach("SpecList");
    Layers::Attach("Glitches");

    --- Obs_CreateSurvivalRankingLayer ---

    Layers::Attach("CachReqs");
    Layers::Attach("UpdateAuth");
    Layers::Attach("UpdatePlayer");

    //Layers::AttachReplay("SpecKeys");

    CustomUI::Build();
    CustomUI::Attach();
}

Void CreateUI() {
    CreateUI(True);
}

Void DestroyUI(Boolean _Hard) {
    Dialog::Unload();

    Layers::Detach("EventsUI");
    Layers::Detach("Chrono");
    Layers::Detach("Glitches");
    Layers::Detach("JumpBack");
    Layers::Detach("TimeDiff");
    Layers::Detach("CpProgress");
    Layers::Detach("CPTimes");
    //Layers::Detach("KeysSettings");
    Layers::Detach("Items");
    Layers::Detach("Records");

    Layers::Detach("SpectatorCount");
    Layers::Detach("SpecList");
    Layers::Detach("NextMapVote");
    Layers::Detach("RespawnBehavior");
    Layers::Detach("SpecKeys");
    Layers::Detach("SurvivalRanking");
    Layers::Detach("AntiDevMode");

    Layers::Detach("UpdatePlayer");
    Layers::Detach("InitPb");
    Layers::Detach("PlayerFinished");

    //Layers::DetachReplay("SpecKeys");

    CustomUI::Unload();

    if (_Hard) {
        Layers::Detach("CachReqs");
        Layers::Detach("UpdateAuth");
        Layers::Detach("Markers");
        UIManager.UILayerDestroyAll();
    }
}

Void DestroyUI() {
    DestroyUI(True);
}

Void UpdateSettings() {
    if (S_TimeLimit != Settings::GetTimeLimit()) {
        Settings::SetTimeLimit(S_TimeLimit);

        if (Hud != Null && Hud.ScoresTable != Null) {
            Hud.ScoresTable.SetFooterText(TL::Compose("%1 "^Tools::TimeLimitToText(S_TimeLimit), _("Time limit : ")));
        }

        if (S_TimeLimit > 0) {
            EndTime = StartTime + (S_TimeLimit * 60 * 1000);
        } else {
            EndTime = -1;
        }
    }

    if (S_FastRespawn != Settings::GetFastRespawn()) {
        Settings::SetFastRespawn(S_FastRespawn);
    }

    if (S_AllowJump != Settings::GetAllowJump()) {
        Settings::SetAllowJump(S_AllowJump);
    }

    if (!Settings::GetForceDisableRecords() && (S_EnableRecords != Settings::GetEnableRecords() || MapAttr::IsLeaderboardEnabled() != Settings::GetEnableRecords())) {
        Settings::SetEnableRecords(S_EnableRecords && MapAttr::IsLeaderboardEnabled());
    }

    if (S_NextMapVotingRatio != Settings::GetNextMapVotingRatio()) {
        Settings::SetNextMapVotingRatio(S_NextMapVotingRatio);
    }

    if (S_FullAmmoSpawn != Settings::GetFullAmmoSpawn()) {
        Settings::SetFullAmmoSpawn(S_FullAmmoSpawn);
    }

    if (S_LegacyRespawn != Settings::GetLegacyRespawn()) {
        Settings::SetLegacyRespawn(S_LegacyRespawn);
    }

    if (S_BestNewRecordMsg != Settings::GetBestNewRecordMsg()) {
        Settings::SetBestNewRecordMsg(S_BestNewRecordMsg);
    }

    if (S_WorseNewRecordMsg != Settings::GetWorseNewRecordMsg()) {
        Settings::SetWorseNewRecordMsg(S_WorseNewRecordMsg);
    }

    declare Boolean ForceInvisibleSkin = S_ForceInvisibleSkin && G_ForceInvisibleSkin;
    if (ForceInvisibleSkin != Settings::GetForceInvisibleSkin()) {
        Settings::SetForceInvisibleSkin(ForceInvisibleSkin);

        if (Settings::GetForceInvisibleSkin()) {
            Obstacle::UpdatePlayersSkin(G_InvisibleSkinId);
        } else {
            Obstacle::UpdatePlayersSkin(NullId);
        }
    }

    if (S_EnablePlayerHighlight != Settings::GetEnablePlayerHighlight()) {
        Settings::SetEnablePlayerHighlight(S_EnablePlayerHighlight);

        if (Settings::GetForceInvisibleSkin()) {
            Obstacle::UpdatePlayersSkin(G_InvisibleSkinId);
        } else {
            Obstacle::UpdatePlayersSkin(NullId);
        }
    }

    if (S_ForceRNGSeed != Settings::GetForceRNGSeed()) {
        Settings::SetForceRNGSeed(S_ForceRNGSeed);
    }
    
    if (S_PvPWeapons != Settings::GetForcePvPWeapons()) {
        Settings::SetForcePvPWeapons(S_PvPWeapons);
        UsePvPWeapons = S_PvPWeapons || Obstacle::IsPvPWeaponsMap();
    }

    if (S_PvPCollisions != Settings::GetForcePvPCollisions()) {
        Settings::SetForcePvPCollisions(S_PvPCollisions);
        UsePvPCollisions = S_PvPCollisions || Obstacle::IsPvPCollisionsMap();
    }

    if (S_CheckpointMarkersCount != Settings::GetCheckpointMarkersCount()) {
        Settings::SetCheckpointMarkersCount(S_CheckpointMarkersCount);
        Layers::Update("Markers", Markers::GetLayer(S_CheckpointMarkersCount));
    }

    // --- Event settings ---

    if (!ObsEvents::HasForcedClear()) {
        if (ObsEvents::GetEventHandle() == "" && S_EventHandle != ""
            && ObsEvents::GetEventEdition() <= 0 && S_EventEdition > 0)
        {
            ObsEvents::SetEventHandle(S_EventHandle);
            ObsEvents::SetEventEdition(S_EventEdition);
        }
    }

    if (ObsEvents::GetEventHandle() != Settings::GetEventHandle()) {
        Settings::SetEventHandle(ObsEvents::GetEventHandle());
    }

    if (ObsEvents::GetEventEdition() != Settings::GetEventEdition()) {
        Settings::SetEventEdition(ObsEvents::GetEventEdition());
    }

    if (S_SwitchEventVotingRatio != Settings::GetSwitchEventVotingRatio()) {
        Settings::SetSwitchEventVotingRatio(S_SwitchEventVotingRatio);
    }

    if (S_LockEventsUI != Settings::GetLockEventsUI()) {
        Settings::SetLockEventsUI(S_LockEventsUI);
    }

    if (S_TimeBeforeSwitchEvent != Settings::GetTimeBeforeSwitchEvent()) {
        Settings::SetTimeBeforeSwitchEvent(S_TimeBeforeSwitchEvent);
    }
}
