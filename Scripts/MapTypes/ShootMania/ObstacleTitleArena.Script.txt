#RequireContext CSmMapType

#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/miltant/Nadeo_Fork/MapType.Script.txt" as MapType

declare Ident G_LastAnchorId;
declare Ident[] G_AnchorCache;

declare Text G_CurrentWindow;

Boolean IsEnabled(CAnchorData _Landmark)
{
    declare metadata Meta_Enabled for _Landmark = True;
    return Meta_Enabled;
}


Boolean IsGoal(CAnchorData _Landmark)
{
    if (!IsEnabled(_Landmark))
        return False;

    declare metadata Meta_CPType for _Landmark = 0;
    return _Landmark.Tag == "Goal" || Meta_CPType == 2;
}


Boolean IsCheckpoint(CAnchorData _Landmark)
{
    if (!IsEnabled(_Landmark))
        return False;

    declare metadata Meta_CPType for _Landmark = 0;
    return _Landmark.Tag == "Checkpoint" && (Meta_CPType == 0 || Meta_CPType == 1);
}


Boolean IsPortal(CAnchorData _Landmark)
{
    if (!IsEnabled(_Landmark))
        return False;

    declare metadata Meta_IsPortal for _Landmark = False;
    return Meta_IsPortal;
}


Boolean IsCpSpawn(CAnchorData _Landmark)
{
    if (!IsEnabled(_Landmark))
        return False;

    declare metadata Meta_IsCpSpawn for _Landmark = False;
    return Meta_IsCpSpawn;
}


Text GetStylesheet()
{
    return """
        <stylesheet>
            <style class="text" bgcolor="FFFF" textfont="Oswald" focusareacolor1="0000" focusareacolor2="0000" textcolor="FFFFFFFF"/>
            <style class="entry" focusareacolor1="797979AA" focusareacolor2="4777C1FF" textsize="2"/>
        </stylesheet>
    """;
}

Text LittleButton(Text _Position, Text _Text, Text _Name, Text _Size)
{
    return """
        <frame pos="{{{_Position}}}}">
            <label id="{{{_Name}}}" size="{{{_Size}}}" halign="center" valign="center2" scriptevents="1"
                text="{{{_Text}}}" focusareacolor1="797979AA" focusareacolor2="4777C1FF" textcolor="FFFFFFFF" />
        </frame>
    """;
}

Text LittleButton(Text _Position, Text _Text, Text _Name)
{
    return LittleButton(_Position, _Text, _Name, "6 6");
}

Text Select2(Text _Position, Text _Option1, Text _Option2, Text _Selector)
{
    return """
        <frame pos="{{{_Position}}}}">
            <frame clip="True" clipposn="0 -2.5" clipsizen="60 5" halign="center">
                <label id="{{{_Option1}}}"  pos="-10 -2" size="20 6" text="{{{_Option1}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option2}}}"  pos="10 -2"  size="20 6" text="{{{_Option2}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <quad  id="{{{_Selector}}}" pos="-20 1"  size="20 7" bgcolor="4777C1FF"/>
            </frame>
            <quad pos="0 0.5" size="41 6.1" bgcolor="797979AA" halign="center"/>
        </frame>
    """;
}

Text Select3(Text _Position, Text _Option1, Text _Option2, Text _Option3, Text _Selector)
{
    return """
        <frame pos="{{{_Position}}}}">
            <frame clip="True" clipposn="0 -2.5" clipsizen="60 5" halign="center">
                <label id="{{{_Option1}}}"  pos="-20 -2" size="20 6" text="{{{_Option1}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option2}}}"  pos="0 -2"   size="20 6" text="{{{_Option2}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option3}}}"  pos="20 -2"  size="20 6" text="{{{_Option3}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <quad  id="{{{_Selector}}}" pos="-30 1"  size="20 7" bgcolor="4777C1FF"/>
            </frame>
            <quad pos="0 0.5" size="61 6.1" bgcolor="797979AA" halign="center"/>
        </frame>
    """;
}

Text Select4(Text _Position, Text _Option1, Text _Option2, Text _Option3, Text _Option4, Text _Selector)
{
    return """
        <frame pos="{{{_Position}}}}">
            <frame clip="True" clipposn="0 -2.5" clipsizen="80 5" halign="center">
                <label id="{{{_Option1}}}"  pos="-30 -2"  size="20 6" text="{{{_Option1}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option2}}}"  pos="-10 -2"  size="20 6" text="{{{_Option2}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option3}}}"  pos="10 -2"   size="20 6" text="{{{_Option3}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option4}}}"  pos="30 -2" size="20 6" text="{{{_Option4}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <quad  id="{{{_Selector}}}" pos="-40 1"   size="20 7" bgcolor="4777C1FF"/>
            </frame>
            <quad pos="0 0.5" size="81 6.1" bgcolor="797979AA" halign="center"/>
        </frame>
    """;
}

Text Select5(Text _Position, Text _Option1, Text _Option2, Text _Option3, Text _Option4, Text _Option5, Text _Selector)
{
    return """
        <frame pos="{{{_Position}}}}">
            <frame clip="True" clipposn="0 -2.5" clipsizen="80 5" halign="center">
                <label id="{{{_Option1}}}"  pos="-32 -2"  size="16 6" text="{{{_Option1}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option2}}}"  pos="-16 -2"  size="16 6" text="{{{_Option2}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option3}}}"  pos="0 -2"   size="16 6" text="{{{_Option3}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option4}}}"  pos="16 -2" size="16 6" text="{{{_Option4}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="{{{_Option5}}}"  pos="32 -2" size="16 6" text="{{{_Option5}}}" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <quad  id="{{{_Selector}}}" pos="-40 1"   size="16 7" bgcolor="4777C1FF"/>
            </frame>
            <quad pos="0 0.5" size="81 6.1" bgcolor="797979AA" halign="center"/>
        </frame>
    """;
}

Text Entry(Text _Position, Text _Entry)
{
    return """
        <frame pos="{{{_Position}}}">
            <entry id="{{{_Entry}}}" pos="0 0" size="20 5" class="entry" default="0" textfont="Oswald" halign="center" valign="center2"/>
            <quad pos="0 0" size="21 5.85" bgcolor="797979AA" halign="center" valign="center"/>
        </frame>
    """;
}

Text Checkbox(Text _Position, Text _Id)
{
    return """
        <frame pos="{{{_Position}}}">
            <label pos="0 0" z-index="0" size="5 5" text="✖" textsize="2"
                halign="center" valign="center2" scriptevents="1" id="{{{_Id}}}"/>
            <quad pos="2.5 2.5" z-index="0" size="5 5" bgcolor="797979AA" halign="right" valign="top"/>
        </frame>
    """;
}

Text Property(Text _Position, Text _Title, Text _Content)
{
    return """
        <frame pos="{{{_Position}}}">
            <label pos="0 0" size="20 5" text="{{{_Title}}}" textsize="2"
                halign="center" valign="center2" class="text"/>
            {{{_Content}}}
        </frame>
    """;
}

Text BigProperty(Text _Position, Text _Title, Text _Content)
{
    return """
        <frame pos="{{{_Position}}}">
            <label pos="0 0" size="75 7" text="{{{_Title}}}" textsize="4"
                class="text" halign="center" valign="center2"/>
            {{{_Content}}}
        </frame>
    """;
}

Text PlusMinus(Text _Position, Text _Content, Text _Selector)
{
    return """<label id="{{{_Selector}}}" size="4 2.5" pos="{{{_Position}}}" halign="center" valign="center2" scriptevents="1"
        text="{{{_Content}}}" textsize="2" focusareacolor1="797979AA" focusareacolor2="4777C1FF" textcolor="fff"/>""";
}

Text PropertyOrder(Text _Position)
{
    return """
        {{{BigProperty(_Position, "Order",
            PlusMinus("7 -4.75", "+", "OrderPlus")
          ^ PlusMinus("7 -7.25", "-", "OrderMinus")
          ^ Entry("-1 -6", "Entry_Order")
          ^ LittleButton("-20 -6", "⏴", "OrderPrevious")
          ^ LittleButton("20 -6", "⏵", "OrderNext")  )}}}
    """;
}

Text MakeWindow(Text _Title, Text _Content)
{
    return """
<frame pos="125 20" scale="0.75" z-index="-1">
    <frame>
        <label pos="0 40" size="75 10" class="text" text="{{{_Title}}}" textsize="5" halign="center" valign="center2"/>
        <label pos="41.5 41.5" size="7 7" valign="center" halign="center" scriptevents="1" scriptaction="Close"
                   text="❌" focusareacolor2="FF0000FF" textsize="2" focusareacolor1="0000" />
        {{{Select2("0 32.6", "Enable", "Disable", "Enabled_Selector")}}}
        {{{LittleButton("-40 40.2", "", "Label_Copy")}}}
        {{{LittleButton("-40 32.6", "", "Label_Paste")}}}
        {{{LittleButton("-40 25", "", "Label_Test")}}}
    </frame>
    <frame id="properties" pos="0 10">
        {{{_Content}}}
    </frame>
    <quad pos="-45 45" size="90 115" bgcolor="000000AA" scriptevents="1" id="Window_Background"/>
</frame>
    """;
}

Text MakeWindowNoTest(Text _Title, Text _Content)
{
    return """
<frame pos="125 20" scale="0.75" z-index="-1">
    <frame>
        <label pos="0 40" size="75 10" class="text" text="{{{_Title}}}" textsize="5" halign="center" valign="center2"/>
        <label pos="41.5 41.5" size="7 7" valign="center" halign="center" scriptevents="1" scriptaction="Close"
                   text="❌" focusareacolor2="FF0000FF" textsize="2" focusareacolor1="0000" />
        {{{Select2("0 32.6", "Enable", "Disable", "Enabled_Selector")}}}
        {{{LittleButton("-40 40.2", "", "Label_Copy")}}}
        {{{LittleButton("-40 32.6", "", "Label_Paste")}}}
    </frame>
    <frame id="properties" pos="0 10">
        {{{_Content}}}
    </frame>
    <quad pos="-45 45" size="90 115" bgcolor="000000AA" scriptevents="1" id="Window_Background"/>
</frame>
    """;
}

Text MakeWindowNoCopyPaste(Text _Title, Text _Content)
{
    return """
<frame pos="125 20" scale="0.75" z-index="-1">
    <frame>
        <label pos="0 40" size="75 10" class="text" text="{{{_Title}}}" textsize="5" halign="center" valign="center2"/>
        <label pos="41.5 41.5" size="7 7" valign="center" halign="center" scriptevents="1" scriptaction="Close"
                   text="❌" focusareacolor2="FF0000FF" textsize="2" focusareacolor1="0000" />
        {{{Select2("0 32.6", "Enable", "Disable", "Enabled_Selector")}}}
    </frame>
    <frame id="properties" pos="0 10">
        {{{_Content}}}
    </frame>
    <quad pos="-45 45" size="90 115" bgcolor="000000AA" scriptevents="1" id="Window_Background"/>
</frame>
    """;
}

Text MakeWindowWithoutEnabled(Text _Title, Text _Content)
{
    return """
<frame pos="125 20" scale="0.75" z-index="-1">
    <frame>
        <label pos="0 40" size="75 10" class="text" text="{{{_Title}}}" textsize="5" halign="center" valign="center2"/>
        <label pos="41.5 41.5" size="7 7" valign="center" halign="center" scriptevents="1" scriptaction="Close"
                   text="❌" focusareacolor2="FF0000FF" textsize="2" focusareacolor1="0000" />
    </frame>
    <frame id="properties" pos="0 10">
        {{{_Content}}}
    </frame>
    <quad pos="-45 45" size="90 115" bgcolor="000000AA" scriptevents="1" id="Window_Background"/>
</frame>
    """;
}

Text SaveButton()
{
    return """
    <manialink version="3" name="Obstacle:SaveButton">
        <frame pos="-148 -79">
            <quad size="12 12" pos="-1 1" style="Icons64x64_1" substyle="Save" tooltip="Quick Save
Press [S] for dialogs..." scriptevents="1" id="Quad_Save"/>
        </frame>
        <script><![CDATA[
            main() {
                declare Quad_Save = (Page.GetFirstChild("Quad_Save") as CMlQuad);

                while (True) {
                    yield;
                    declare Boolean MapSaved for Page;

                    if (MapSaved) {
                        Quad_Save.ModulateColor = <.77, .76, .77>;
                    } else {
                        Quad_Save.ModulateColor = <1., 1., 1.>;
                    }

                    foreach (Event in PendingEvents) {
                        if (Event.Type == CMlEvent::Type::MouseClick) {
                            SendCustomEvent("Event_Save", Text[]);
                        }
                    }
                }
            }
        ]]></script>
    </manialink>
    """;
}

Void SetWindow(Text _Window)
{
    G_CurrentWindow = _Window;
}

Text GetML()
{
    return """
    {{{GetStylesheet()}}}
    {{{G_CurrentWindow}}}
    """;
}

Text Private_WeaponUpdate()
{
    return """
    declare Integer Weapon for Page;
    declare Real Weapon_Gain for Page;
    declare Integer Weapon_Amount for Page;
    declare Integer Stamina for Page;
    declare Real Stamina_Gain for Page;
    declare Real Stamina_Amount for Page;

    if (Stamina == 0) Stamina = 1;

    declare Quad_Weapon_Selector <=> (Frame_Properties.GetFirstChild("Weapon_Selector") as CMlQuad);
    declare Entry_Weapon_Gain <=> (Frame_Properties.GetFirstChild("Entry_Weapon_Gain") as CMlEntry);
    declare Entry_Weapon_Amount <=> (Frame_Properties.GetFirstChild("Entry_Weapon_Amount") as CMlEntry);
    declare Quad_Stamina_Selector <=> (Frame_Properties.GetFirstChild("Stamina_Selector") as CMlQuad);
    declare Entry_Stamina_Gain <=> (Frame_Properties.GetFirstChild("Entry_Stamina_Gain") as CMlEntry);
    declare Entry_Stamina_Amount <=> (Frame_Properties.GetFirstChild("Entry_Stamina_Amount") as CMlEntry);

    Quad_Weapon_Selector.RelativePosition_V3.X = -40. + Weapon*16.;
    Quad_Stamina_Selector.RelativePosition_V3.X = -20 + (Stamina-1)*20.;

    Entry_Weapon_Gain.SetText(TL::ToText(Weapon_Gain*100), False);
    Entry_Weapon_Amount.SetText(TL::ToText(Weapon_Amount), False);
    Entry_Stamina_Gain.SetText(TL::ToText(Stamina_Gain*100), False);
    Entry_Stamina_Amount.SetText(TL::ToText(Stamina_Amount*100), False);
    """;
}


Void Load()
{
    log(MapFileName ^ ":" ^ Now ^ "> Loaded.");
}


Void Unload()
{
}


Void Init()
{
    if (MapType::GetVersion() == 0) { // new map
        declare metadata Integer Meta_ForceFastRS for Map = 1;
        MapType::SetVersion(3);
    }
    CustomEditAnchorData = True;

    declare Ident[] NewAnchorCache;
    foreach (Anchor in AnchorData)
        NewAnchorCache.add(Anchor.Id);
    G_AnchorCache = NewAnchorCache;
}


Void InitBasePageVariables(CAnchorData _Anchor)
{
    declare Boolean Enabled for ManialinkPage;
    declare metadata Meta_Enabled for _Anchor = True;

    Enabled = Meta_Enabled;
}


Void SaveBasePageVariables(CAnchorData _Anchor)
{
    declare Boolean Enabled for ManialinkPage;
    declare metadata Meta_Enabled for _Anchor = True;

    Meta_Enabled = Enabled;
}


Void InitWeaponPageVariables(CAnchorData _Anchor)
{
    declare Integer Weapon for ManialinkPage;
    declare Real Weapon_Gain for ManialinkPage;
    declare Integer Weapon_Amount for ManialinkPage;
    declare Integer Stamina for ManialinkPage;
    declare Real Stamina_Gain for ManialinkPage;
    declare Real Stamina_Amount for ManialinkPage;

    declare metadata Meta_Weapon for _Anchor = 1;
    declare metadata Meta_Weapon_Gain for _Anchor = 1.0;
    declare metadata Meta_Weapon_Amount for _Anchor = 4;
    declare metadata Meta_Stamina for _Anchor = 0;
    declare metadata Meta_Stamina_Gain for _Anchor = 1.0;
    declare metadata Meta_Stamina_Amount for _Anchor = 1.0;

    Weapon = Meta_Weapon;
    Weapon_Gain = Meta_Weapon_Gain;
    Weapon_Amount = Meta_Weapon_Amount;
    Stamina = Meta_Stamina;
    Stamina_Gain = Meta_Stamina_Gain;
    Stamina_Amount = Meta_Stamina_Amount;
}


Void SaveWeaponVariables(CAnchorData _Anchor, Integer Weapon, Real Weapon_Gain, Integer Weapon_Amount, Integer Stamina, Real Stamina_Gain, Real Stamina_Amount)
{
    declare metadata Meta_Weapon for _Anchor = 1;
    declare metadata Meta_Weapon_Gain for _Anchor = 1.0;
    declare metadata Meta_Weapon_Amount for _Anchor = 4;
    declare metadata Meta_Stamina for _Anchor = 0;
    declare metadata Meta_Stamina_Gain for _Anchor = 1.0;
    declare metadata Meta_Stamina_Amount for _Anchor = 1.0;

    Meta_Weapon = Weapon;
    Meta_Weapon_Gain = ML::Clamp(Weapon_Gain, 0., 10.);
    Meta_Weapon_Amount = ML::Clamp(Weapon_Amount, 0, 21);
    Meta_Stamina = Stamina;
    Meta_Stamina_Gain = ML::Clamp(Stamina_Gain, 0., 1.);
    Meta_Stamina_Amount = ML::Clamp(Stamina_Amount, .1, 3.);
}


Void SaveWeaponPageVariables(CAnchorData _Anchor)
{
    declare Integer Weapon for ManialinkPage;
    declare Real Weapon_Gain for ManialinkPage;
    declare Integer Weapon_Amount for ManialinkPage;
    declare Integer Stamina for ManialinkPage;
    declare Real Stamina_Gain for ManialinkPage;
    declare Real Stamina_Amount for ManialinkPage;

    SaveWeaponVariables(_Anchor, Weapon, Weapon_Gain, Weapon_Amount, Stamina, Stamina_Gain, Stamina_Amount);
}


Void EditMap()
{
    G_LastAnchorId = NullId;

    declare metadata Boolean Meta_PvP_Weapons for Map = False;
    declare metadata Boolean Meta_PvP_Collisions for Map = False;
    declare metadata Boolean Meta_SameWallJump for Map = True;
    declare metadata Integer Meta_ForceFastRS for Map = 0;
    declare metadata Integer Meta_Invulnerability for Map = 2000;
    declare metadata Boolean Meta_LB_Enabled for Map = True;

    declare PvP_Weapons for ManialinkPage = Meta_PvP_Weapons;
    declare PvP_Collisions for ManialinkPage = Meta_PvP_Collisions;
    declare SameWallJump for ManialinkPage = Meta_SameWallJump;
    declare ForceFastRS for ManialinkPage = Meta_ForceFastRS;
    declare Invulnerability for ManialinkPage = Meta_Invulnerability;
    declare EnabledLB for ManialinkPage = Meta_LB_Enabled;

    /// --- Manialink
    declare Properties = """
        <frame id="Map" pos="0 15">
            {{{BigProperty("0 5", "Settings to enable", "")}}}
            {{{Property("-20 -2.5", "PvP Weapons", Checkbox("13 0", "Checkbox_PvP_Weapons"))}}}
            {{{Property("12.5 -2.5", "PvP Collisions", Checkbox("13 0", "Checkbox_PvP_Collisions"))}}}
            {{{Property("-20 -10", "Same-Wall WJ", Checkbox("13 0", "Checkbox_SameWallJump"))}}}
            {{{Property("-20 -17.5", "Fast Respawn", Checkbox("13 0", "Checkbox_ForceFastRS"))}}}
            {{{BigProperty("0 -28", "Weapon Ready Delay", Entry("0 -7.5", "Entry_Invulnerability"))}}}
            {{{BigProperty("0 -46.5", "Leaderboard", "")}}}
            {{{Property("0 -55", "Enabled", Checkbox("13 0", "Checkbox_LB_Enabled"))}}}
        </frame>
    """;

    SetWindow(MakeWindowWithoutEnabled("Edit Map", Properties));
    ManialinkText = """
    <manialink version="3" name="Obstacle:EditMap">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL
    #Include "MathLib" as ML

    Void UpdateView() {
        declare Boolean PvP_Weapons for Page;
        declare Boolean PvP_Collisions for Page;
        declare Boolean SameWallJump for Page;
        declare Integer ForceFastRS for Page;
        declare Integer Invulnerability for Page;
        declare Boolean EnabledLB for Page;

        declare Label_PvP_Weapons <=> (Page.GetFirstChild("Checkbox_PvP_Weapons") as CMlLabel);
        declare Label_PvP_Collisions <=> (Page.GetFirstChild("Checkbox_PvP_Collisions") as CMlLabel);
        declare Label_SameWallJump <=> (Page.GetFirstChild("Checkbox_SameWallJump") as CMlLabel);
        declare Label_ForceFastRS <=> (Page.GetFirstChild("Checkbox_ForceFastRS") as CMlLabel);
        declare Entry_Invulnerability <=> (Page.GetFirstChild("Entry_Invulnerability") as CMlEntry);
        declare Label_LB_Enabled <=> (Page.GetFirstChild("Checkbox_LB_Enabled") as CMlLabel);

        if (!EnabledLB && Label_LB_Enabled.Value != "") {
            Label_LB_Enabled.SetText("");
        }
        if (EnabledLB && Label_LB_Enabled.Value != "✖") {
            Label_LB_Enabled.SetText("✖");
        }

        if (!PvP_Weapons && Label_PvP_Weapons.Value != "") {
            Label_PvP_Weapons.SetText("");
        }
        if (PvP_Weapons && Label_PvP_Weapons.Value != "✖") {
            Label_PvP_Weapons.SetText("✖");
        }

        if (!PvP_Collisions && Label_PvP_Collisions.Value != "") {
            Label_PvP_Collisions.SetText("");
        }
        if (PvP_Collisions && Label_PvP_Collisions.Value != "✖") {
            Label_PvP_Collisions.SetText("✖");
        }

        if (!SameWallJump && Label_SameWallJump.Value != "") {
            Label_SameWallJump.SetText("");
        }
        if (SameWallJump && Label_SameWallJump.Value != "✖") {
            Label_SameWallJump.SetText("✖");
        }

        if (ForceFastRS == 0 && Label_ForceFastRS.Value != "?") {
            Label_ForceFastRS.SetText("?");
        }
        if (ForceFastRS == 1 && Label_ForceFastRS.Value != "✖") {
            Label_ForceFastRS.SetText("✖");
        }
        if (ForceFastRS == 2 && Label_ForceFastRS.Value != "") {
            Label_ForceFastRS.SetText("");
        }

        Entry_Invulnerability.SetText(TL::ToText(Invulnerability), False);

        SendCustomEvent("Event_Save_Map", Text[]);
    }

    main() {
        declare Boolean PvP_Weapons for Page;
        declare Boolean PvP_Collisions for Page;
        declare Boolean SameWallJump for Page;
        declare Integer ForceFastRS for Page;
        declare Integer Invulnerability for Page;
        declare Boolean EnabledLB for Page;

        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type) {
                    case CMlEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Checkbox_PvP_Weapons":
                                PvP_Weapons = !PvP_Weapons;

                            case "Checkbox_PvP_Collisions":
                                PvP_Collisions = !PvP_Collisions;

                            case "Checkbox_SameWallJump":
                                SameWallJump = !SameWallJump;

                            case "Checkbox_ForceFastRS": {
                                switch (ForceFastRS) {
                                    case 2:
                                        ForceFastRS = 1;
                                    default:
                                        ForceFastRS = 2;
                                }
                            }

                            case "Checkbox_LB_Enabled":
                                EnabledLB = !EnabledLB;
                        }

                        NeedUpdate = True;
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);

                        switch(Entry.ControlId) {
                            case "Entry_Invulnerability": Invulnerability = ML::Max(TL::ToInteger(Entry.Value), 0);
                        }
                        NeedUpdate = True;
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}

Void SaveMapSettings()
{
    declare metadata Boolean Meta_PvP_Weapons for Map;
    declare metadata Boolean Meta_PvP_Collisions for Map;
    declare metadata Boolean Meta_SameWallJump for Map;
    declare metadata Integer Meta_ForceFastRS for Map;
    declare metadata Integer Meta_Invulnerability for Map;
    declare metadata Boolean Meta_LB_Enabled for Map;

    declare Boolean PvP_Weapons for ManialinkPage;
    declare Boolean PvP_Collisions for ManialinkPage;
    declare Boolean SameWallJump for ManialinkPage;
    declare Integer ForceFastRS for ManialinkPage;
    declare Integer Invulnerability for ManialinkPage;
    declare Boolean EnabledLB for ManialinkPage;

    Meta_PvP_Weapons = PvP_Weapons;
    Meta_PvP_Collisions = PvP_Collisions;
    Meta_SameWallJump = SameWallJump;
    Meta_ForceFastRS = ForceFastRS;
    Meta_Invulnerability = Invulnerability;
    Meta_LB_Enabled = EnabledLB;
}

Void EditObjectives()
{
    G_LastAnchorId = NullId;

    declare Bronze_Medal for ManialinkPage = Map.TMObjective_BronzeTime;
    declare Silver_Medal for ManialinkPage = Map.TMObjective_SilverTime;
    declare Gold_Medal for ManialinkPage = Map.TMObjective_GoldTime;
    declare Champion_Medal for ManialinkPage = Map.TMObjective_AuthorTime;

    /// --- Manialink
    declare Properties = """
        <frame id="Objectives" pos="0 15">
            {{{Property("0 0", "Bronze Medal", Entry("0 -5.5", "Entry_Bronze_Medal"))}}}
            {{{Property("0 -15", "Silver Medal", Entry("0 -5.5", "Entry_Silver_Medal"))}}}
            {{{Property("0 -30", "Gold Medal", Entry("0 -5.5", "Entry_Gold_Medal"))}}}
            {{{Property("0 -45", "Master Medal", Entry("0 -5.5", "Entry_Champion_Medal"))}}}

            {{{LittleButton("-20 -65", "", "Button_Clear", "8 8")}}}
            <label text="Clear medal times" pos="-12 -65" valign="center2" />

            {{{LittleButton("-20 -80", "", "Button_Save", "8 8")}}}
            <label text="Save medal times" pos="-12 -80" valign="center2" />
        </frame>
    """;

    SetWindow(MakeWindowWithoutEnabled("Edit Objectives", Properties));
    ManialinkText = """
    <manialink version="3" name="Obstacle:EditObjectives">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL
    #Include "MathLib" as ML

    Integer ParseTime(Text _Source) {
        declare Time = 0.;
        declare Factor = 1.;
        declare TimeComponents = TL::Split(":", _Source);
        declare I = TimeComponents.count - 1;

        for (_I, 0, TimeComponents.count - 1) {
            Time += Factor * TL::ToReal(TL::Join("", TL::RegexFind("[0-9\\.]", TimeComponents[I], "g")));
            Factor *= 60.;
            I -= 1;
        }

        return ML::FloorInteger(Time * 1000.);
    }

    Void UpdateView() {
        declare Integer Bronze_Medal for Page;
        declare Integer Silver_Medal for Page;
        declare Integer Gold_Medal for Page;
        declare Integer Champion_Medal for Page;

        declare Entry_Bronze_Medal <=> (Page.GetFirstChild("Entry_Bronze_Medal") as CMlEntry);
        declare Entry_Silver_Medal <=> (Page.GetFirstChild("Entry_Silver_Medal") as CMlEntry);
        declare Entry_Gold_Medal <=> (Page.GetFirstChild("Entry_Gold_Medal") as CMlEntry);
        declare Entry_Champion_Medal <=> (Page.GetFirstChild("Entry_Champion_Medal") as CMlEntry);

        Entry_Bronze_Medal.SetText(TL::TimeToText(Bronze_Medal, True), False);
        Entry_Silver_Medal.SetText(TL::TimeToText(Silver_Medal , True), False);
        Entry_Gold_Medal.SetText(TL::TimeToText(Gold_Medal, True), False);
        Entry_Champion_Medal.SetText(TL::TimeToText(Champion_Medal, True), False);
    }

    main() {
        declare Integer Bronze_Medal for Page;
        declare Integer Silver_Medal for Page;
        declare Integer Gold_Medal for Page;
        declare Integer Champion_Medal for Page;

        declare NeedUpdate = True;
        
        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type) {
                    case CMlScriptEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Button_Save": {
                                SendCustomEvent("Event_Save_Objectives", Text[]);
                            }
                            case "Button_Clear": {
                                SendCustomEvent("Event_Clear_Objectives", Text[]);
                            }
                        }
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);
                        declare EntryValue = ParseTime(Entry.Value);
                        
                        switch(Entry.ControlId) {
                            case "Entry_Champion_Medal": Champion_Medal = EntryValue;
                            case "Entry_Gold_Medal": Gold_Medal = EntryValue;
                            case "Entry_Silver_Medal": Silver_Medal = EntryValue;
                            case "Entry_Bronze_Medal": Bronze_Medal = EntryValue;
                        }


                        if (Gold_Medal < Champion_Medal) {
                            if (Gold_Medal < 0.5 * Champion_Medal) {
                                Gold_Medal = ML::CeilingInteger(Champion_Medal / 1000. * 1.066666) * 1000;
                            } else {
                                Gold_Medal = Champion_Medal;
                            }
                        }
                        if (Silver_Medal < Gold_Medal) {
                            if (Silver_Medal < 0.5 * Gold_Medal) {
                                Silver_Medal = ML::CeilingInteger(Gold_Medal / 1000. * 1.125) * 1000;
                            } else {
                                Silver_Medal = Gold_Medal;
                            }
                        }
                        if (Bronze_Medal < Silver_Medal) {
                            if (Bronze_Medal < 0.5 * Silver_Medal) {
                                Bronze_Medal = ML::CeilingInteger(Silver_Medal / 1000. * 1.25) * 1000;
                            } else {
                                Bronze_Medal = Silver_Medal;
                            }
                        }

                        NeedUpdate = True;

                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}

Void SaveObjectives()
{
    declare metadata Boolean Meta_IsMedalSet for Map = False;
    declare metadata Integer Meta_Champion_Medal for Map = -1;
    declare metadata Integer Meta_Gold_Medal for Map = -1;
    declare metadata Integer Meta_Silver_Medal for Map = -1;
    declare metadata Integer Meta_Bronze_Medal for Map = -1;

    declare Integer Champion_Medal for ManialinkPage = -1;
    declare Integer Gold_Medal for ManialinkPage = -1;
    declare Integer Silver_Medal for ManialinkPage = -1;
    declare Integer Bronze_Medal for ManialinkPage = -1;
    
    if (Champion_Medal != -1) {
        Map.TMObjective_AuthorTime = Champion_Medal;
        Meta_Champion_Medal = Champion_Medal;
    }
    if (Gold_Medal != -1) {
        Map.TMObjective_GoldTime = Gold_Medal;
        Meta_Gold_Medal = Gold_Medal;
    }
    if (Silver_Medal != -1) {
        Map.TMObjective_SilverTime = Silver_Medal;
        Meta_Silver_Medal = Silver_Medal;
    }
    if (Bronze_Medal != -1) {
        Map.TMObjective_BronzeTime = Bronze_Medal;
        Meta_Bronze_Medal = Bronze_Medal;
    }

    if (Champion_Medal != -1 && Gold_Medal != -1 && Silver_Medal != -1 && Bronze_Medal != -1) {
        Meta_IsMedalSet = True;
    }
}

Void ClearObjectives() {
    declare metadata Boolean Meta_IsMedalSet for Map = False;
    declare metadata Integer Meta_Champion_Medal for Map = -1;
    declare metadata Integer Meta_Gold_Medal for Map = -1;
    declare metadata Integer Meta_Silver_Medal for Map = -1;
    declare metadata Integer Meta_Bronze_Medal for Map = -1;
    
    Map.TMObjective_AuthorTime = -1;
    Map.TMObjective_GoldTime = -1;
    Map.TMObjective_SilverTime = -1;
    Map.TMObjective_BronzeTime = -1;

    Meta_Champion_Medal = -1;
    Meta_Gold_Medal = -1;
    Meta_Silver_Medal = -1;
    Meta_Bronze_Medal = -1;
    Meta_IsMedalSet = False;
}

Void PreserveObjectives()
{
    if (Map.TMObjective_AuthorTime == -1) {
        declare metadata Integer Meta_Champion_Medal for Map = 1000;
        declare metadata Integer Meta_Gold_Medal for Map = 1000;
        declare metadata Integer Meta_Silver_Medal for Map = 1000;
        declare metadata Integer Meta_Bronze_Medal for Map = 1000;
        
        Map.TMObjective_AuthorTime = Meta_Champion_Medal;
        Map.TMObjective_GoldTime = Meta_Gold_Medal;
        Map.TMObjective_SilverTime = Meta_Silver_Medal;
        Map.TMObjective_BronzeTime = Meta_Bronze_Medal;
    }
}

Void EditGoal(CAnchorData _Goal)
{
    InitBasePageVariables(_Goal);

    SetWindow(MakeWindowNoCopyPaste("Edit Goal", ""));
    ManialinkText = """
    <manialink version="3" name="Obstacle:EditGoal">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Boolean Enabled for Page;

        declare Quad_Enabled_Selector <=> (Page.GetFirstChild("Enabled_Selector") as CMlQuad);
        if (Enabled) {
            Quad_Enabled_Selector.RelativePosition_V3.X = -20.;
        }
        else {
            Quad_Enabled_Selector.RelativePosition_V3.X = 0.;
        }

        SendCustomEvent("Event_Save_Goal", Text[]);
    }

    main() {
        declare Boolean Enabled for Page;
        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type){
                    case CMlEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Enable" : {
                                Enabled = True;
                                NeedUpdate = True;
                            }
                            case "Disable" : {
                                Enabled = False;
                                NeedUpdate = True;
                            }
                            case "Window_Background":
                                SendCustomEvent("Event_Property_Window_Clicked", Text[]);
                        }
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}
Void SaveGoalSettings()
{
    if (!AnchorData.existskey(G_LastAnchorId))
        return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if (Anchor.Tag != "Goal")
        return;

    SaveBasePageVariables(Anchor);
}


Void EditCheckpoint(CAnchorData _Checkpoint)
{
    /// --- Variables
    InitBasePageVariables(_Checkpoint);

    declare Integer Order for ManialinkPage;
    declare Integer CPType for ManialinkPage;
    declare Boolean IsPortal for ManialinkPage;
    declare Boolean RefillWeapon for ManialinkPage;
    declare Boolean EmptyWeapon for ManialinkPage;
    declare Boolean RefillStamina for ManialinkPage;
    declare Boolean EmptyStamina for ManialinkPage;

    declare metadata Meta_CPType for _Checkpoint = 0;
    declare metadata Meta_IsPortal for _Checkpoint = False;
    declare metadata Meta_RefillWeapon for _Checkpoint = False;
    declare metadata Meta_EmptyWeapon for _Checkpoint = False;
    declare metadata Meta_RefillStamina for _Checkpoint = False;
    declare metadata Meta_EmptyStamina for _Checkpoint = False;

    Order = _Checkpoint.Order;
    CPType = Meta_CPType;
    IsPortal = Meta_IsPortal;
    RefillWeapon = Meta_RefillWeapon;
    EmptyWeapon = Meta_EmptyWeapon;
    RefillStamina = Meta_RefillStamina;
    EmptyStamina = Meta_EmptyStamina;

    InitWeaponPageVariables(_Checkpoint);

    /// --- Manialink
    declare Properties = """
        <frame id="Basic" pos="0 15">
            {{{BigProperty("0 -2.5", "Type", Select3("0 -4", "Checkpoint", "Portal", "Goal", "Type_Selector"))}}}
            {{{PropertyOrder("0 -15.5")}}}
        </frame>

        <frame id="Weapon" pos="0 -34">
            {{{BigProperty("0 18", "Weapon", Select5("0 -3.5", "Laser", "Rocket", "Nucleus", "Arrow", "Missile", "Weapon_Selector"))}}}
            {{{Property("-12 5.5", "Gain (0-1000%)", Entry("0 -5.5", "Entry_Weapon_Gain"))}}}
            {{{Property("12 5.5", "Amount (0-10)", Entry("0 -5.5", "Entry_Weapon_Amount"))}}} <!-- 21 18 16 21 -->

            {{{Property("-15 -7.5", "Refill", Checkbox("10 0", "Checkbox_Fill_Weapon"))}}}
            {{{Property("7.5 -7.5", "Empty", Checkbox("10 0", "Checkbox_Empty_Weapon"))}}}
        </frame>

        <frame id="Stamina" pos="0 -67.5">
            {{{BigProperty("0 18", "Stamina", Select2("0 -3.5", "Limited", "Unlimited", "Stamina_Selector"))}}}
            {{{Property("-12 5.5", "Gain (0-100%)", Entry("0 -5.5", "Entry_Stamina_Gain"))}}}
            {{{Property("12 5.5", "Amount (10-300)", Entry("0 -5.5", "Entry_Stamina_Amount"))}}}

            {{{Property("-15 -7.5", "Refill", Checkbox("10 0", "Checkbox_Fill_Stamina"))}}}
            {{{Property("7.5 -7.5", "Empty", Checkbox("10 0", "Checkbox_Empty_Stamina"))}}}
        </frame>
    """;

    SetWindow(MakeWindow("Edit Checkpoint", Properties));

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditCheckpoint">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Boolean Enabled for Page;
        declare Boolean IsPortal for Page;
        declare Boolean RefillWeapon for Page;
        declare Boolean EmptyWeapon for Page;
        declare Boolean RefillStamina for Page;
        declare Boolean EmptyStamina for Page;
        declare Integer CPType for Page;
        declare Integer Order for Page;
        declare Ident CopiedCheckpointId for Page;

        declare Quad_Enabled_Selector <=> (Page.GetFirstChild("Enabled_Selector") as CMlQuad);
        declare Frame_Properties <=> (Page.GetFirstChild("properties") as CMlFrame);
        declare Quad_Type_Selector <=> (Frame_Properties.GetFirstChild("Type_Selector") as CMlQuad);
        declare Entry_Order <=> (Frame_Properties.GetFirstChild("Entry_Order") as CMlEntry);
        declare Label_RefillWeapon <=> (Page.GetFirstChild("Checkbox_Fill_Weapon") as CMlLabel);
        declare Label_EmptyWeapon <=> (Page.GetFirstChild("Checkbox_Empty_Weapon") as CMlLabel);
        declare Label_RefillStamina <=> (Page.GetFirstChild("Checkbox_Fill_Stamina") as CMlLabel);
        declare Label_EmptyStamina <=> (Page.GetFirstChild("Checkbox_Empty_Stamina") as CMlLabel);

        declare Label_Copy <=> (Page.GetFirstChild("Label_Copy") as CMlLabel);
        if (CopiedCheckpointId^"" == "{{{G_LastAnchorId}}}")
            Label_Copy.TextColor = <0.4, 0.6, 0.9>;
        else
            Label_Copy.TextColor = <1., 1., 1.>;

        if (Enabled) {
            Quad_Enabled_Selector.RelativePosition_V3.X = -20.;
            Frame_Properties.ZIndex = 1.;
        } else {
            Quad_Enabled_Selector.RelativePosition_V3.X = 0.;
            Frame_Properties.ZIndex = -1.;
        }

        // CP - PORTAL - GOAL
        Quad_Type_Selector.RelativePosition_V3.X = -30 + CPType*20.;

        Entry_Order.SetText(TL::ToText(Order), False);

        {{{Private_WeaponUpdate()}}}

        if (!RefillWeapon && Label_RefillWeapon.Value != "") {
            Label_RefillWeapon.SetText("");
        }
        if (RefillWeapon && Label_RefillWeapon.Value != "✖") {
            Label_RefillWeapon.SetText("✖");
        }

        if (!EmptyWeapon && Label_EmptyWeapon.Value != "") {
            Label_EmptyWeapon.SetText("");
        }
        if (EmptyWeapon && Label_EmptyWeapon.Value != "✖") {
            Label_EmptyWeapon.SetText("✖");
        }

        if (!RefillStamina && Label_RefillStamina.Value != "") {
            Label_RefillStamina.SetText("");
        }
        if (RefillStamina && Label_RefillStamina.Value != "✖") {
            Label_RefillStamina.SetText("✖");
        }

        if (!EmptyStamina && Label_EmptyStamina.Value != "") {
            Label_EmptyStamina.SetText("");
        }
        if (EmptyStamina && Label_EmptyStamina.Value != "✖") {
            Label_EmptyStamina.SetText("✖");
        }

        SendCustomEvent("Event_Save_Checkpoint", Text[]);
    }

    main() {
        declare Boolean Enabled for Page;
        declare Integer Order for Page;
        declare Boolean IsPortal for Page;
        declare Boolean RefillWeapon for Page;
        declare Boolean EmptyWeapon for Page;
        declare Boolean RefillStamina for Page;
        declare Boolean EmptyStamina for Page;
        declare Integer CPType for Page;
        declare Integer Weapon for Page;
        declare Real Weapon_Gain for Page;
        declare Integer Weapon_Amount for Page;
        declare Integer Stamina for Page;
        declare Real Stamina_Gain for Page;
        declare Real Stamina_Amount for Page;

        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type) {
                    case CMlEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Window_Background":
                                SendCustomEvent("Event_Property_Window_Clicked", Text[]);
                            case "Label_Copy":
                                SendCustomEvent("Event_Copy_Checkpoint", Text[]);
                            case "Label_Paste":
                                SendCustomEvent("Event_Paste_Checkpoint", Text[]);
                            case "Label_Test":
                                SendCustomEvent("Event_Test_Checkpoint", Text[]);

                            case "OrderPlus":
                                Order = Order + 1;
                            case "OrderMinus":
                                Order = Order - 1;

                            case "OrderPrevious":
                                SendCustomEvent("Event_Edit", ["Checkpoint", "" ^ Order, "-1"]);
                            case "OrderNext":
                                SendCustomEvent("Event_Edit", ["Checkpoint", "" ^ Order, "+1"]);

                            case "Enable"  : Enabled = True;
                            case "Disable" : Enabled = False;
                            case "Checkpoint" : CPType = 0;
                            case "Portal"  : CPType = 1;
                            case "Goal"    : CPType = 2;
                            case "Laser"   : Weapon = 0;
                            case "Rocket"  : Weapon = 1;
                            case "Nucleus" : Weapon = 2;
                            case "Arrow"   : Weapon = 3;
                            case "Missile" : Weapon = 4;
                            case "Limited" : Stamina = 1;
                            case "Unlimited" : Stamina = 2;

                            case "Checkbox_Fill_Weapon": {
                                RefillWeapon = !RefillWeapon;
                                EmptyWeapon = False;
                            }
                            case "Checkbox_Empty_Weapon": {
                                EmptyWeapon = !EmptyWeapon;
                                RefillWeapon = False;
                            }
                            case "Checkbox_Fill_Stamina": {
                                RefillStamina = !RefillStamina;
                                EmptyStamina = False;
                            }
                            case "Checkbox_Empty_Stamina": {
                                EmptyStamina = !EmptyStamina;
                                RefillStamina = False;
                            }
                        }

                        IsPortal = CPType == 1;
                        NeedUpdate = True;
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);

                        switch(Entry.ControlId) {
                            case "Entry_Order": Order = TL::ToInteger(Entry.Value);
                            case "Entry_Weapon_Gain": Weapon_Gain = TL::ToReal(Entry.Value)/100;
                            case "Entry_Weapon_Amount": Weapon_Amount = TL::ToInteger(Entry.Value);
                            case "Entry_Stamina_Gain": Stamina_Gain = TL::ToReal(Entry.Value)/100;
                            case "Entry_Stamina_Amount": Stamina_Amount = TL::ToReal(Entry.Value)/100;
                        }
                        NeedUpdate = True;
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}


Void SaveCheckpointVariables(CAnchorData _Anchor, Boolean RefillWeapon, Boolean EmptyWeapon, Boolean RefillStamina, Boolean EmptyStamina)
{
    declare metadata Meta_RefillWeapon for _Anchor = False;
    declare metadata Meta_EmptyWeapon for _Anchor = False;
    declare metadata Meta_RefillStamina for _Anchor = False;
    declare metadata Meta_EmptyStamina for _Anchor = False;

    Meta_RefillWeapon = RefillWeapon;
    Meta_EmptyWeapon = EmptyWeapon;
    Meta_RefillStamina = RefillStamina;
    Meta_EmptyStamina = EmptyStamina;
}


Void SaveCheckpointSettings()
{

    if (!AnchorData.existskey(G_LastAnchorId))
        return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if (Anchor.Tag != "Checkpoint")
        return;

    declare Boolean RefillWeapon for ManialinkPage;
    declare Boolean EmptyWeapon for ManialinkPage;
    declare Boolean RefillStamina for ManialinkPage;
    declare Boolean EmptyStamina for ManialinkPage;
    SaveCheckpointVariables(Anchor, RefillWeapon, EmptyWeapon, RefillStamina, EmptyStamina);

    declare Integer Order for ManialinkPage;
    Anchor.Order = Order;

    declare Integer CPType for ManialinkPage;
    declare metadata Meta_CPType for Anchor = 0;
    declare metadata Meta_IsPortal for Anchor = False;
    Meta_CPType = CPType;
    Meta_IsPortal = CPType == 1;


    SaveBasePageVariables(Anchor);
    SaveWeaponPageVariables(Anchor);
}


Void EditSpawn(CAnchorData _Spawn)
{
    /// --- Variables
    InitBasePageVariables(_Spawn);

    declare Integer Order for ManialinkPage;
    declare Boolean IsCpSpawn for ManialinkPage;
    declare metadata Meta_IsCpSpawn for _Spawn = False;

    Order = _Spawn.Order;
    IsCpSpawn = Meta_IsCpSpawn;

    InitWeaponPageVariables(_Spawn);

    /// --- Manialink
    declare Properties = """
        <frame id="Basic" pos="0 15">
            {{{BigProperty("0 -2.5", "Type", Select2("0 -4", "Spawn", "CPSpawn", "Type_Selector"))}}}
            {{{PropertyOrder("0 -15.5")}}}
        </frame>
        <frame id="Weapon" pos="0 -34">
            {{{BigProperty("0 18", "Weapon", Select5("0 -3.5", "Laser", "Rocket", "Nucleus", "Arrow", "Missile", "Weapon_Selector"))}}}
            {{{Property("-12 5.5", "Gain (0-1000%)", Entry("0 -5.5", "Entry_Weapon_Gain"))}}}
            {{{Property("12 5.5", "Amount (0-10)", Entry("0 -5.5", "Entry_Weapon_Amount"))}}}
        </frame>
        <frame id="Stamina" pos="0 -67.5">
            {{{BigProperty("0 18", "Stamina", Select2("0 -3.5", "Limited", "Unlimited", "Stamina_Selector"))}}}
            {{{Property("-12 5.5", "Gain (0-100%)", Entry("0 -5.5", "Entry_Stamina_Gain"))}}}
            {{{Property("12 5.5", "Amount (10-300)", Entry("0 -5.5", "Entry_Stamina_Amount"))}}}
        </frame>
    """;

    SetWindow(MakeWindowNoTest("Edit Spawn", Properties));

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditSpawn">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Boolean Enabled for Page;
        declare Boolean IsCpSpawn for Page;
        declare Integer Order for Page;
        declare Ident CopiedSpawnId for Page;

        declare Quad_Enabled_Selector <=> (Page.GetFirstChild("Enabled_Selector") as CMlQuad);
        declare Frame_Properties <=> (Page.GetFirstChild("properties") as CMlFrame);
        declare Quad_Type_Selector <=> (Frame_Properties.GetFirstChild("Type_Selector") as CMlQuad);
        declare Entry_Order <=> (Frame_Properties.GetFirstChild("Entry_Order") as CMlEntry);

        declare Label_Copy <=> (Page.GetFirstChild("Label_Copy") as CMlLabel);
        if (CopiedSpawnId^"" == "{{{G_LastAnchorId}}}")
            Label_Copy.TextColor = <0.4, 0.6, 0.9>;
        else
            Label_Copy.TextColor = <1., 1., 1.>;

        if (Enabled) {
            Quad_Enabled_Selector.RelativePosition_V3.X = -20.;
            Frame_Properties.ZIndex = 1.;
        } else {
            Quad_Enabled_Selector.RelativePosition_V3.X = 0.;
            Frame_Properties.ZIndex = -1.;
        }

        if (!IsCpSpawn)
            Quad_Type_Selector.RelativePosition_V3.X = -20.;
        else
            Quad_Type_Selector.RelativePosition_V3.X = 0.;

        Entry_Order.SetText(TL::ToText(Order), False);
        {{{Private_WeaponUpdate()}}}

        SendCustomEvent("Event_Save_Spawn", Text[]);
    }

    main() {
        declare Boolean Enabled for Page;
        declare Integer Order for Page;
        declare Boolean IsCpSpawn for Page;
        declare Integer Weapon for Page;
        declare Real Weapon_Gain for Page;
        declare Integer Weapon_Amount for Page;
        declare Integer Stamina for Page;
        declare Real Stamina_Gain for Page;
        declare Real Stamina_Amount for Page;
        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type) {
                    case CMlEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Window_Background":
                                SendCustomEvent("Event_Property_Window_Clicked", Text[]);
                            case "Label_Copy":
                                SendCustomEvent("Event_Copy_Spawn", Text[]);
                            case "Label_Paste":
                                SendCustomEvent("Event_Paste_Spawn", Text[]);
                            case "Label_Test":
                                SendCustomEvent("Event_Test_Spawn", Text[]);

                            case "OrderPlus":
                                Order = Order + 1;
                            case "OrderMinus":
                                Order = Order - 1;

                            case "OrderPrevious":
                                SendCustomEvent("Event_Edit", ["Spawn", "" ^ Order, "-1"]);
                            case "OrderNext":
                                SendCustomEvent("Event_Edit", ["Spawn", "" ^ Order, "+1"]);

                            case "Enable"    : Enabled = True;
                            case "Disable"   : Enabled = False;
                            case "Spawn"     : IsCpSpawn = False;
                            case "CPSpawn"   : IsCpSpawn = True;
                            case "Laser"     : Weapon = 0;
                            case "Rocket"    : Weapon = 1;
                            case "Nucleus"   : Weapon = 2;
                            case "Arrow"     : Weapon = 3;
                            case "Missile"   : Weapon = 4;
                            case "Limited"   : Stamina = 1;
                            case "Unlimited" : Stamina = 2;
                        }

                        NeedUpdate = True;
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);
                        switch(Entry.ControlId) {
                            case "Entry_Order": {
                                Order = TL::ToInteger(Entry.Value);
                            }
                            case "Entry_Weapon_Gain": {
                                Weapon_Gain = TL::ToReal(Entry.Value)/100;
                            }
                            case "Entry_Weapon_Amount": {
                                Weapon_Amount = TL::ToInteger(Entry.Value);
                            }
                            case "Entry_Stamina_Gain": {
                                Stamina_Gain = TL::ToReal(Entry.Value)/100;
                            }
                            case "Entry_Stamina_Amount": {
                                Stamina_Amount = TL::ToReal(Entry.Value)/100;
                            }
                        }
                        NeedUpdate = True;
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}


Void SaveSpawnVariables(CAnchorData _Anchor, Boolean IsCpSpawn)
{
    declare metadata Meta_IsCpSpawn for _Anchor = False;
    Meta_IsCpSpawn = IsCpSpawn;
}


Void SaveSpawnSettings()
{
    if (!AnchorData.existskey(G_LastAnchorId))
        return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if (Anchor.Tag != "Spawn")
        return;

    declare Integer Order for ManialinkPage;
    Anchor.Order = Order;

    declare Boolean IsCpSpawn for ManialinkPage;
    SaveSpawnVariables(Anchor, IsCpSpawn);

    SaveBasePageVariables(Anchor);
    SaveWeaponPageVariables(Anchor);
}


Void EditAmmoItem(CAnchorData _Item)
{
    /// --- Variables
    declare Real Amount for ManialinkPage;
    declare metadata Meta_GrantAmmoAmount for _Item = 1.;
    Amount = Meta_GrantAmmoAmount;

    declare Real Duration for ManialinkPage;
    declare metadata Meta_GrantAmmoDuration for _Item = 0.;
    Duration = Meta_GrantAmmoDuration;

    declare Integer Cooldown for ManialinkPage;
    declare metadata Meta_GrantAmmoCooldown for _Item = 500;
    Cooldown = Meta_GrantAmmoCooldown;

    /// --- Manialink
    declare Properties = """
        <frame id="Basic" pos="0 25">
            {{{Property("0 -2.5", "Duration", Entry("0 -6", "Entry_Duration"))}}}
            {{{Property("0 -15.5", "Cooldown (ms)", Entry("0 -6", "Entry_Cooldown"))}}}
            {{{Property("0 -28.5", "Amount", Entry("0 -6", "Entry_Amount"))}}}
        </frame>
    """;

    SetWindow(MakeWindowWithoutEnabled("Edit Ammo Item", Properties));

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditAmmoItem">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Real Duration for Page;
        declare Integer Cooldown for Page;
        declare Real Amount for Page;

        declare Entry_Duration <=> (Page.GetFirstChild("Entry_Duration") as CMlEntry);
        if (TL::ToReal(Entry_Duration.Value) != Duration) {
            Entry_Duration.Value = ""^Duration;
        }

        declare Entry_Cooldown <=> (Page.GetFirstChild("Entry_Cooldown") as CMlEntry);
        if (TL::ToInteger(Entry_Cooldown.Value) != Cooldown) {
            Entry_Cooldown.Value = ""^Cooldown;
        }

        declare Entry_Amount <=> (Page.GetFirstChild("Entry_Amount") as CMlEntry);
        if (TL::ToReal(Entry_Amount.Value) != Amount) {
            Entry_Amount.Value = ""^Amount;
        }

        SendCustomEvent("Event_Save_AmmoItem", Text[]);
    }

    main() {
        declare Real Duration for Page;
        declare Integer Cooldown for Page;
        declare Real Amount for Page;
        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type){
                    case CMlScriptEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Window_Background":
                                SendCustomEvent("Event_Property_Window_Clicked", Text[]);
                        }
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);
                        switch(Entry.ControlId) {
                            case "Entry_Duration": {
                                Duration = TL::ToReal(Entry.Value);
                                NeedUpdate = True;
                            }
                            case "Entry_Cooldown": {
                                Cooldown = TL::ToInteger(Entry.Value);
                                NeedUpdate = True;
                            }
                            case "Entry_Amount": {
                                Amount = TL::ToReal(Entry.Value);
                            }
                        }
                        NeedUpdate = True;
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}

Void SaveAmmoItemSettings()
{
    if (!AnchorData.existskey(G_LastAnchorId))
        return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if (Anchor.Tag != "Ammo")
        return;

    declare Real Amount for ManialinkPage;
    declare metadata Meta_GrantAmmoAmount for Anchor = 1.;
    Meta_GrantAmmoAmount = Amount;

    declare Real Duration for ManialinkPage;
    declare metadata Meta_GrantAmmoDuration for Anchor = 0.;
    Meta_GrantAmmoDuration = Duration;

    declare Integer Cooldown for ManialinkPage;
    declare metadata Meta_GrantAmmoCooldown for Anchor = 500;
    Meta_GrantAmmoCooldown = Cooldown;
}

///////////////////////////////////////////////////////////////abc
Void EditDynamic(CAnchorData _Item) {

    declare Integer InteractionType for ManialinkPage;
		declare Integer MoveType for ManialinkPage;
		declare Integer Behavior for ManialinkPage; 
		declare Vec3 Pos for ManialinkPage;
		declare Vec3 Vel for ManialinkPage;
		declare Integer TotalTime for ManialinkPage;
		declare Integer ReturnTime for ManialinkPage;
		
    declare metadata Meta_InteractionType for _Item = 1;
		declare metadata Meta_MoveType for _Item = 0;
		declare metadata Meta_Behavior for _Item = 0;
		declare metadata Meta_Pos for _Item = <0.,0.,0.>;
		declare metadata Meta_Vel for _Item = <0.,0.,0.>;
		declare metadata Meta_TotalTime for _Item = 4;
		declare metadata Meta_ReturnTime for _Item = 0;

    InteractionType = Meta_InteractionType;
		MoveType = Meta_MoveType;
		Behavior = Meta_Behavior;
		Pos = Meta_Pos;
		Vel = Meta_Vel;
		TotalTime = Meta_TotalTime;
		ReturnTime = Meta_ReturnTime;
   

    /// --- Manialink
    declare Properties = """
        <frame id="Basic" pos="0 25">
            {{{Property("0 -2.5", "Move Type", Select3("0 -4", "Auto", "Hit", "Touch", "Type_Selector"))}}}
            {{{Property("0 -2.5", "", Select2("0 -12", "Smooth", "Sharp", "Type_Selector1"))}}}
            {{{Property("0 -2.5", "", Select2("0 -20", "Passive", "Eliminate", "Type_Selector2"))}}}
        </frame>
				<frame id="Basic" pos="0 -10">
            {{{Property("-24 -2.5", "Position X", Entry("0 -6", "PPosX"))}}}
            {{{Property("0 -2.5", "Position Y", Entry("0 -6", "PPosY"))}}}
            {{{Property("24 -2.5", "Position Z", Entry("0 -6", "PPosZ"))}}}
        </frame>
				<frame id="Basic" pos="0 -24">
            {{{Property("-24 -2.5", "Velocity X", Entry("0 -6", "PVelX"))}}}
            {{{Property("-0 -2.5", "Velocity Y", Entry("0 -6", "PVelY"))}}}
            {{{Property("24 -2.5", "Velocity Z", Entry("0 -6", "PVelZ"))}}}
        </frame>
				<frame id="Basic" pos="0 -38">
					 {{{Property("0 -2.5", "Time / Distance", Entry("0 -6", "PTotalTime"))}}}
				</frame>
				<frame id="Basic" pos="0 -52">
					 {{{Property("0 -2.5", "Delay", Entry("0 -6", "PReturnTime"))}}}
				</frame>
    """;

    SetWindow(MakeWindowWithoutEnabled("Edit Item", Properties));

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditItem">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
				
				
        declare Integer InteractionType for Page;
				declare Integer MoveType for Page;
				declare Integer Behavior for Page;
				declare Vec3 Pos for Page;
				declare Vec3 Vel for Page;
				declare Integer TotalTime for Page;
				declare Integer ReturnTime for Page;

        declare Frame_Properties <=> (Page.GetFirstChild("properties") as CMlFrame);
				declare Quad_Type_Selector <=> (Frame_Properties.GetFirstChild("Type_Selector") as CMlQuad);
				declare Quad_Type_Selector1 <=> (Frame_Properties.GetFirstChild("Type_Selector1") as CMlQuad);
				declare Quad_Type_Selector2 <=> (Frame_Properties.GetFirstChild("Type_Selector2") as CMlQuad);
				declare Entry_PosX <=> (Page.GetFirstChild("PPosX") as CMlEntry);	
				declare Entry_PosY <=> (Page.GetFirstChild("PPosY") as CMlEntry);
				declare Entry_PosZ <=> (Page.GetFirstChild("PPosZ") as CMlEntry);
				declare Entry_VelX <=> (Page.GetFirstChild("PVelX") as CMlEntry);
				declare Entry_VelY <=> (Page.GetFirstChild("PVelY") as CMlEntry);
				declare Entry_VelZ <=> (Page.GetFirstChild("PVelZ") as CMlEntry);
				declare Entry_TotalTime <=> (Page.GetFirstChild("PTotalTime") as CMlEntry);
				declare Entry_ReturnTime <=> (Page.GetFirstChild("PReturnTime") as CMlEntry);
				
				Entry_PosX.SetText(TL::ToText(Pos.X), False);
				Entry_PosY.SetText(TL::ToText(Pos.Y), False);
				Entry_PosZ.SetText(TL::ToText(Pos.Z), False);
				Entry_VelX.SetText(TL::ToText(Vel.X), False);
				Entry_VelY.SetText(TL::ToText(Vel.Y), False);
				Entry_VelZ.SetText(TL::ToText(Vel.Z), False);
				Entry_TotalTime.SetText(TL::ToText(TotalTime), False);
				Entry_ReturnTime.SetText(TL::ToText(ReturnTime), False);
		
        //Activation type
        Quad_Type_Selector.RelativePosition_V3.X = -30 + InteractionType*20.;
  
				//Movement type
        Quad_Type_Selector1.RelativePosition_V3.X = -20 + MoveType*20.;
				
				//Behavior
				Quad_Type_Selector2.RelativePosition_V3.X = -20 + Behavior*20.;

				SendCustomEvent("Event_Save_ItemProperties", Text[]);

    }

    main() {
        declare Integer InteractionType for Page;
				declare Integer MoveType for Page;
				declare Integer Behavior for Page;
				declare Vec3 Pos for Page;
				declare Vec3 Vel for Page;
				declare Integer TotalTime for Page;
				declare Integer ReturnTime for Page;

        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type) {
                    case CMlScriptEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Window_Background": SendCustomEvent("Event_Property_Window_Clicked", Text[]);
                            case "Auto" : {InteractionType = 0; NeedUpdate = True;}
                            case "Hit"  : {InteractionType = 1; NeedUpdate = True;}
                            case "Touch"    : {InteractionType = 2; NeedUpdate = True;}
														case "Smooth" : {MoveType = 0; NeedUpdate = True;}
														case "Sharp"	: {MoveType = 1; NeedUpdate = True;}
														case "Passive" : {Behavior = 0; NeedUpdate = True;}
														case "Eliminate" : {Behavior = 1; NeedUpdate = True;}
                        }
                        
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);

                        switch(Entry.ControlId) {
                            case "PPosX": Pos.X = TL::ToReal(Entry.Value);
                            case "PPosY": Pos.Y = TL::ToReal(Entry.Value);
                            case "PPosZ": Pos.Z = TL::ToReal(Entry.Value);
                            case "PVelX": Vel.X = TL::ToReal(Entry.Value);
                            case "PVelY": Vel.Y = TL::ToReal(Entry.Value);
														case "PVelZ": Vel.Z = TL::ToReal(Entry.Value);
														case "PTotalTime": TotalTime = TL::ToInteger(Entry.Value);
														case "PReturnTime": ReturnTime = TL::ToInteger(Entry.Value);
                        }
                        NeedUpdate = True;
                    }
                }
            }
						yield;
        }
    }
    --></script>
    </manialink>
    """;
}

Void SaveItemProperties() {
		if (!AnchorData.existskey(G_LastAnchorId))
        return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
		if(TL::SubText(Anchor.Tag, 0, 2) != "Dy")
        return;
		
	  declare Integer InteractionType for ManialinkPage;
		declare Integer MoveType for ManialinkPage;
		declare Integer Behavior for ManialinkPage; 
		declare Vec3 Pos for ManialinkPage;
		declare Vec3 Vel for ManialinkPage;
		declare Integer TotalTime for ManialinkPage;
		declare Integer ReturnTime for ManialinkPage;

    declare metadata Meta_InteractionType for Anchor = 1;
		declare metadata Meta_MoveType for Anchor = 0;
		declare metadata Meta_Behavior for Anchor = 0;
		declare metadata Meta_Pos for Anchor = <0.,0.,0.>;
		declare metadata Meta_Vel for Anchor = <0.,0.,0.>;
		declare metadata Meta_TotalTime for Anchor = 4;
		declare metadata Meta_ReturnTime for Anchor = 0;

		
    Meta_InteractionType = InteractionType;
		Meta_MoveType = MoveType;
		Meta_Behavior = Behavior;
		Meta_Pos = Pos;
		Meta_Vel = Vel;
		Meta_TotalTime = TotalTime;
		Meta_ReturnTime = ReturnTime;
}
/////////////////////////////////////////////////////////////////////

Void EditOffzoneShieldItem(CAnchorData _Item)
{
    /// --- Variables
    declare Real Duration for ManialinkPage;
    declare metadata Meta_BuffDuration for _Item = 0.;
    Duration = Meta_BuffDuration;

    /// --- Manialink
    declare Properties = """
        <frame id="Basic" pos="0 25">
            {{{Property("0 -2.5", "Duration", Entry("0 -6", "Entry_Duration"))}}}
        </frame>
    """;

    SetWindow(MakeWindowWithoutEnabled("Edit OffzoneShield Item", Properties));

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditOffzoneShieldItem">
    {{{GetML()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Real Duration for Page;

        declare Entry_Duration <=> (Page.GetFirstChild("Entry_Duration") as CMlEntry);
        if (TL::ToReal(Entry_Duration.Value) != Duration) {
            Entry_Duration.Value = ""^Duration;
        }
        SendCustomEvent("Event_Save_OffzoneShieldItem", Text[]);
    }

    main() {
        declare Real Duration for Page;
        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type){
                    case CMlScriptEvent::Type::MouseClick:
                        switch(Event.ControlId) {
                            case "Window_Background":
                                SendCustomEvent("Event_Property_Window_Clicked", Text[]);
                        }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);
                        switch(Entry.ControlId) {
                            case "Entry_Duration": {
                                Duration = TL::ToReal(Entry.Value);
                                NeedUpdate = True;
                            }
                        }
                        NeedUpdate = True;
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}


Void SaveOffzoneShieldItemSettings()
{
    if (!AnchorData.existskey(G_LastAnchorId))
        return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if (Anchor.Tag != "OffzoneShield")
        return;

    declare Real Duration for ManialinkPage;
    declare metadata Meta_BuffDuration for Anchor = 0.;
    Meta_BuffDuration = Duration;
}


Int3 HighlightAnchor(CAnchorData _Anchor, Vec3 _Color)
{
    declare Coords = <
        ML::NearestInteger((_Anchor.Position.X+2)/8 - 1),
        ML::Clamp(ML::NearestInteger(_Anchor.Position.Y/2) + 8, 1, 38),  
        ML::NearestInteger((_Anchor.Position.Z+2)/8 - 1)
    >;

    if (_Anchor.Block != Null) {
        CustomSelectionRGB = _Color;

        CustomSelectionCoords.clear();
        CustomSelectionCoords.add(Coords);
        CustomSelectionCoords.add(Coords + <0, 1, 0>);
    }

    return Coords;
}

Int3 HighlightAnchor(CAnchorData _Anchor)
{
    return HighlightAnchor(_Anchor, <0., 0., .1>);
}

Void CenterOnAnchor(CAnchorData _Anchor)
{
    // ensures the right coordinate system is used
    if (PlaceMode != CMapEditorPlugin::PlaceMode::BlockProperty)
        PlaceMode = CMapEditorPlugin::PlaceMode::BlockProperty;

    Cursor.Coord = HighlightAnchor(_Anchor);
    Camera.CenterOnCursor();
    Camera.Zoom(CMapEditorCamera::EZoomLevel::Close, True);

}

Void CopyWeapon(Ident _AnchorId)
{
    declare Anchor <=> AnchorData[_AnchorId];
    
    declare Integer Weapon for ManialinkPage;
    declare Real Weapon_Gain for ManialinkPage;
    declare Integer Weapon_Amount for ManialinkPage;
    declare Integer Stamina for ManialinkPage;
    declare Real Stamina_Gain for ManialinkPage;
    declare Real Stamina_Amount for ManialinkPage;

    declare metadata Meta_Weapon for Anchor = 1;
    declare metadata Meta_Weapon_Gain for Anchor = 1.0;
    declare metadata Meta_Weapon_Amount for Anchor = 4;
    declare metadata Meta_Stamina for Anchor = 0;
    declare metadata Meta_Stamina_Gain for Anchor = 1.0;
    declare metadata Meta_Stamina_Amount for Anchor = 1.0;

    Weapon = Meta_Weapon;
    Weapon_Gain = Meta_Weapon_Gain;
    Weapon_Amount = Meta_Weapon_Amount;
    Stamina = Meta_Stamina;
    Stamina_Gain = Meta_Stamina_Gain;
    Stamina_Amount = Meta_Stamina_Amount;
}

Void PasteCheckpoint(Ident _AnchorId)
{
    if (!AnchorData.existskey(_AnchorId))
        return;

    declare Anchor <=> AnchorData[_AnchorId];

    declare Boolean RefillWeapon for ManialinkPage;
    declare Boolean EmptyWeapon for ManialinkPage;
    declare Boolean RefillStamina for ManialinkPage;
    declare Boolean EmptyStamina for ManialinkPage;

    declare metadata Meta_RefillWeapon for Anchor = False;
    declare metadata Meta_EmptyWeapon for Anchor = False;
    declare metadata Meta_RefillStamina for Anchor = False;
    declare metadata Meta_EmptyStamina for Anchor = False;

    RefillWeapon = Meta_RefillWeapon;
    EmptyWeapon = Meta_EmptyWeapon;
    RefillStamina = Meta_RefillStamina;
    EmptyStamina = Meta_EmptyStamina;

    CopyWeapon(_AnchorId);
    
    SaveCheckpointSettings();
}

Void PasteSpawn(Ident _AnchorId)
{
    declare Anchor <=> AnchorData[_AnchorId];
    declare Ident CopiedSpawnId for ManialinkPage;

    declare Boolean IsCpSpawn for ManialinkPage;
    declare Meta_IsCpSpawn for AnchorData[CopiedSpawnId] = True;
    IsCpSpawn = Meta_IsCpSpawn;

    CopyWeapon(_AnchorId);
    
    SaveSpawnSettings();
}


Void UpdateValidability()
{
    declare StartSpawns = 0;
    declare Goals = 0;
    declare Integer[Integer] CPCounts = [];

    foreach (Anchor in AnchorData)
    {
        if (!IsEnabled(Anchor))
            continue;

        switch (Anchor.Tag)
        {
            case "Spawn":
            {
                if (!IsCpSpawn(Anchor))
                {
                    StartSpawns += 1;
                    if (StartSpawns > 1)
                    {
                        ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
                        ValidabilityRequirementsMessage = _("You must place exactly one Start Spawn.");
                        return;
                    }
                }
            }
            default :
            {
                if (IsGoal(Anchor))
                {
                    Goals += 1;
                }
                else if (IsCheckpoint(Anchor))
                {
                    if (!CPCounts.existskey(Anchor.Order)) {
                        CPCounts[Anchor.Order] = 0;
                    }
                    CPCounts[Anchor.Order] += 1;
                }
            }
        }
    }

    declare MaxOrder = 0;
    declare HasNegativeOrders = False;
    foreach (Order => Count in CPCounts) {
        MaxOrder = ML::Max(MaxOrder, Order);
        if (Order < 0) HasNegativeOrders = True;
    }


    if (StartSpawns == 0)
    {
        ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
        ValidabilityRequirementsMessage = _("You must place at least one Start Spawn.");
    }
    else if (Goals == 0)
    {
        ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
        ValidabilityRequirementsMessage = _("You must place at least one Goal.");
    }
    else if (CPCounts.existskey(0))
    {
        ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
        ValidabilityRequirementsMessage = _("Every checkpoint needs to have an order.");
    }
    else
    {
        if (HasNegativeOrders) {
            ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
            ValidabilityRequirementsMessage = "Checkpoints order have to be positive";
        } else {
            declare IsOk = True;
            declare Missing = -1;

            for (Order, 1, MaxOrder) {
                if (!CPCounts.existskey(Order)) {
                    Missing = Order;
                    IsOk = False;
                    break;
                }
            }

            if (IsOk) {
                ValidationStatus = CSmMapType::ValidationStatus::Validated;
            }
            else {
                ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
                ValidabilityRequirementsMessage = "Missing checkpoint #"^Missing;
            }
        }
    }
}

Void TestWaypoint(Boolean IsCP)
{
    if (!AnchorData.existskey(G_LastAnchorId))
        return;
    

    declare Editor_WayPointSpawn_Flag for Mode = 0;
    declare Editor_WayPointSpawn_isCheckpoint for Mode = False;
    declare rng = ML::Rand(-2147483647, 2147483647);
    
    Editor_WayPointSpawn_Flag = rng;
    Editor_WayPointSpawn_isCheckpoint = IsCP;

    declare metadata Editor_WayPointSpawn_Stamp for AnchorData[G_LastAnchorId] = 0;
    Editor_WayPointSpawn_Stamp = rng;

    yield;

    ValidationStatus = CSmMapType::ValidationStatus::Validated;
    Validate();
    TestMapWithMode("Obstacle.Script.txt");

    yield;
    UpdateValidability();
    Editor_WayPointSpawn_Flag = 0;
    Editor_WayPointSpawn_isCheckpoint = False;
}


Void Loop()
{
    declare Ident CopiedSpawnId for ManialinkPage;
    declare Ident CopiedCheckpointId for ManialinkPage;

    foreach (Event in PendingEvents)
    {
        switch (Event.Type)
        {
            case CMapEditorPluginEvent::Type::MapModified:
            {

                if (G_AnchorCache.count != AnchorData.count)
                {
                    declare Ident[] NewAnchorCache;
                    declare FoundTheNewSpawn = False;
                    
                    declare CanPasteSpawn = False;
                    declare CanPasteCP = False;

                    if (CopiedSpawnId != NullId && AnchorData.existskey(CopiedSpawnId)) {
                        CanPasteSpawn = True;
                    } else {
                        CopiedSpawnId = NullId;
                    }

                    if (CopiedCheckpointId != NullId && AnchorData.existskey(CopiedCheckpointId)) {
                        CanPasteCP = True;
                    } else {
                        CopiedCheckpointId = NullId;
                    }

                    foreach (Anchor in AnchorData)
                    {
                        NewAnchorCache.add(Anchor.Id);

                        if (EditMode == CMapEditorPlugin::EditMode::Place && !FoundTheNewSpawn)
                        {
                            if (Anchor.Order == 0 && !G_AnchorCache.exists(Anchor.Id))
                            {
                                if ("Spawn" == Anchor.DefaultTag)
                                {
                                    if (CanPasteSpawn) {
                                        G_LastAnchorId = Anchor.Id;
                                        PasteSpawn(CopiedSpawnId);
                                        EditSpawn(Anchor);
                                    } else {
                                        declare AnySpawn = False;
                                        foreach (MaybeSpawn in AnchorData) {
                                            if (MaybeSpawn.DefaultTag == "Spawn" && MaybeSpawn != Anchor) {
                                                declare metadata Meta_IsCpSpawn for MaybeSpawn = False;
                                                if (!Meta_IsCpSpawn) {
                                                    AnySpawn = True;
                                                    break;
                                                }
                                            }
                                        }
                                        
                                        if (AnySpawn) {
                                            declare metadata Meta_IsCpSpawn for Anchor = False;
                                            Meta_IsCpSpawn = True;
                                        }
                                    }
                                } else if ("Checkpoint" == Anchor.DefaultTag && CanPasteCP) {
                                    G_LastAnchorId = Anchor.Id;
                                    PasteCheckpoint(CopiedCheckpointId);
                                    EditCheckpoint(Anchor);
                                }
                                
                                
                                FoundTheNewSpawn = True;
                            }
                        }
                    }

                    G_AnchorCache = NewAnchorCache;
                }
                UpdateValidability();
            }

            case CMapEditorPluginEvent::Type::EditAnchor:
            {
                if (!AnchorData.existskey(Event.EditedAnchorDataId))
                    continue;

                ManialinkText = "";
                CustomSelectionCoords.clear();

                declare Anchor <=> AnchorData[Event.EditedAnchorDataId];
                G_LastAnchorId = Anchor.Id;
								////////////////////
								if(TL::SubText(Anchor.Tag, 0, 2) == "Dy")	
								{
									HighlightAnchor(Anchor);
									EditDynamic(Anchor);
								}
								////////////////////

                switch (Anchor.DefaultTag)
                {
                    case "Goal": {
                        HighlightAnchor(Anchor);
                        EditGoal(Anchor);
                    }
                    case "Checkpoint": {
                        HighlightAnchor(Anchor);
                        EditCheckpoint(Anchor);
                    }
                    case "Spawn": {
                        HighlightAnchor(Anchor);
                        EditSpawn(Anchor);
                    }
                    case "Gate": {
                        //EditGate(Anchor);
                    }

                    case "Ammo":
                        EditAmmoItem(Anchor);
                    case "OffzoneShield":
                        EditOffzoneShieldItem(Anchor);
                    default :
                        continue;
                }
            }

            case CMapEditorPluginEvent::Type::StartValidation:
            {
                TestMapWithMode("Obstacle.Script.txt");
            }

            case CMapEditorPluginEvent::Type::EditObjectives:
            {
                EditObjectives();
            }

            case CMapEditorPluginEvent::Type::MapSavedOrSaveCancelled:
            {
                if (Event.MapSavedOrSaveCancelled) {
                    //
                }
            }

            case CMapEditorPluginEvent::Type::LayerCustomEvent:
            {
                switch (Event.CustomEventType)
                {
                    case "Close":
                        ManialinkText = "";
                    case "Event_Property_Window_Clicked":
                        if (PlaceMode != CMapEditorPlugin::PlaceMode::BlockProperty)
                            PlaceMode = CMapEditorPlugin::PlaceMode::BlockProperty;
                    case "Event_Edit": {
                        declare CurrentOrder = TL::ToInteger(Event.CustomEventData[1]);
                        declare Dir = TL::ToInteger(Event.CustomEventData[2]);

                        // Fill CPsOrder array based on AnchorData
                        declare CAnchorData[Integer] CPsOrder;
                        foreach (Anchor in AnchorData) {
                            if (Anchor.DefaultTag == Event.CustomEventData[0])
                                CPsOrder[Anchor.Order] <=> Anchor;
                        }
                        CPsOrder = CPsOrder.sortkey();

                        // Fill CPs array from CPsOrder and find the index of the current CP
                        declare CAnchorData[] CPs;
                        declare CurrentIndex = 0;
                        foreach (CP in CPsOrder) {
                            if (CP.Order == CurrentOrder) 
                                CurrentIndex = CPs.count;
                            CPs.add(CP);
                        }

                        // adding CPs.count prevents weird negative modulo stuff
                        declare Order = (CPs.count + CurrentIndex + Dir) % CPs.count;
                        declare NextAnchor <=> CPs[Order];

                        G_LastAnchorId = NextAnchor.Id;
                        CenterOnAnchor(NextAnchor);

                        if (Event.CustomEventData[0] == "Checkpoint") {
                            EditCheckpoint(NextAnchor);
                        } else {
                            EditSpawn(NextAnchor);
                        }
                    }

                    case "Event_Test_Checkpoint": {
                        TestWaypoint(True);
                    }
                    case "Event_Test_Spawn": {
                        TestWaypoint(False);
                    }

                    case "Event_Paste_Checkpoint": {
                        if (CopiedCheckpointId != NullId && CopiedCheckpointId != G_LastAnchorId) {
                            PasteCheckpoint(CopiedCheckpointId);
                        } 
                    }
                    case "Event_Paste_Spawn": {
                        if (CopiedSpawnId != NullId && CopiedSpawnId != G_LastAnchorId) {
                            PasteSpawn(CopiedSpawnId);
                        } 
                    }

                    case "Event_Copy_Checkpoint": {
                        CopiedCheckpointId = G_LastAnchorId;
                    }
                    case "Event_Copy_Spawn": {
                        CopiedSpawnId = G_LastAnchorId;
                    }

                    case "Event_Save": {
                        SaveMap(MapFileName);
                    }
                    case "Event_Save_Objectives": {
                        SaveObjectives();
                    }
                    case "Event_Clear_Objectives": {
                        ClearObjectives();
                    }
                    case "Event_Save_Map": {
                        SaveMapSettings();
                    }
                    case "Event_Save_Goal": {
                        SaveGoalSettings();
                    }
                    case "Event_Save_Checkpoint": {
                        SaveCheckpointSettings();
                    }
                    case "Event_Save_Spawn": {
                        SaveSpawnSettings();
                    }
                    case "Event_Save_AmmoItem": {
                        SaveAmmoItemSettings();
                    }
                    case "Event_Save_OffzoneShieldItem": {
                        SaveOffzoneShieldItemSettings();
                    }
										case "Event_Save_ItemProperties": {
												SaveItemProperties();
										}
                }

                UpdateValidability();
            }

        }
    }
}


main()
{
    Load();
    Init();
    UpdateValidability();

    declare persistent P_EnableAirMapping for LocalUser = False;
    declare persistent P_EnableMixMapping for LocalUser = False;
    EnableAirMapping = P_EnableAirMapping;
    EnableMixMapping = P_EnableMixMapping;

    declare CMapEditorPlugin::PlaceMode PlaceModeCache;
    while (True)
    {
        PreserveObjectives();
        Loop();

        if (PlaceModeCache != PlaceMode) {
            PlaceModeCache = PlaceMode;

            if (PlaceMode == CMapEditorPlugin::PlaceMode::BlockProperty) {
                if (ManialinkText != "" && G_LastAnchorId != NullId) {
                    HighlightAnchor(AnchorData[G_LastAnchorId]);
                } else {
                    EditMap();
                }
            } else {
                CustomSelectionCoords.clear();
                ManialinkText = "";
            }
        }

        if (P_EnableAirMapping != EnableAirMapping || P_EnableMixMapping != EnableMixMapping) {
            P_EnableAirMapping = EnableAirMapping;
            P_EnableMixMapping = EnableMixMapping;
        }
        yield;
    }
    Unload();
}
