#Include "Libs/miltant/ObstacleV2/ManialinkLib.Script.txt"						as Styles
#Include "Libs/ahmad3/EventAPI/InGame.Script.txt" as ObsEvents

#Const  Version     "2023-29-06"
#Const  ScriptName  "EndScreen.Script.txt"

Text GetLayer(Boolean _WithNextMapButton, Boolean _LastMap, Text _LayerNameUsedInTp) {
	declare Text CampaignTitle;
	declare Text CampaignSubtitle;
	declare Text BannerImgUrl;

	if (!ObsEvents::HasFailed()) {
		declare CurrentEvent = ObsEvents::CurrentEdition();
		CampaignTitle = CurrentEvent.name;
		CampaignSubtitle = CurrentEvent.subtitle;
		BannerImgUrl = CurrentEvent.banner2_img_url;
	}

	// This is just a "security" check to ensure there's no way the TP is notified when playing online
	declare Text NotifyNextMapToTP;
	declare Text NotifyFinishedMapToTP;
	declare Text NextMapButton = "";
	// Avoids the gap between the Improve and the Quit buttons
	declare Text QuitButtonPos = "0 -11";
	if (_WithNextMapButton) {
		// We don't show the "Next map" button if it's the last one
		if (!_LastMap) {
			NextMapButton = """
			<frame pos="0 -11" data-name="next_map">
				<label halign="center" valign="center2" size="28.67 8" text="Next Map" textsize="2.7" id="Label"/>
				<quad halign="center" valign="center" size="28.67 8" image="file://Media/Images/Obstacle/Campaign/Ingame/Button.png"
					scriptevents="1" id="Quad_Trigger" data-target="Quad_Trigger Label" modulatecolor="000" data-anim-lenght="50"
					data-default-anim="<quad modulatecolor=&quot;000&quot; scale=&quot;1.&quot;/> <label textcolor=&quot;fff&quot;/>"
					data-target-anim="<quad modulatecolor=&quot;fff&quot; scale=&quot;1.02&quot;/> <label textcolor=&quot;000&quot;/>"/>
			</frame>
			""";

			QuitButtonPos = "0 -22";

			NotifyNextMapToTP = """
			// We notify the TP that we're about to unload the map
			if (Name == "next_map") {
				declare Integer[Text] ObsCampaignEvent_PendingPlayingMapsUpdate for LocalUser;
				ObsCampaignEvent_PendingPlayingMapsUpdate[{{{dump(_LayerNameUsedInTp)}}}] = Now;
			}
			""";
		}

		NotifyFinishedMapToTP = """
		// We notify the TP that the player finished a map
		declare Boolean ObsCampaignEvent_EndScreenShown for LocalUser;
		ObsCampaignEvent_EndScreenShown = True;
		""";
	}
	
    return """
<manialink version="3" name="Obstacle:EndScreen">
<frame pos="-48.5 62" id="Frame_Main" hidden="1">
	<frame>
		<label pos="4.33 -7.5" size="85.8 8.91" text="$s{{{CampaignTitle}}}" textprefix="$t" textfont="lato" textsize="8.5" textcolor="fff"/>
		<label pos="5.17 -16.67" size="47.4 4.77" text="$s{{{CampaignSubtitle}}}" textprefix="$t" textfont="lato" textsize="5" textcolor="fff"/>
		<quad size="96.67 35" bgcolor="00000099" image="{{{BannerImgUrl}}}"/>
	</frame>
	
	<frame pos="0 -40">
		<label pos="32.5 -3.17" size="50 5" textcolor="fff" halign="center" textfont="lato" id="Label_Map"/>
		<label pos="32.5 -9.5" size="50 4" textcolor="fff" halign="center" textfont="lato" textsize="1.2" id="Label_Author"/>
		
		<frame pos="5.55 -14.2">
			<label pos="27.17 -6.21" size="50.67 7.33" text="Personal best" halign="center" textcolor="fff" textsize="6.3" textfont="lato" id="Label_PB" opacity="0"/>
			
			<frame id="Frame_Record">
				<frame pos="0 -16.33">
					<quad pos="20.5" size="12 12" image="file://Media/Images/Obstacle/Medals/champion.png" id="Quad_Medal_3" hidden="1"/>
					<quad pos="24" size="12 12" image="file://Media/Images/Obstacle/Medals/gold.png" id="Quad_Medal_2" hidden="1"/>
					<quad pos="20.5" size="12 12" image="file://Media/Images/Obstacle/Medals/silver.png" id="Quad_Medal_1" hidden="1"/>
					<quad pos="17" size="12 12" image="file://Media/Images/Obstacle/Medals/bronze.png" id="Quad_Medal_0" hidden="1"/>
				</frame>
				<label pos="27.17 -31.17" size="50.67 7.33" halign="center" textcolor="fff" textsize="6.3" textfont="lato" id="Label_Rank"/>
				<label pos="27.17 -40.5" size="50.67 7.33" halign="center" textcolor="fff" textsize="3" textfont="lato" id="Label_Time"/>
			</frame>

			<quad size="54.33 48.7" image="file://Media/Images/Obstacle/Campaign/Ingame/Aside.png"/>
		</frame>
		
		<frame pos="77.6 -19" id="Frame_Menus">
			<frame data-name="improve">
				<label halign="center" valign="center2" size="28.67 8" text="Improve" textsize="2.7" id="Label"/>
				<quad halign="center" valign="center" size="28.67 8" image="file://Media/Images/Obstacle/Campaign/Ingame/Button.png"
					scriptevents="1" id="Quad_Trigger" data-target="Quad_Trigger Label" modulatecolor="000" data-anim-lenght="50"
					data-default-anim="<quad modulatecolor=&quot;000&quot; scale=&quot;1.&quot;/> <label textcolor=&quot;fff&quot;/>"
					data-target-anim="<quad modulatecolor=&quot;fff&quot; scale=&quot;1.02&quot;/> <label textcolor=&quot;000&quot;/>"/>
			</frame>
			{{{NextMapButton}}}
			<frame pos="{{{QuitButtonPos}}}" data-name="quit">
				<label halign="center" valign="center2" size="28.67 8" text="Quit" textsize="2.7" id="Label"/>
				<quad halign="center" valign="center" size="28.67 8" image="file://Media/Images/Obstacle/Campaign/Ingame/Button.png"
					scriptevents="1" id="Quad_Trigger" data-target="Quad_Trigger Label" modulatecolor="000" data-anim-lenght="50"
					data-default-anim="<quad modulatecolor=&quot;000&quot; scale=&quot;1.&quot;/> <label textcolor=&quot;fff&quot;/>"
					data-target-anim="<quad modulatecolor=&quot;fff&quot; scale=&quot;1.02&quot;/> <label textcolor=&quot;000&quot;/>"/>
			</frame>
		</frame>
	</frame>
		
	<quad pos="0 -35" size="96.67 78.17"  image="file://Media/Images/Obstacle/Campaign/Background.png"/>
</frame>

<script><![CDATA[
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	#Include "ColorLib" as CL

	declare Integer[][Text] G_MedalsTimesPerMap;

    Integer GetMedal(Integer Medal) {
        if (G_MedalsTimesPerMap.existskey(Map.MapInfo.MapUid)) {
            return G_MedalsTimesPerMap[Map.MapInfo.MapUid][Medal];
        }
        switch (Medal) {
            case 0: {
                return Map.MapInfo.TMObjective_BronzeTime;
            }
            case 1: {
                return Map.MapInfo.TMObjective_SilverTime;
            }
            case 2: {
                return Map.MapInfo.TMObjective_GoldTime;
            }
        }
        return Map.MapInfo.TMObjective_AuthorTime;
    }

	{{{Styles::GetDeclareGlobals()}}}

	main() {
		{{{Styles::GetInitFrameMenus()}}}
        wait(InputPlayer != Null && Page != Null);

		// This waits for any potential dialog happening when finishing a map to end.
		declare CMlFrame MainFrame <=> (Page.GetFirstChild("Frame_Main") as CMlFrame);
		MainFrame.Hide();
		declare netread Boolean Net_PendingFinish for UI = False;
		wait(!Net_PendingFinish);
		MainFrame.Show();

        declare netread Integer[][Text] Net_MedalsTimesPerMap for Teams[0];
        declare netread Integer Net_MedalsTimesPerMapUpdated for Teams[0] = -1;
        declare Integer MedalsTimesPerMapUpdated = -1;

		declare Label_Map = (Page.GetFirstChild("Label_Map") as CMlLabel);
		declare Label_Author = (Page.GetFirstChild("Label_Author") as CMlLabel);
		declare Label_PB = (Page.GetFirstChild("Label_PB") as CMlLabel);
		declare Label_Rank = (Page.GetFirstChild("Label_Rank") as CMlLabel);
		declare Label_Time = (Page.GetFirstChild("Label_Time") as CMlLabel);

		declare Frame_Record = (Page.GetFirstChild("Frame_Record") as CMlFrame);
		declare Quad_Medal_C = (Frame_Record.GetFirstChild("Quad_Medal_3") as CMlQuad);

		declare netread Integer Net_PF_Rank for InputPlayer = -1;
		declare netread Integer Net_PF_OldRank for InputPlayer = -1;
		declare netread Integer Net_PF_Time for InputPlayer = -1;
		declare netread Integer Net_PF_OldTime for InputPlayer = -1;
		declare netread Boolean Net_PF_HasImproved for InputPlayer = False;

		declare netread Integer Net_NewGoal for InputPlayer = -1;
		declare Integer NewGoal = -1;

		{{{NotifyFinishedMapToTP}}}
		
		while (True) {
			yield;

			Label_Map.Value = Map.MapName;
			Label_Author.Value = Map.AuthorNickName;

            if (Net_MedalsTimesPerMapUpdated != MedalsTimesPerMapUpdated) {
                G_MedalsTimesPerMap = Net_MedalsTimesPerMap;
                MedalsTimesPerMapUpdated = Net_MedalsTimesPerMapUpdated;
            }

			foreach (Event in PendingEvents) {
				{{{Styles::GetEventLoopActiveItem("campaign_action")}}}

				if (Event.Type == CMlScriptEvent::Type::MouseClick) {
					if (Event.ControlId == "Quad_Trigger") {
						declare Name = Event.Control.Parent.DataAttributeGet("name");
						
						if (Name == "quit") {
							Playground.QuitServer(True);
						} else {
							{{{NotifyNextMapToTP}}}
							SendCustomEvent("campaign:" ^ Name, [LocalUser.Login]);
						}
					}
				}
			}

			if (Net_NewGoal != NewGoal) {
				NewGoal = Net_NewGoal;

				declare Text RankDiff = "";
				if (Net_PF_HasImproved && Net_PF_OldRank > 0) {
					RankDiff = " ($0f0" ^ (Net_PF_Rank - Net_PF_OldRank) ^ "$z)";
				} else {
					RankDiff = " (+0)";
				}
			
				Label_Rank.Value = "Rank " ^ Net_PF_Rank ^ RankDiff;

				declare Text TimeDiff = "";

				if (Net_PF_HasImproved) {
					Frame_Record.RelativePosition_V3.Y = 0.;
					Label_PB.Opacity = 1.;

					TimeDiff = " ($0f0" ^ TL::TimeToText(Net_PF_Time - Net_PF_OldTime, True) ^ "$z)";
				} else {
					Frame_Record.RelativePosition_V3.Y = 7.;
					Label_PB.Opacity = 0.;

					if (Net_PF_OldTime < Net_PF_Time) {
						TimeDiff = " ($f00+" ^ TL::TimeToText(Net_PF_Time - Net_PF_OldTime, True) ^ "$z)";
					} else {
						TimeDiff = " (Â±0.00)";
					}
				}

				Label_Time.Value = TL::TimeToText(Net_PF_Time, True) ^ TimeDiff;
	
				for (I, 0, 3) {
					declare Quad_Medal = (Frame_Record.GetFirstChild("Quad_Medal_" ^ I) as CMlQuad);
					Quad_Medal.Visible = Net_PF_Time <= GetMedal(I);
				}
				if (Quad_Medal_C.Visible) {
					for (I, 0, 2) {
						declare Quad_Medal = (Frame_Record.GetFirstChild("Quad_Medal_" ^ I) as CMlQuad);
						Quad_Medal.Hide();
					}
				}
			}
		}
	}
]]></script>
</manialink>""";
}