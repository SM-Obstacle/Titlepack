#Include "Libs/ahmad3/EventAPI/Titlepack.Script.txt"							as EventAPI
#Include "Libs/ahmad3/EventAPI/Types.Script.txt"								as EventAPITypes
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Windows.Script.txt"			as Windows
#Include "Libs/miltant/ObstacleV2/ManialinkLib.Script.txt"						as Styles
#Include "Libs/smokegun/Constants.Script.txt"									as Constants
#Include "Libs/miltant/ObstacleV2/Titlepack/Dialogs/UI.Script.txt"   			as UI

#Include "TextLib" as TL
#Include "MathLib" as ML

// TODO: generalize this in the API

#Const C_SpecialEventConfigKey [
	"campaign" => [
		2 => 1
	]
]

#Const C_SpecialEventConfig [
	0 => [
		"label1pos" => <181., -29.5>
	],
	1 => [
		"label1pos" => <6., -29.5>
	]
]

#Const C_EventsRefreshPeriod 5 // In seconds

#Struct K_LocalMapInfo {
	Text MapUid;
	Text FileName;
}

#Struct K_PendingPlayingMap {
	Text MapPath;
	Text MapName;
}

declare Ident[Text] G_FileList;
declare Boolean[Text] G_ContentLoading;
declare Boolean[Text] G_UpdateContent;
declare EventAPITypes::K_Event[Text] G_CurrentEvent;
declare K_LocalMapInfo[][Integer][Text] G_CampaignLocalMapsUids;
declare K_PendingPlayingMap[][][Text] G_PendingPlayingMaps;
declare Integer[Text] G_PendingPlayingMapsUpdate;
declare Text[Text] G_LoadedEventHandle;
declare Integer[Text] G_LoadedEdition;

// Used to handle the state of the map loading dialog
declare Integer[Text] G_LoadingMapDialog;
declare Boolean[Text] G_LoadingMap;

// Used to debounce the refresh of the event editions
declare Integer[Text] G_RefreshInstant;

Void SetEventHandle(Text _LayerName, Text _EventHandle) {
	G_LoadedEventHandle[_LayerName] = _EventHandle;
}

Text Build() {
	return """
{{{Styles::GetStyleSheet()}}}
<frame id="Frame_Campaign">
	<framemodel id="MapCard">
		<label pos="1 -4.83" valign="center2" textsize="5" textcolor="fff" class="lato" id="Label_Num"/>
		<quad pos="20 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/champion.png" id="Quad_MedalC" hidden="1" z-index="4"/>
		<quad pos="21.33 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/gold.png" id="Quad_MedalG" hidden="1" z-index="3"/>
		<quad pos="20 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/silver.png" id="Quad_MedalS" hidden="1" z-index="2"/>
		<quad pos="18.67 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/bronze.png" id="Quad_MedalB" hidden="1" z-index="1"/>
		<quad pos="14.75 -8.67" size="10.33 1.67" image="file://Media/Images/Obstacle/Campaign/LCompleted.png" id="Quad_CompletedIndicator" halign="center" valign="center" hidden="0"/>
		<quad pos="14.75 -4.17" size="30.83 9.67" image="file://Media/Images/Obstacle/Campaign/OutlineMapCampaign.png" id="Outline_Map" halign="center" valign="center" hidden="1" z-index="-1"/>
		<quad pos="14.75 -4.17" size="29.67 8.5" image="file://Media/Images/Obstacle/Campaign/BMapCampaign.png" id="Button_Map" scriptevents="1" halign="center" valign="center"
				data-target="Button_Map" data-anim-length="70"
				data-default-anim="<quad scale=&quot;1.&quot;/>"
				data-target-anim="<quad scale=&quot;1.03&quot;/>"/>
	</framemodel>

	<framemodel id="CategoryModel">
		<quad pos="16.75 2" id="Quad_Category_PreviousPage" valign="center" halign="right" size="5 5" style="Icons64x64_1" hidden="1" substyle="ArrowUp" scriptevents="1" />
		<frame pos="-.83">
			<label id="Label_CategoryName" textsize="2" class="lato" textprefix="$t" pos="15.3 -1.835" halign="center" valign="center2" />
			<quad id="Category" size="31.17 3.67"/>
		</frame>
		<frame id="Frame_CategoryMapList">
			<frameinstance hidden="1" modelid="MapCard" pos="0 -8.67" id="Card_1"/>
			<frameinstance hidden="1" modelid="MapCard" pos="0 -20.33" id="Card_2"/>
			<frameinstance hidden="1" modelid="MapCard" pos="0 -32" id="Card_3"/>
			<frameinstance hidden="1" modelid="MapCard" pos="0 -43.67" id="Card_4"/>
			<frameinstance hidden="1" modelid="MapCard" pos="0 -55.33" id="Card_5"/>
		</frame>
		<quad pos="16.75 -66.5" id="Quad_Category_NextPage" valign="center" halign="right" size="5 5" style="Icons64x64_1" hidden="1" substyle="ArrowDown" scriptevents="1" />
	</framemodel>

	<frame pos="-154.17" id="Frame_Infos" hidden="1">
		<frame pos="0 53.67" clip="1" clipsizen="52.67 35.83" clipposn="26.63 -17.83">
			<label text="" textcolor="fff" pos="26.5 -17.83" halign="center" valign="center2" textsize="10" id="Label_IconPlay" opacity="0.4"/>
			<quad size="53 35.83" pos="26.5 -17.915" halign="center" valign="center" id="Quad_Play"
				image="file://Media/Images/Obstacle/Campaign/FThumbnailMapClip.png" scriptevents="1"
				data-target="Label_IconPlay Quad_Thumbnail" data-anim-length="70"
				data-default-anim="<label scale=&quot;1&quot; opacity=&quot;0.4&quot;/> <quad scale=&quot;1&quot;/>"
				data-target-anim="<label scale=&quot;1.2&quot; opacity=&quot;0.8&quot;/> <quad scale=&quot;1.06&quot;/>"/>
			<quad size="53 35.83" pos="26.5 -17.915" halign="center" valign="center" id="Quad_Thumbnail" keepratio="Clip"/>
			<quad size="12.5 10.17" pos="26.5 -17.915" halign="center" valign="center" id="Quad_Loader" image="file://Media/Images/Obstacle/Menu/Logo.png"/>
		</frame>

		<frame pos="0 15.67">
			<label pos="26.5 -5.92" size="52 11.83" text=". . ." textsize="4" class="lator" halign="center" valign="center2" textcolor="fff" id="Label_Map"/>
			<quad size="53 11.83" bgcolor="0009"/>
		</frame>
		<frame pos="0 2">
			<label pos="26.5 -5.92" size="52 11.83" text=". . ." textsize="4" class="lator" halign="center" valign="center2" textcolor="fff" id="Label_Mapper"/>
			<quad size="53 11.83" image="file://Media/Images/Obstacle/Campaign/FMapperCampaign.png"/>
		</frame>
		<frame pos="0 -25">
			<label pos="-.17 5" text="personal best" textprefix="$t" textsize="2.05" textcolor="fff"/>
			<label pos="26.5 -5.92" size="52 11.83" text="..:..:.." textsize="4" class="lator" halign="center" valign="center2" textcolor="fff" id="Label_PB"/>
			<quad size="53 11.83" bgcolor="0009" scriptevents="1"/>
		</frame>
		<frame pos="0 -45">
			<label pos="-.17 5" text="next objective" textprefix="$t" textsize="2.05" textcolor="fff"/>

			<quad z-index="1" pos="5 -3.25" size="5 5" id="Quad_NextOppMedal" hidden="1" />
			<label pos="26.5 -5.92" size="52 11.83" text="None" textsize="4" class="lator" halign="center" valign="center2" textcolor="fff" id="Label_NextOpponent" />
			<label pos="26.5 -12" size="52 11.83" text="--:--:--" textsize="2" class="lator" halign="center" valign="center2" textcolor="fff" id="Label_NextOppTime" />
			<label pos="45 -12" size="52 11.83" textsize="2" class="lator" halign="center" valign="center2" textcolor="4E6D8C" id="Label_NextOppTimeDiff" hidden="1" />

			<quad size="53 15" bgcolor="0009" scriptevents="1" />
		</frame>
	</frame>

	<frame pos="-2.5 -22" id="Frame_LoadingIcon">
		<quad valign="center" halign="center" style="UIConstruction_Buttons" substyle="Reload" size="10 10" id="Quad_LoadingIcon" hidden="0" />
	</frame>

	<frame pos="-96.17 53.5">
		<frame pos="8 -46.67" id="Frame_CampaignContent" hidden="1">
			<quad pos="-1.17 5" id="Quad_PreviousPage" valign="center" halign="right" size="5 5" style="Icons64x64_1" hidden="1" substyle="ArrowPrev" scriptevents="1" />
			<frameinstance modelid="CategoryModel" id="F_Category_1" hidden="1"/>
			<frameinstance modelid="CategoryModel" id="F_Category_2" hidden="1" pos="34.5"/>
			<frameinstance modelid="CategoryModel" id="F_Category_3" hidden="1" pos="69"/>
			<frameinstance modelid="CategoryModel" id="F_Category_4" hidden="1" pos="103.5"/>
			<frameinstance modelid="CategoryModel" id="F_Category_5" hidden="1" pos="138"/>
			<quad pos="169.17 5" id="Quad_NextPage" valign="center" halign="left" size="5 5" style="Icons64x64_1" hidden="1" substyle="ArrowNext" scriptevents="1" />
		</frame>

		<label pos="6 -6.5" textsize="8" textprefix="$t$s$fff" class="lator" id="Label_EventLn1"/>
		<label pos="6 -15.5" textsize="6" textprefix="$t$fff" class="lato" textfont="light" id="Label_EventLn2"/>
		<label id="Label_LeaderboardsLink" pos="181 -29.5" textsize="2" textfont="light" halign="right" class="lato" />
		<quad size="183.33 35.17" bgcolor="92B7B7FF" id="Quad_Banner"/>
		<quad pos="0 -35.17" size="183.33 1.17" bgcolor="FFF"/>
		<quad pos="0 -36.33" size="183.33 87.83" image="file://Media/Images/Obstacle/Campaign/Background.png"/>
	</frame>
</frame>

<script><![CDATA[
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	#Include "ColorLib" as CL

	{{{EventAPITypes::ML_Preproc()}}}

	#Struct K_CategoryPageState {
		Integer CurrentPage;
		Integer LastPage;
	}

	#Const C_MaxCategoriesPerPage 5
	#Const C_MaxMapsPerCategoryPage 5
	#Const C_SpecialEventConfigKey {{{dump(C_SpecialEventConfigKey)}}}
	#Const C_SpecialEventConfig  {{{dump(C_SpecialEventConfig)}}}

	{{{Styles::GetDeclareGlobals()}}}

	declare Integer G_CurrentPage_Categories;
	declare Integer G_LastPage_Categories;
	declare K_CategoryPageState[] G_CategoriesPages;

	Void UpdatePageButtons() {
		declare Quad_PreviousPage_Categories <=> (Page.GetFirstChild("Quad_PreviousPage") as CMlQuad);
		declare Quad_NextPage_Categories <=> (Page.GetFirstChild("Quad_NextPage") as CMlQuad);

		declare previousPageDisabled = !Quad_PreviousPage_Categories.Visible;
		if (G_CurrentPage_Categories == 1 && !previousPageDisabled) {
			Quad_PreviousPage_Categories.Hide();
		} else if (G_CurrentPage_Categories > 1) {
			Quad_PreviousPage_Categories.Show();
		}

		declare nextPageDisabled = !Quad_NextPage_Categories.Visible;
		if (G_CurrentPage_Categories == G_LastPage_Categories && !nextPageDisabled) {
			Quad_NextPage_Categories.Hide();
		} else if (G_CurrentPage_Categories < G_LastPage_Categories) {
			Quad_NextPage_Categories.Show();
		}

		foreach (I => PageState in G_CategoriesPages.slice(C_MaxCategoriesPerPage * (G_CurrentPage_Categories-1), C_MaxCategoriesPerPage)) {
			declare CMlFrame Frame_Category = (Page.GetFirstChild("F_Category_" ^ (I+1)) as CMlFrame);

			declare CMlQuad Quad_PreviousPage <=> (Frame_Category.GetFirstChild("Quad_Category_PreviousPage") as CMlQuad);
			declare CMlQuad Quad_NextPage <=> (Frame_Category.GetFirstChild("Quad_Category_NextPage") as CMlQuad);

			declare previousPageDisabled = !Quad_PreviousPage.Visible;
			if (PageState.CurrentPage == 1 && !previousPageDisabled) {
				Quad_PreviousPage.Hide();
			} else if (PageState.CurrentPage > 1) {
				Quad_PreviousPage.Show();
			}

			declare nextPageDisabled = !Quad_NextPage.Visible;
			if (PageState.CurrentPage == PageState.LastPage && !nextPageDisabled) {
				Quad_NextPage.Hide();
			} else if (PageState.CurrentPage < PageState.LastPage) {
				Quad_NextPage.Show();
			}
		}
	}

	Integer NumberOfDigits(Integer _X) {
		declare Integer N = _X;
		declare Integer Num = 0;
		if (N == 0) return 1;
		while (N != 0) {
			N /= 10;
			Num += 1;
		}

		return Num;
	}

	Void UpdateMaps() {
		declare Frame_Infos = (Page.GetFirstChild("Frame_Infos") as CMlFrame);
		declare Quad_Thumbnail = (Page.GetFirstChild("Quad_Thumbnail") as CMlQuad);
		declare Label_Map = (Page.GetFirstChild("Label_Map") as CMlLabel);
		declare Label_Mapper = (Page.GetFirstChild("Label_Mapper") as CMlLabel);
		declare Label_PB = (Page.GetFirstChild("Label_PB") as CMlLabel);
		declare Label_NextOpponent = (Page.GetFirstChild("Label_NextOpponent") as CMlLabel);
		declare Label_NextOppTime = (Page.GetFirstChild("Label_NextOppTime") as CMlLabel);
		declare Label_NextOppTimeDiff = (Page.GetFirstChild("Label_NextOppTimeDiff") as CMlLabel);
		declare Quad_NextOppMedal = (Page.GetFirstChild("Quad_NextOppMedal") as CMlQuad);
		declare Label_LeaderboardsLink = (Page.GetFirstChild("Label_LeaderboardsLink") as CMlLabel);

		declare Integer P_SelectedEdition for Page;
		declare Integer P_SelectedMapI for Page;
		declare Integer P_SelectedMapJ for Page;
		declare K_Event P_CampaignEvent for Page;

		UpdatePageButtons();

		// Clear the page
		Frame_Infos.Hide();
		Quad_NextOppMedal.Hide();
		Label_NextOppTime.SetText("--:--:--");
		Label_NextOppTimeDiff.Hide();
		Label_NextOpponent.SetText("None");
		Label_LeaderboardsLink.Hide();
		for (I, 1, C_MaxCategoriesPerPage) {
			declare CMlFrame Frame_Category = (Page.GetFirstChild("F_Category_" ^ I) as CMlFrame);
			// We first hide the sub-frames for the maps cards
			for (J, 1, C_MaxMapsPerCategoryPage) {
				declare CMlFrame Frame_Card = (Frame_Category.GetFirstChild("Card_" ^ J) as CMlFrame);
				Frame_Card.Hide();

				declare CMlQuad Quad_MedalB = (Frame_Card.GetFirstChild("Quad_MedalB") as CMlQuad);
				declare CMlQuad Quad_MedalS = (Frame_Card.GetFirstChild("Quad_MedalS") as CMlQuad);
				declare CMlQuad Quad_MedalG = (Frame_Card.GetFirstChild("Quad_MedalG") as CMlQuad);
				declare CMlQuad Quad_MedalC = (Frame_Card.GetFirstChild("Quad_MedalC") as CMlQuad);

				Quad_MedalB.Hide();
				Quad_MedalS.Hide();
				Quad_MedalG.Hide();
				Quad_MedalC.Hide();

			}
			// Then we hide the category frame itself
			// so that when it shows up again, the maps cards are still hidden
			Frame_Category.Hide();
		}

		// Keeps the page cleared
		if (P_CampaignEvent.EditionsDetails[P_SelectedEdition].categories.count == 0) return;

		declare SelectedCategory = P_CampaignEvent.EditionsDetails[P_SelectedEdition]
			.categories[P_SelectedMapI];
		declare K_EventEditionContentMap SelectedMap = SelectedCategory
			.maps[ML::Min(P_SelectedMapJ, SelectedCategory.maps.count - 1)];

		declare LeaderboardsLink = "$fff$s$i$l[{{{Constants::C_WebsiteUrl}}}/event/" ^ P_CampaignEvent.Event.handle ^ "/" ^ P_SelectedEdition ^ "]Leaderboards...";
		Label_LeaderboardsLink.Show();
		Label_LeaderboardsLink.SetText(LeaderboardsLink);

		declare MapLink = "$l[{{{Constants::C_WebsiteUrl}}}/event/campaign/" ^ P_SelectedEdition ^ "/map/" ^ SelectedMap.map_uid ^ "]";
		declare AuthorLink = "$l[{{{Constants::C_WebsiteUrl}}}/player/" ^ SelectedMap.main_author.login ^ "]";

		declare MapName = TL::RegexReplace("\\$[lLhHpP](\\[.*\\])?", SelectedMap.name, "g", "");
		declare AuthorName = TL::RegexReplace("\\$[lLhHpP](\\[.*\\])?", SelectedMap.main_author.name, "g", "");
		MapName = TL::Replace(MapName, "$z", "$z" ^ MapLink);
		AuthorName = TL::Replace(AuthorName, "$z", "$z" ^ AuthorLink);

		declare Text[Text] P_MapsWithThumbnails for Page;
		declare Text ThumbnailPath;
		if (P_MapsWithThumbnails.existskey(SelectedMap.map_uid)) {
			ThumbnailPath = P_MapsWithThumbnails[SelectedMap.map_uid];
		} else {
			ThumbnailPath = "https://sm.mania.exchange/maps/thumbnail/" ^ SelectedMap.mx_id ^ "?.jpg";
		}
		Quad_Thumbnail.ChangeImageUrl(ThumbnailPath);
		Label_Map.SetText("   " ^ MapLink ^ MapName);
		Label_Mapper.SetText("   " ^ AuthorLink ^ AuthorName);

		if (SelectedMap.personal_best < 0) {
			Label_PB.TextColor = CL::HexToRgb("FFFFFF");
			Label_PB.SetText("-- : -- : --");
		} else {
			Label_PB.TextColor = CL::HexToRgb("4E6D8C");
			Label_PB.SetText(TL::TimeToText(SelectedMap.personal_best, True));

			declare Text NextOppTxt;
			declare Integer NextOppTime = -1;

			if (SelectedMap.champion_time > 0 && SelectedMap.personal_best > SelectedMap.champion_time) {
				Quad_NextOppMedal.Show();
				declare Text NextMedalImg;
				if (SelectedMap.personal_best > SelectedMap.bronze_time) {
					NextMedalImg = "file://Media/Images/Obstacle/Medals/bronze.png";
					NextOppTxt = "Bronze";
					NextOppTime = SelectedMap.bronze_time;
				} else if (SelectedMap.personal_best > SelectedMap.silver_time) {
					NextMedalImg = "file://Media/Images/Obstacle/Medals/silver.png";
					NextOppTxt = "Silver";
					NextOppTime = SelectedMap.silver_time;
				} else if (SelectedMap.personal_best > SelectedMap.gold_time) {
					NextMedalImg = "file://Media/Images/Obstacle/Medals/gold.png";
					NextOppTxt = "Gold";
					NextOppTime = SelectedMap.gold_time;
				} else if (SelectedMap.personal_best > SelectedMap.champion_time) {
					NextMedalImg = "file://Media/Images/Obstacle/Medals/champion.png";
					NextOppTxt = "Champion";
					NextOppTime = SelectedMap.champion_time;
				}
				Quad_NextOppMedal.ChangeImageUrl(NextMedalImg);
			} else if (SelectedMap.next_opponent.time != -1) {
				NextOppTxt = "$l[{{{Constants::C_WebsiteUrl}}}/player/" ^ SelectedMap.next_opponent.login ^ "]$z" ^ SelectedMap.next_opponent.name ^ "";
				NextOppTime = SelectedMap.next_opponent.time;
			}

			if (NextOppTime != -1) {
				Label_NextOpponent.SetText(NextOppTxt);
				Label_NextOppTime.SetText(TL::TimeToText(NextOppTime, True));
				Label_NextOppTimeDiff.SetText(TL::TimeToText(NextOppTime - SelectedMap.personal_best, True));
				Label_NextOppTimeDiff.Show();
			}
		}

		Frame_Infos.Show();

		declare Integer CategoriesSliceStartIdx = C_MaxCategoriesPerPage * (G_CurrentPage_Categories-1);

		// Show all of current page

		declare K_EventEditionContentCategory[] Categories = P_CampaignEvent.EditionsDetails[P_SelectedEdition].categories
			.slice(CategoriesSliceStartIdx, C_MaxCategoriesPerPage);

		// Iterate over the sliced categories (indexes correspond to P_SelectedMapI + CategoriesSliceStartIdx)
		foreach (I => Category in Categories) {
			declare CMlFrame Frame_Category = (Page.GetFirstChild("F_Category_" ^ (I+1)) as CMlFrame);
			Frame_Category.Show();

			if (Category.banner_img_url == "") {
				declare CMlLabel Label_CategoryName = (Frame_Category.GetFirstChild("Label_CategoryName") as CMlLabel);
				Label_CategoryName.SetText(Category.name);
			} else {
				declare CMlQuad Quad_Category = (Frame_Category.GetFirstChild("Category") as CMlQuad);
				Quad_Category.ChangeImageUrl(Category.banner_img_url);
			}

			declare Integer MapsSliceStart = C_MaxMapsPerCategoryPage * (G_CategoriesPages[CategoriesSliceStartIdx + I].CurrentPage - 1);

			declare K_EventEditionContentMap[] Maps = Category.maps
				.slice(MapsSliceStart, C_MaxMapsPerCategoryPage);

			// Used to put 0 left padding in the map indexes
			declare Integer DigitNum = ML::Max(NumberOfDigits(Category.maps.count), 2);

			// Iterate over the sliced maps (indexes correspond to P_SelectedMapJ + MapsSliceStart)
			foreach (MapI => Map in Maps) {
				declare CMlFrame Frame_Card = (Frame_Category.GetFirstChild("Card_" ^ (MapI+1)) as CMlFrame);
				Frame_Card.Show();
				
				declare CMlQuad CompletedIndicator = (Frame_Card.GetFirstChild("Quad_CompletedIndicator") as CMlQuad);
				declare CMlQuad Outline_Map = (Frame_Card.GetFirstChild("Outline_Map") as CMlQuad);
				declare CMlQuad Button_Map = (Frame_Card.GetFirstChild("Button_Map") as CMlQuad);
				declare CMlLabel Label_Num = (Frame_Card.GetFirstChild("Label_Num") as CMlLabel);
				declare CMlQuad Quad_MedalB = (Frame_Card.GetFirstChild("Quad_MedalB") as CMlQuad);
				declare CMlQuad Quad_MedalS = (Frame_Card.GetFirstChild("Quad_MedalS") as CMlQuad);
				declare CMlQuad Quad_MedalG = (Frame_Card.GetFirstChild("Quad_MedalG") as CMlQuad);
				declare CMlQuad Quad_MedalC = (Frame_Card.GetFirstChild("Quad_MedalC") as CMlQuad);

				// Number shown on the card
				declare Integer TotalCount = 1;
				declare Integer CategoryIdx = CategoriesSliceStartIdx + I - 1;
				for (J, 0, CategoriesSliceStartIdx + I - 1) {
					TotalCount += P_CampaignEvent.EditionsDetails[P_SelectedEdition].categories[J].maps.count;
				}

				declare Integer MapNumber = MapsSliceStart + MapI + TotalCount;

				// Put left padding with 0
				declare Text Label_Num_Text = "";
				for (I, 0, DigitNum - NumberOfDigits(MapNumber) - 1) {
					Label_Num_Text ^= "0";
				}
				Label_Num.SetText(Label_Num_Text ^ MapNumber);

				if (P_SelectedMapJ == MapsSliceStart + MapI && P_SelectedMapI == CategoriesSliceStartIdx + I) {
					Label_Num.TextColor = CL::HexToRgb("1D1F37");
					
					CompletedIndicator.RelativePosition_V3.Y = -8.67;
					Outline_Map.Show();
				} else {
					Label_Num.TextColor = CL::HexToRgb("FFFFFF");
					
					CompletedIndicator.RelativePosition_V3.Y = -8.33;
					Outline_Map.Hide();
				}

				if (Map.personal_best >= 0) {
					CompletedIndicator.Show();

					if (Map.personal_best <= Map.champion_time) {
						Quad_MedalC.Show();
					}
					if (Map.personal_best <= Map.gold_time) {
						Quad_MedalG.Show();
					}
					if (Map.personal_best <= Map.silver_time) {
						Quad_MedalS.Show();
					}
					if (Map.personal_best <= Map.bronze_time) {
						Quad_MedalB.Show();
					}
				} else {
					CompletedIndicator.Hide();
				}
			}
		}
	}

	Void InitPages() {
		G_CurrentPage_Categories = 1;
		G_LastPage_Categories = 1;
		G_CategoriesPages.clear();

		declare K_Event P_CampaignEvent for Page;
		declare Integer P_SelectedEdition for Page;

		declare K_EventEditionContentCategory[] Categories = P_CampaignEvent.EditionsDetails[P_SelectedEdition].categories;
		G_LastPage_Categories = ML::Max(0, Categories.count - 1) / C_MaxCategoriesPerPage + 1;
		for (I, 0, Categories.count - 1) {
			declare K_EventEditionContentCategory Category = Categories[I];
			G_CategoriesPages.add(K_CategoryPageState {
				CurrentPage = 1,
				LastPage = ML::Max(0, Category.maps.count - 1) / C_MaxMapsPerCategoryPage + 1
			});
		}
	}

	Void LoopLoadingIcon(CMlQuad _Quad, CMlFrame _CampaignContent) {
		declare Boolean P_CampaignLoading for Page = False;
		if (P_CampaignLoading) {
			if (!_Quad.Visible) {
				_Quad.Visible = True;
				_CampaignContent.Visible = False;
			}
			_Quad.RelativeRotation += 4;
		} else if (_Quad.Visible) {
			_Quad.Visible = False;
			_CampaignContent.Visible = True;
		}
	}
		
	main() {
		declare CMlQuad Quad_Loading = (Page.GetFirstChild("Quad_LoadingIcon") as CMlQuad);
		declare CMlFrame Frame_CampaignContent = (Page.GetFirstChild("Frame_CampaignContent") as CMlFrame);

		declare Frame_Infos = (Page.GetFirstChild("Frame_Infos") as CMlFrame);
		declare Quad_Loader = (Frame_Infos.GetFirstChild("Quad_Loader") as CMlQuad);

		declare Quad_Banner = (Page.GetFirstChild("Quad_Banner") as CMlQuad);
		declare Label_EventLn1 = (Page.GetFirstChild("Label_EventLn1") as CMlLabel);
		declare Label_EventLn2 = (Page.GetFirstChild("Label_EventLn2") as CMlLabel);
		declare Label_Leaderboards = (Page.GetFirstChild("Label_LeaderboardsLink") as CMlLabel);

		declare K_Event P_CampaignEvent for Page;
		declare Text P_SelectedEventHandle for Page = "";
		declare Integer P_SelectedEdition for Page = -1;
		declare Integer P_SelectedMapI for Page = -1;
		declare Integer P_SelectedMapJ for Page = -1;
		declare Integer SelectedCampaign as ControllerSelectedCampaign for Page = -1;
		declare Boolean TimesReloaded for Page = False;

		declare Integer SelectedCampaign = -1;
		declare Text SelectedCampaignHandle = "";
		declare Integer SelectedMapI = -1;
		declare Integer SelectedMapJ = -1;
		declare Boolean MapsNeedRefresh = False;
		declare Integer TimestampLastSelection = -1;
		declare Text[Text] MapsWithThumbnailsSnapshot = [];
		declare Text[Text] P_MapsWithThumbnails for Page = [];
		declare Boolean P_TimesReloaded for Page = False;

		while (P_SelectedEdition == -1) {
			Quad_Loading.RelativeRotation += 4;
			yield;
		}

		Quad_Loading.Visible = False;
		Frame_CampaignContent.Visible = True;

		while (True) {
			LoopLoadingIcon(Quad_Loading, Frame_CampaignContent);

			declare Lerp = ML::Abs(ML::Cos(Now % 2000 / 636.62));
			Quad_Loader.Size = <Lerp * 12.5, 10.17>;

			switch (ML::FloorInteger(Now / 1000.) % 4) {
				case 1: {
					Quad_Loader.ChangeImageUrl("file://Media/Images/Logos/LogoWeb.png");
				}
				case 3: {
					Quad_Loader.ChangeImageUrl("file://Media/Images/Logos/LogoWebFlip.png");
				}
			}

			if (SelectedCampaign != P_SelectedEdition || SelectedCampaignHandle != P_SelectedEventHandle) {
				InitPages();
				SelectedCampaignHandle = P_SelectedEventHandle;
				SelectedCampaign = P_SelectedEdition;

				declare SelectedEdition = P_CampaignEvent.EditionsDetails[SelectedCampaign];
				Quad_Banner.ChangeImageUrl(SelectedEdition.banner_img_url);
				Label_EventLn1.SetText(SelectedEdition.name);
				Label_EventLn2.SetText(SelectedEdition.subtitle);
				MapsNeedRefresh = True;

				declare Vec2[Text] SpecialConfig;
				if (C_SpecialEventConfigKey.existskey(SelectedCampaignHandle)
					&& C_SpecialEventConfigKey[SelectedCampaignHandle].existskey(SelectedCampaign)
					&& C_SpecialEventConfig.existskey(C_SpecialEventConfigKey[SelectedCampaignHandle][SelectedCampaign]))
				{
					SpecialConfig = C_SpecialEventConfig[C_SpecialEventConfigKey[SelectedCampaignHandle][SelectedCampaign]];
				} else {
					SpecialConfig = C_SpecialEventConfig[0];
				}

				Label_Leaderboards.RelativePosition_V3.X = SpecialConfig["label1pos"].X;
				Label_Leaderboards.RelativePosition_V3.Y = SpecialConfig["label1pos"].Y;

				if (Label_Leaderboards.RelativePosition_V3.X < 81.67) {
					Label_Leaderboards.HorizontalAlign = CMlControl::AlignHorizontal::Left;
				} else {
					Label_Leaderboards.HorizontalAlign = CMlControl::AlignHorizontal::Right;
				}
			}

			if (SelectedMapI != P_SelectedMapI || SelectedMapJ != P_SelectedMapJ) {
				SelectedMapI = P_SelectedMapI;
				SelectedMapJ = P_SelectedMapJ;
				MapsNeedRefresh = True;
			}

			foreach (MapUid => MxUrl in P_MapsWithThumbnails) {
				if (!MapsWithThumbnailsSnapshot.existskey(MapUid)) {
					MapsWithThumbnailsSnapshot = P_MapsWithThumbnails;
					MapsNeedRefresh = True;
					break;
				}
			}

			if (MapsNeedRefresh || P_TimesReloaded) {
				UpdateMaps();
				MapsNeedRefresh = False;
				P_TimesReloaded = False;
			}

			foreach (Event in PendingEvents) {
				{{{Styles::GetEventLoopActiveItem()}}}
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseOver: {
						if (Event.ControlId != "Label_CampaignEdition") continue;

						declare CMlLabel Label_Edition = (Event.Control as CMlLabel);
						Label_Edition.TextColor = CL::HexToRgb("FFFFFF");
					}
					case CMlScriptEvent::Type::MouseOut: {
						if (Event.ControlId != "Label_CampaignEdition") continue;

						declare CMlLabel Label_Edition = (Event.Control as CMlLabel);
						if (!Label_Edition.DataAttributeExists("editionid")) continue;
						declare Integer EditionIdx = TL::ToInteger(Event.Control.DataAttributeGet("editionid"));
						if (EditionIdx == P_SelectedEdition) continue;

						Label_Edition.TextColor = CL::HexToRgb("B4B4B4");
					}
					case CMlScriptEvent::Type::MouseClick: {
						switch (Event.ControlId) {
							case "Button_Map": {
								declare CMlFrame ClickedCard = Event.Control.Parent;

								if (TL::StartsWith("Card_", ClickedCard.ControlId)) {
									declare CMlFrame Category_Frame = ClickedCard.Parent;

									declare Integer CategoryIndex = TL::ToInteger(TL::SubString(Category_Frame.ControlId, 11, 1)) - 1 + (G_CurrentPage_Categories - 1) * C_MaxCategoriesPerPage;
									declare Integer MapIndex = TL::ToInteger(TL::SubString(ClickedCard.ControlId, 5, 1)) - 1 + (G_CategoriesPages[CategoryIndex].CurrentPage - 1) * C_MaxMapsPerCategoryPage;

									if (MapIndex != SelectedMapJ || CategoryIndex != SelectedMapI) {
										SendCustomEvent("update_map_selection", [TL::ToText(CategoryIndex), TL::ToText(MapIndex)]);
										TimestampLastSelection = Now;
									} else if (TimestampLastSelection != -1 && Now - TimestampLastSelection < 500) {
										SendCustomEvent("play_campaign", []);
										TimestampLastSelection = -1;
									} else {
										TimestampLastSelection = Now;
									}
								}
							}
							case "Quad_Play": {
								SendCustomEvent("play_campaign", []);
							}
							case "Quad_PreviousPage": {
								if (G_CurrentPage_Categories > 1) {
									G_CurrentPage_Categories -= 1;
									MapsNeedRefresh = True;
								}
							}
							case "Quad_NextPage": {
								if (G_CurrentPage_Categories < G_LastPage_Categories) {
									G_CurrentPage_Categories += 1;
									MapsNeedRefresh = True;
								}
							}
						}

						// Manages the click event of the categories pagination buttons
						if (Event.ControlId == "Quad_Category_PreviousPage" || Event.ControlId == "Quad_Category_NextPage") {
							declare CMlFrame Category_Frame = Event.Control.Parent;
							declare Integer CategoryIndex = TL::ToInteger(TL::SubString(Category_Frame.ControlId, 11, 1)) - 1 + (G_CurrentPage_Categories - 1) * C_MaxCategoriesPerPage;

							if (Event.ControlId == "Quad_Category_PreviousPage" && G_CategoriesPages[CategoryIndex].CurrentPage > 1) {
								G_CategoriesPages[CategoryIndex].CurrentPage -= 1;
								MapsNeedRefresh = True;
							} else if (Event.ControlId == "Quad_Category_NextPage" && G_CategoriesPages[CategoryIndex].CurrentPage < G_CategoriesPages[CategoryIndex].LastPage) {
								G_CategoriesPages[CategoryIndex].CurrentPage += 1;
								MapsNeedRefresh = True;
							}
						}
					}
				}
			}

			yield;
		}
	}
]]></script>
""";
}

Void Unload(Text _LayerName) {
	G_FileList[_LayerName] = NullId;
	G_ContentLoading[_LayerName] = False;
	G_UpdateContent[_LayerName] = False;
	G_CurrentEvent[_LayerName] = EventAPITypes::K_Event {};
	G_CampaignLocalMapsUids[_LayerName] = [];
	G_PendingPlayingMaps[_LayerName] = [];
	G_PendingPlayingMapsUpdate[_LayerName] = 0;
	G_LoadedEventHandle[_LayerName] = "";
	G_LoadedEdition[_LayerName] = 0;
	G_LoadingMapDialog[_LayerName] = 0;
	G_LoadingMap[_LayerName] = False;
	G_RefreshInstant[_LayerName] = 0;
}

Void Private_Reload(Text _LayerName) {
	G_ContentLoading[_LayerName] = True;
	EventAPI::Load();

	G_PendingPlayingMapsUpdate[_LayerName] = -1;
	G_LoadedEdition[_LayerName] = -1;

	declare Integer[Text] ObsCampaignEvent_PendingPlayingMapsUpdate for LocalUser = [_LayerName => -1];
	ObsCampaignEvent_PendingPlayingMapsUpdate[_LayerName] = -1;
	declare Boolean P_CampaignLoading for Windows::GetPage(_LayerName) = False;
	P_CampaignLoading = True;
}

Void Load(Text _LayerName, Text[Text] _SubLayers) {
	Unload(_LayerName);

	declare Windows::K_Window Window;
	Window.Name = _LayerName;
	Window.Manialink = Build();
	Window.Animation = CUILayer::EUILayerAnimation::LeftSlow;
	Window.SubLayers = _SubLayers;

	Windows::CreateWindow(Window);
	Private_Reload(_LayerName);
}

Void Private_InitLoadingMapDialogLoop(Text _LayerName, Text _MapName) {
	G_LoadingMap[_LayerName] = True;
	G_LoadingMapDialog[_LayerName] = UI::NewDialog(
		"Loading...",
		UI::K_Message {
			Label = "Loading the map $<" ^ _MapName ^ "$>, please wait..."
		},
		[]
	);
}

Void Private_LoadingMapDialogLoop(Text _LayerName) {
	if (!G_LoadingMap[_LayerName]) return;

	declare Boolean ObsCampaignEvent_LoadingDialogPlayingMap for LocalUser = False;
	if (ObsCampaignEvent_LoadingDialogPlayingMap) {
		ObsCampaignEvent_LoadingDialogPlayingMap = False;
		G_LoadingMap[_LayerName] = False;
		UI::CloseDialog(G_LoadingMapDialog[_LayerName]);
		return;
	}

	UI::Prompt(G_LoadingMapDialog[_LayerName], True);
}

Void Private_DebounceRefresh(Text _LayerName) {
	if (Now - G_RefreshInstant[_LayerName] < C_EventsRefreshPeriod * 1000) return;
	G_RefreshInstant[_LayerName] = Now;
	Private_Reload(_LayerName);
}

Void Private_LoopPlayerFinish(Text _LayerName) {
	declare CMlPage CurrentPage <=> Windows::GetPage(_LayerName);

	declare Boolean ObsCampaignEvent_EndScreenShown for LocalUser = False;
	if (!ObsCampaignEvent_EndScreenShown) return;

	declare Integer P_SelectedEdition for CurrentPage;
	// Refetches the current edition even if it has already been loaded
	EventAPI::LoadEdition(G_LoadedEventHandle[_LayerName], P_SelectedEdition, False);
	declare Boolean P_CampaignLoading for CurrentPage = False;
	P_CampaignLoading = True;
	ObsCampaignEvent_EndScreenShown = False;
	G_ContentLoading[_LayerName] = True;

	declare Integer P_SelectedMapJ for CurrentPage = -1;
	P_SelectedMapJ += 1;
}

Void Private_LoopPlayerNextMap(Text _LayerName) {
	declare CMlPage CurrentPage <=> Windows::GetPage(_LayerName);

	declare Integer[Text] ObsCampaignEvent_PendingPlayingMapsUpdate for LocalUser = [_LayerName => -1];
	if (ObsCampaignEvent_PendingPlayingMapsUpdate[_LayerName] == G_PendingPlayingMapsUpdate[_LayerName]) return;

	G_PendingPlayingMapsUpdate[_LayerName] = ObsCampaignEvent_PendingPlayingMapsUpdate[_LayerName];

	declare Integer P_SelectedEdition for CurrentPage = -1;
	declare Integer P_SelectedMapI for CurrentPage = -1;
	declare Integer P_SelectedMapJ for CurrentPage = -1;

	if (G_PendingPlayingMaps[_LayerName][0].count == 0) {
		P_SelectedMapI += 1;
		if (P_SelectedMapI == G_CurrentEvent[_LayerName].EditionsDetails[P_SelectedEdition].categories.count) {
			P_SelectedMapI = 0;
		}
		P_SelectedMapJ = 0;
		G_PendingPlayingMaps[_LayerName].removekey(0);
	}
	declare K_PendingPlayingMap NextMap = G_PendingPlayingMaps[_LayerName][0][0];
	G_PendingPlayingMaps[_LayerName][0].removekey(0);

	declare Boolean IsLastMap = G_PendingPlayingMaps[_LayerName].count == 1 && G_PendingPlayingMaps[_LayerName][0].count == 0;
	declare Boolean LockEventsUI = True;

	Private_InitLoadingMapDialogLoop(_LayerName, NextMap.MapName);

	wait(TitleControl.IsReady);
	TitleControl.PlayMap(NextMap.MapPath, "Scripts/Modes/ShootMania/ObstacleCampaign.Script.txt", """
	<mode_script_settings>
		<setting name="S_LockEventsUI" value="{{{LockEventsUI}}}" type="boolean" />
		<setting name="S_EventHandle" value="{{{G_LoadedEventHandle[_LayerName]}}}" type="text" />
		<setting name="S_EventEdition" value="{{{P_SelectedEdition}}}" type="integer" />
		<setting name="S_LastMap" value="{{{IsLastMap}}}" type="boolean" />
		<setting name="S_LayerNameUsedInTp" value="{{{_LayerName}}}" type="text" />
	</mode_script_settings>
	""");
}

Void Private_LoopEditionLoaded(Text _LayerName) {
	if (!(G_ContentLoading[_LayerName] && EventAPI::EventHasContent(G_LoadedEventHandle[_LayerName]))) return;

	G_CurrentEvent[_LayerName] = EventAPI::GetEvent(G_LoadedEventHandle[_LayerName]);
	G_UpdateContent[_LayerName] = True;
	G_ContentLoading[_LayerName] = False;
	declare Boolean P_CampaignLoading for Windows::GetPage(_LayerName) = False;
	P_CampaignLoading = False;
}

Void Private_UpdatePageCurrentEvent(Text _LayerName, CMlPage _P, Text _Handle, Integer _Edition) {
	declare Text P_SelectedEventHandle for _P = "";
	P_SelectedEventHandle = _Handle;
	declare Integer P_SelectedEdition for _P = -1;
	P_SelectedEdition = _Edition;
	declare EventAPITypes::K_Event P_CampaignEvent for _P;
	P_CampaignEvent = G_CurrentEvent[_LayerName];
}

Void Private_LoopUpdatePageContent(Text _LayerName, CMlPage _SideBarPage) {
	declare CMlPage CurrentPage <=> Windows::GetPage(_LayerName);

	if (!G_UpdateContent[_LayerName]) return;

	G_UpdateContent[_LayerName] = False;

	declare EventAPITypes::K_Event P_CampaignEvent for CurrentPage;
	P_CampaignEvent = G_CurrentEvent[_LayerName];

	// todo more graceful handling of this
	if (P_CampaignEvent.Editions.count == 0) {
		log("No editions available");
		return;
	}

	declare Integer SelectedEdition = -1;
	if (G_LoadedEdition[_LayerName] == -1) {
		// If it's the first load, we get the maximum event edition
		foreach (EditionId => _NotUsed in G_CurrentEvent[_LayerName].Editions) {
			if (EditionId > SelectedEdition) SelectedEdition = EditionId;
		}
	} else {
		// Else we just bind to the loaded edition index, because this would be
		// what the user selected in the page
		SelectedEdition = G_LoadedEdition[_LayerName];
	}

	declare Integer P_SelectedMapI for CurrentPage = -1;
	declare Integer P_SelectedMapJ for CurrentPage = -1;
	declare Integer SelectedMapI = -1;
	declare Integer SelectedMapJ = -1;
	declare Boolean Break = False;
	foreach (I => Category in P_CampaignEvent.EditionsDetails[SelectedEdition].categories) {
		SelectedMapI += 1;
		SelectedMapJ = 0;
		foreach (J => Map in Category.maps) {
			if (Map.personal_best >= 0) {
				SelectedMapJ += 1;
			} else {
				Break = True;
				break;
			}
		}
		if (Break) break;
	}
	P_SelectedMapI = ML::Max(SelectedMapI, 0);
	P_SelectedMapJ = ML::Max(SelectedMapJ, 0);

	declare Boolean P_TimesReloaded for CurrentPage;
	P_TimesReloaded = True;

	Private_UpdatePageCurrentEvent(_LayerName, CurrentPage, G_LoadedEventHandle[_LayerName], SelectedEdition);
	Private_UpdatePageCurrentEvent(_LayerName, _SideBarPage, G_LoadedEventHandle[_LayerName], SelectedEdition);

	// Fetches the downloaded maps for the current edition
	// flatten, sort by date asc
	// FIXME: why do we do this everytime?
	G_FileList[_LayerName] = DataFileMgr.Map_GetGameList("\\MEDIABROWSER_HiddenResources\\campaign\\", True, False, True).Id;
}

Void Private_LoopMapFilesList(Text _LayerName) {
	declare CMlPage CurrentPage <=> Windows::GetPage(_LayerName);

	if (!(DataFileMgr.TaskResults.existskey(G_FileList[_LayerName])
		&& DataFileMgr.TaskResults[G_FileList[_LayerName]].HasSucceeded))
	{
		return;
	}

	// associate Maps to their parent folder and update the manialink
	declare CMapInfo[][Integer] CampaignFiles;
	declare CTaskResult_MapList MapsList = (DataFileMgr.TaskResults[G_FileList[_LayerName]] as CTaskResult_MapList);

	foreach (File in MapsList.MapInfos) {
		declare Text Folder = TL::RegexMatch("""^MEDIABROWSER_HiddenResources\\campaign\\([0-9]+)\\""", File.Path, "i")[1];
		if (Folder == "") continue;
		declare Integer CampaignEdition = TL::ToInteger(Folder);
		if (!CampaignFiles.existskey(CampaignEdition))	CampaignFiles[CampaignEdition] = [];
		CampaignFiles[CampaignEdition].add(File);
	}

	declare Text[Text] P_MapsWithThumbnails for CurrentPage = [];

	foreach (EditionId => Maps in CampaignFiles) {
		if (!G_CampaignLocalMapsUids[_LayerName].existskey(EditionId)) G_CampaignLocalMapsUids[_LayerName][EditionId] = [];
		foreach (MapInfo in Maps) {
			G_CampaignLocalMapsUids[_LayerName][EditionId].add(K_LocalMapInfo {
				MapUid = MapInfo.MapUid,
				FileName = MapInfo.FileName
			});
			P_MapsWithThumbnails[MapInfo.MapUid] = "file://Thumbnails/MapUid/" ^ MapInfo.MapUid;
		}
	}

	DataFileMgr.TaskResult_Release(G_FileList[_LayerName]);
}

Void Private_LoopCheckEvents(Text _LayerName) {
	foreach (Event in PendingEvents) {
		if (Event.Type != CManiaAppEvent::EType::LayerCustomEvent
			|| Event.CustomEventLayer.AttachId != _LayerName)
		{
			continue;
		}

		declare CMlPage CurrentPage <=> Windows::GetPage(_LayerName);

		switch (Event.CustomEventType) {
			case "play_campaign": {
				declare Integer P_SelectedMapI for CurrentPage;
				declare Integer P_SelectedMapJ for CurrentPage;
				declare Integer P_SelectedEdition for CurrentPage;
				declare EventAPITypes::K_EventEditionContentCategory[] CampaignCategories = G_CurrentEvent[_LayerName].EditionsDetails[P_SelectedEdition].categories;

				// Initialize with the current category maps
				declare K_PendingPlayingMap[][] MapList = [[]];

				foreach (Map in CampaignCategories[P_SelectedMapI].maps.slice(P_SelectedMapJ, CampaignCategories[P_SelectedMapI].maps.count)) {
					declare Text Path = "https://sm.mania-exchange.com/maps/download/" ^ Map.mx_id;

					if (G_CampaignLocalMapsUids[_LayerName].existskey(P_SelectedEdition)) {
						foreach (FileMap in G_CampaignLocalMapsUids[_LayerName][P_SelectedEdition]) {
							if (FileMap.MapUid == Map.map_uid) {
								Path = FileMap.FileName;
								break;
							}
						}
					}

					MapList[0].add(K_PendingPlayingMap {
						MapName = Map.name,
						MapPath = Path
					});
				}

				foreach (Category in CampaignCategories.slice(P_SelectedMapI + 1, CampaignCategories.count)) {
					declare K_PendingPlayingMap[] CategoryMaps;

					foreach (Map in Category.maps) {
						declare Text Path = "https://sm.mania-exchange.com/maps/download/" ^ Map.mx_id;

						if (G_CampaignLocalMapsUids[_LayerName].existskey(P_SelectedEdition)) {
							foreach (FileMap in G_CampaignLocalMapsUids[_LayerName][P_SelectedEdition]) {
								if (FileMap.MapUid == Map.map_uid) {
									Path = FileMap.FileName;
									break;
								}
							}
						}

						CategoryMaps.add(K_PendingPlayingMap {
							MapName = Map.name,
							MapPath = Path
						});
					}

					MapList.add(CategoryMaps);
				}

				declare Integer[Text] ObsCampaignEvent_PendingPlayingMapsUpdate for LocalUser;
				G_PendingPlayingMaps[_LayerName] = MapList;
				ObsCampaignEvent_PendingPlayingMapsUpdate[_LayerName] = Now;
			}
			case "update_map_selection": {
				declare Integer P_SelectedMapI for CurrentPage;
				declare Integer P_SelectedMapJ for CurrentPage;

				P_SelectedMapI = TL::ToInteger(Event.CustomEventData[0]);
				P_SelectedMapJ = TL::ToInteger(Event.CustomEventData[1]);
			}
		}
	}
}

Void SelectEdition(Text _LayerName, Text _EventHandle, Integer _EditionId) {
	G_LoadedEdition[_LayerName] = _EditionId;
	G_LoadedEventHandle[_LayerName] = _EventHandle;
	G_ContentLoading[_LayerName] = True;

	declare Boolean Cached = EventAPI::LoadEdition(_EventHandle, _EditionId);
	if (!Cached) {
		declare Boolean P_CampaignLoading for Windows::GetPage(_LayerName) = False;
		P_CampaignLoading = True;
	}
}

Void Refresh(Text _LayerName) {
	Private_DebounceRefresh(_LayerName);
}

Void Loop(Text _LayerName, CMlPage _SideBarPage) {
	EventAPI::Loop();
	Private_LoadingMapDialogLoop(_LayerName);

	// Check if a player has finished a map
	Private_LoopPlayerFinish(_LayerName);

	// Check if the player is nexting a map
	// This is also triggered when the player clicks on "Play map"
	Private_LoopPlayerNextMap(_LayerName);

	// Check when the campaign edition loading has finished
	Private_LoopEditionLoaded(_LayerName);

	// Is set to True either in the above condition or in the Load() function or when the
	// player selects a cached edition
	Private_LoopUpdatePageContent(_LayerName, _SideBarPage);

	Private_LoopMapFilesList(_LayerName);

	Private_LoopCheckEvents(_LayerName);
}
