#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Windows.Script.txt"					as Windows
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/SubMenu/Index.Script.txt"				as SubMenu
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Play/Campaign/Campaign.Script.txt"	as Campaign
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Play/Servers/Index.Script.txt"		as Servers
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Play/Events/Index.Script.txt"			as Events
#Include "Libs/miltant/ObstacleV2/Titlepack/Dialogs/Explorer/Index.Script.txt"			as ExplorerDialog
#Include "Libs/miltant/ObstacleV2/Titlepack/Components/Index.Script.txt"				as Components
#Include "Libs/miltant/ObstacleV2/Titlepack/Components/DropDown.Script.txt"				as DropDown
#Include "Libs/miltant/ObstacleV2/Internationalization.Script.txt"						as Internationalization
#Include "TextLib" as TL


declare Boolean G_PendingStartLocalPlay;
declare Text G_PreferredTutorialLanguage;

Text GetName() {
	return "play";
}

Void StartLocalPlay() {
	if (G_PendingStartLocalPlay)
		G_PendingStartLocalPlay = !ExplorerDialog::StartLocalPlay();
}

Text[] BuildLanguageDropDown() {
	// English first, then lexicographic order
	declare Languages = Internationalization::GetLanguageList([
		"en", "de", "fr", "hr", "ru", "uk"
	]);

	foreach (ISO => Lang in Languages) { // I don't know how to access the first element xd
		G_PreferredTutorialLanguage = ISO;
		break;
	}

	declare DropDown = DropDown::Build(
		Languages,
		G_PreferredTutorialLanguage,
		Components::K_Options {
			Name = "Tutorial__Language_DropDown",
			X = -35.,
			Y = 62.33
		}
	);

	return [DropDown.XML, DropDown.Init, DropDown.MainLoop];
}

Void Load() {
	declare SubMenu::K_SubMenu[] SubMenus;

	declare SubMenu::K_SubMenu Campaign;
	Campaign.Name = Campaign::GetName();
	Campaign.Image = "campaign";
	SubMenus.add(Campaign);
	Campaign::Load();

	declare SubMenu::K_SubMenu Online;
	Online.Name = "online";
	Online.Image = "online";
	SubMenus.add(Online);
	Servers::Load();

	declare SubMenu::K_SubMenu Events;
	Events.Name = "events";
	Events.Image = "online";
	SubMenus.add(Events);
	Events::Load();

	declare SubMenu::K_SubMenu Local;
	Local.Name = "local";
	Local.Image = "local";
	Local.PreventDefault = True;
	SubMenus.add(Local);

	declare LanguageDropDown = BuildLanguageDropDown();
	declare SubMenu::K_SubMenu Tutorials;
	Tutorials.Name = "tutorials";
	Tutorials.Image = "tutorials";
	Tutorials.PreventDefault = True;
	Tutorials.DangerouslySetControls = LanguageDropDown[0];
	Tutorials.DangerouslySetControlsScriptInit = LanguageDropDown[1];
	Tutorials.DangerouslySetControlsScriptLoop = LanguageDropDown[2];
	SubMenus.add(Tutorials);


	declare Windows::K_Window Window;
	Window.Name = GetName();
	Window.Manialink = SubMenu::Build(SubMenus);
	Window.Animation = CUILayer::EUILayerAnimation::LeftSlow;

	Windows::CreateWindow(Window);
}

Void Loop() {
	Campaign::Loop();
	Servers::Loop();
	Events::Loop();

	foreach(Event in PendingEvents) {
		if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
			switch (Event.CustomEventType) {
				case "window_load": {
					if (Event.CustomEventData.count > 0) {
						switch (Event.CustomEventData[0]) {
							case "local": {
								ExplorerDialog::Load("Map");
								G_PendingStartLocalPlay = True;
							}
							case "tutorials": {
								wait(TitleControl.IsReady);
								declare Path = "MEDIABROWSER_HiddenResources\\tuto\\" ^ G_PreferredTutorialLanguage ^ ".Map.Gbx";
								TitleControl.PlayMap(Path, "Shootmania/Obstacle.Script.txt", "<mode_script_settings><setting name='S_EnableRecords' value='False' type='boolean'/></mode_script_settings>");			
							}
						}
					}
				}
				case "onChange__Tutorial__Language_DropDown": {
					if (Event.CustomEventData.count < 1          || // language not provided
						TL::Length(Event.CustomEventData[0]) < 2 || // too short
						TL::Length(Event.CustomEventData[0]) > 3    // too long
					) break;

					G_PreferredTutorialLanguage = Event.CustomEventData[0];
				}
			}
		}
	}

	StartLocalPlay();
}