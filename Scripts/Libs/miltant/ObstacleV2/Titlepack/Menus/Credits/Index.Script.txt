#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Windows.Script.txt"			as Windows
#Include "Libs/miltant/ObstacleV2/ManialinkLib.Script.txt"						as Styles
#Include "MathLib"																as ML
#Include "Libs/miltant/ObstacleV2/ScrollBar.Script.txt"	 		       			as Scroll

#Const C_ColumnWidth 101.33
#Const C_ColumnCount 3
#Const C_PosX -160.
#Const C_PosY 65.
#Const C_Width 320.
#Const C_Height 155.

#Struct K_Role {
	Text[] Names;
	Text Date;
}

#Struct K_Person {
	Text Name;
	K_Role[] Roles;
}

#Struct K_Group {
	Text Title;
	K_Person[] People;
}

Text GetName() {
	return "credits";
}

/**
 * @brief Get the credits of the project: members of the community who have worked on the obstacle titlepack
 * Instructions to contribute:
 * - Order the groups in the order you want them to be displayed (left to right).
 *   You might add empty groups to skip columns.
 * - Group people by their role in the project (ascending alphabetical order of the first role (arbitrary, cosmetic), than descending roles count).
 * - Order people by date of contribution when relevant (latest first) and then by name (alphabetical order).
 */
K_Group[] GetCredits() {
	return [
		K_Group {
			Title = "Brand Team",
			People = [
				K_Person { Name = "HasCrashed", Roles = [ K_Role { Names = ["Cinematic Artist"], Date = "2024" } ] },
				K_Person { Name = "ZenyoX", Roles = [ K_Role { Names = ["Creative director"], Date = "2023 - Present" } ] }
			]
		},
		K_Group {
			Title = "Mappers Winter 2024",
			People = [
				K_Person { Name = "Aurel" },
				K_Person { Name = "Blourk" },
				K_Person { Name = "Erkagon" },
				K_Person { Name = "HasCrashed" },
				K_Person { Name = "Hawken" },
				K_Person { Name = "Khass" },
				K_Person { Name = "Lagaffe" },
				K_Person { Name = "Lyyras" },
				K_Person { Name = "Ouhou" },
				K_Person { Name = "Pixou" },
				K_Person { Name = "UnMecRandom" },
				K_Person { Name = "SBVille" }
			]
		},
		K_Group {
			Title = "Campaign Team $w-$z Winter 2024",
			People = [
				K_Person { Name = "Elise", Roles = [ K_Role { Names = ["Champion Times"] } ] },
				K_Person { Name = "Kiwi", Roles = [ K_Role { Names = ["Champion Times"] } ] },
				K_Person { Name = "Pixou", Roles = [ K_Role { Names = ["Champion Times"] } ] },
				K_Person { Name = "SBVille", Roles = [ K_Role { Names = ["Champion Times"] } ] },
				K_Person { Name = "Aurel", Roles = [ K_Role { Names = ["Mappers Referent", "Reference Times"] } ] },
				K_Person { Name = "UnMecRandom", Roles = [ K_Role { Names = ["Mappers Referent", "Reference Times"] } ] },
				K_Person { Name = "Booby", Roles = [ K_Role { Names = ["Mappers Referent"] } ] },
				K_Person { Name = "Buggz", Roles = [ K_Role { Names = ["Mappers Referent"] } ] },
				K_Person { Name = "Khass", Roles = [ K_Role { Names = ["Mappers Referent"] } ] },
				K_Person { Name = "HawKen", Roles = [ K_Role { Names = ["Cinematic Artist"] } ] }
			]
		},
		K_Group {
			Title = "Development Team",
			People = [
				K_Person { Name = "HasCrashed", Roles = [ K_Role { Names = ["Dynamic Items"], Date = "2023 - Present" } ] },
				K_Person { Name = "Ahmad", Roles = [ K_Role { Names = ["Obstacle Developer"], Date = "2023 - Present" } ] },
				K_Person { Name = "MiLTanT", Roles = [ K_Role { Names = ["Obstacle Developer"], Date = "2021 - Present" } ] },
				K_Person { Name = "Smoke", Roles = [ K_Role { Names = ["Obstacle Developer"], Date = "2017 - 2021" } ] },
				K_Person { Name = "Gotagang", Roles = [ K_Role { Names = ["Obstacle Developer"], Date = "2017" } ] },
				K_Person { Name = "Steeffeen", Roles = [ K_Role { Names = ["Obstacle Developer"], Date = "2013 - 2017" } ] },
				K_Person { Name = "Nadeo", Roles = [ K_Role { Names = ["Game Developer"] } ] }
			]
		},
		K_Group {
			Title = "Mappers Summer 2023",
			People = [
				K_Person { Name = "Aurel" },
				K_Person { Name = "Batman" },
				K_Person { Name = "Buggz" },
				K_Person { Name = "Errorcat" },
				K_Person { Name = "HasCrashed" },
				K_Person { Name = "InnerPeace" },
				K_Person { Name = "James" },
				K_Person { Name = "Khass" },
				K_Person { Name = "Kiwi" },
				K_Person { Name = "Pixou" }
			]
		},
		K_Group {
			Title = "Campaign Team $w-$z Summer 2023",
			People = [
				K_Person { Name = "Coco", Roles = [ K_Role { Names = ["Cinematic Artist"] } ] },
				K_Person { Name = "Khass", Roles = [ K_Role { Names = ["Mappers Referent"] } ] },
				K_Person { Name = "Hippe", Roles = [ K_Role { Names = ["Reference Times"] } ] },
				K_Person { Name = "Kiwi", Roles = [ K_Role { Names = ["Reference Times"] } ] },
				K_Person { Name = "UnMecRandom", Roles = [ K_Role { Names = ["Map testing"] } ] }
			]
		},
		K_Group {
			Title = "Assets Creators",
			People = [
				K_Person { Name = "InnerPeace", Roles = [ K_Role { Names = ["Slide Items Set"], Date = "2024" } ] },
				K_Person { Name = "HasCrashed", Roles = [ K_Role { Names = ["Dynamic Items"], Date = "2023" } ] },
				K_Person { Name = "Aurel & InnerPeace", Roles = [ K_Role { Names = ["ColorPalette", "Missing Materials"], Date = "2023" } ] },
				K_Person { Name = "HasCrashed", Roles = [ K_Role { Names = ["Invisible Skin"], Date = "2022" } ] },
				K_Person { Name = "InnerPeace", Roles = [ K_Role { Names = ["Items Creator"], Date = "2019 - 2023" } ] },
				K_Person { Name = "HasCrashed", Roles = [ K_Role { Names = ["Textured Items", "NeonObjPack"], Date = "2017" } ] },
				K_Person { Name = "Elvestad", Roles = [ K_Role { Names = ["Titlepack image Artist"], Date = "2017" } ] },
				K_Person { Name = "Aurel", Roles = [ K_Role { Names = ["Items Creator"], Date = "2013 - Present" } ] },
				K_Person { Name = "Titishu", Roles = [ K_Role { Names = ["BlocksKit", "MetalKit"], Date = "2013" } ] }
			]
		},
		K_Group {
			Title = "Tutorials",
			People = [
				K_Person { Name = "Faker", Roles = [ K_Role { Names = ["Ukrainian texts"], Date = "2023" } ] },
				K_Person { Name = "Monk", Roles = [ K_Role { Names = ["Croatian texts"], Date = "2023" } ] },
				K_Person { Name = "Bert", Roles = [ K_Role { Names = ["Russian texts"], Date = "2023" } ] },
				K_Person { Name = "Aurel", Roles = [ K_Role { Names = ["Mapper", "Lead of translations", "English, French texts"], Date = "2022 - Present" } ] }
			]
		},
		K_Group {
			Title = "Texture Mods",
			People = [
				K_Person { Name = "Ziyx", Roles = [ K_Role { Names = ["Old Storm B0 Modified"] } ] },
				K_Person { Name = "$i(unknown)", Roles = [ K_Role { Names = ["Old Storm B2"] } ] },
				K_Person { Name = "OrecaShadow", Roles = [ K_Role { Names = ["Frozen Storm"] } ] },
				K_Person { Name = "Aurel", Roles = [ K_Role { Names = ["Lunar"] } ] },
				K_Person { Name = "Bervt", Roles = [ K_Role { Names = ["Snow Storm"] } ] }
			]
		}
	];
}

Text Build() {
	declare Text ML_Text = Styles::GetStyleSheet();
	declare TextOffsets = [C_ColumnWidth / 4. + 1.33, C_ColumnWidth / 4. * 3. + 2.];
	declare TextWidth = C_ColumnWidth / 2. - 1.667;
	declare Real[] ColumnOffsets;
	declare Real[] ColumnSizes;
	declare Groups = GetCredits();

	for (I, 0, C_ColumnCount - 1) {
		ColumnOffsets.add(I * C_ColumnWidth + I * 2. + 1.);
		ColumnSizes.add(0.);
	}

	foreach (IG => Group in Groups) {
		if (Group.People.count == 0)
			continue;

		declare ML_Group = """<label pos="55 -6" class="lato" size="96 10" text="{{{Group.Title}}}" halign="center" valign="center" textsize="4"/>""";
		declare CurAppendHeight = 12.;
		declare Col1Height = 0.;

		foreach (IP => Person in Group.People) {
			declare PosX = TextOffsets[IP % 2];
			declare ML_Person = """<label pos="{{{PosX}}} {{{-CurAppendHeight-6}}}" class="lato" size="{{{TextWidth}}} 5" text="{{{Person.Name}}}" halign="center" valign="center" textsize="4" textcolor="4E6D8C"/>""";
			
			declare PersonHeight = 7.;
			foreach (IR => Role in Person.Roles) {
				declare Text ML_Role = "";
				foreach (IR => Name in Role.Names) {
					PersonHeight += 5.;
					ML_Role ^= """
						<label pos="{{{PosX}}} {{{-CurAppendHeight-PersonHeight}}}" class="lato" size="{{{TextWidth}}} 4" text="{{{Name}}}" halign="center" valign="center" textsize="3"/>
					""";
				}
				if (Role.Date != "") {
					PersonHeight += 5.;
					ML_Role ^= """
						<label pos="{{{PosX}}} {{{-CurAppendHeight-PersonHeight}}}" class="lato" size="{{{TextWidth}}} 3" text="{{{Role.Date}}}" halign="center" valign="center" textsize="2" textcolor="4E6D8C"/>
					""";
				}
				ML_Person ^= ML_Role;
			}

			if (IP % 2 == 0) {
				Col1Height = PersonHeight;
			} else {
				CurAppendHeight += ML::Max(Col1Height, PersonHeight) + 3.;
				Col1Height = 0.;
			}

			ML_Group ^= ML_Person;
		}

		if (Col1Height > 0.) {
			CurAppendHeight += Col1Height + 3.;
		}

		declare GroupColumn = IG % C_ColumnCount;
		declare GroupHeight = CurAppendHeight + 5.;
		ML_Text ^= """
			<frame pos="{{{ColumnOffsets[GroupColumn]}}} {{{-ColumnSizes[GroupColumn]}}}" size="103.33 {{{GroupHeight}}}">
				{{{ML_Group}}}
				<quad pos="1" size="101.33 13" image="file://Media/Images/Obstacle/Credits/BHeader.png" keepratio="Fit"/>
				<quad size="103.33 {{{GroupHeight - 9.}}}" keepratio="Fit" pos="0 -9" style="Bgs1InRace" substyle="BgProgressBar" opacity="0.5"/>
			</frame>
		""";
		ColumnSizes[GroupColumn] = ColumnSizes[GroupColumn] + GroupHeight + 1.;
	}

	declare MaxColumnHeight = 0.;
	foreach (Col in ColumnSizes)
		MaxColumnHeight = ML::Max(MaxColumnHeight, Col);

	declare MinColumnHeight = MaxColumnHeight;
	declare MinColumnIndex = 0;
	foreach (I => Col in ColumnSizes)
		if (Col < MinColumnHeight) {
			MinColumnHeight = Col;
			MinColumnIndex = I;
		}

	declare DisclaimerHeight = 33.;

	if (MinColumnHeight + DisclaimerHeight > MaxColumnHeight)
		MaxColumnHeight = MinColumnHeight + DisclaimerHeight;

	ML_Text ^= """
		<label text="This page aims to list members of the community who have worked on the obstacle titlepack $w-$z feel like we forgot you? Let us know on Discord!"
			pos="{{{ColumnOffsets[MinColumnIndex] + 103.33/2.}}} {{{-MaxColumnHeight + DisclaimerHeight/2.}}}" size="99.33 {{{DisclaimerHeight - 2}}}"
			autonewline="1" class="lato" halign="center" valign="center" textsize="4"/>
		<quad size="103.33 {{{DisclaimerHeight}}}" pos="{{{ColumnOffsets[MinColumnIndex]}}} {{{-MaxColumnHeight + DisclaimerHeight}}}" style="Bgs1InRace" substyle="BgProgressBar" opacity="0.5"/>
	""";

	declare ScrollMax = ML::Max(0., MaxColumnHeight - C_Height + Groups.count / 3.);
	return """
		<frame pos="{{{C_PosX}}} {{{C_PosY}}}" scroll="1" scrollmax="0 {{{ScrollMax}}}" size="{{{C_Width}}} {{{C_Height}}}" id="Frame_Credits">
			{{{ML_Text}}}
			<quad scriptevents="1" size="{{{C_Width + 20.}}} {{{MaxColumnHeight + 99.}}}" pos="-10 10"/>
		</frame>
		{{{Scroll::GetScrollBarML(<C_PosX + C_Width - 8.5, C_PosY>, "Frame_Credits", "y")}}}
		<script><![CDATA[
			#Include "MathLib" as ML
			main() {
				{{{Scroll::GetInitFrames()}}}
				while (True) {
					{{{Scroll::GetLoop()}}}
					yield;
				}
			}
		]]></script>
	""";
}

Void Load() {
	declare Windows::K_Window Window;
	Window.Name = GetName();
	Window.Manialink = Build();
	Window.Animation = CUILayer::EUILayerAnimation::RightSlow;

	Windows::CreateWindow(Window);
}

Void Loop() {}