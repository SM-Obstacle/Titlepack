#Include "Libs/miltant/Nadeo_Fork/Common/Core/MenuLayers.Script.txt"	as Layers


#Struct K_ManialinkLayer {
	Text Name;
	Text Manialink;
}

#Struct K_Window {
	K_ManialinkLayer Layer;
	CUILayer::EUILayerAnimation Animation;
	K_ManialinkLayer[] SubLayers;
}

declare K_Window[Text] G_Windows;
declare Text G_Current_Window;
declare K_Window G_CurrentRealWindow;


Text Build(K_Window _Menu) {
	declare ML_Text = """
<manialink version="3" name="L_Window_{{{_Menu.Layer.Name}}}">
{{{_Menu.Layer.Manialink}}}
</manialink>
	""";

	return ML_Text;
}

Text Current() {
	return G_Current_Window;
}

Void CreateWindow(K_Window _Window) {
	if (!G_Windows.existskey(_Window.Layer.Name)) {
		G_Windows[_Window.Layer.Name] = _Window;
		declare LayerName = "L_Window_" ^ _Window.Layer.Name;
		declare Text MLText = Build(_Window);

		Layers::Create(LayerName, MLText);

		foreach (SubLayer in _Window.SubLayers) {
			Layers::Create(LayerName ^ "_SubLayer_" ^ SubLayer.Name, SubLayer.Manialink);
		}

		Layers::SetAnimationTypeIn(LayerName, _Window.Animation);
	}
}

K_Window GetWindow(Text _Name) {
	if (G_Windows.existskey(_Name))
		return G_Windows[_Name];
	return K_Window{};
}

CMlPage GetPage(Text _Name) {
	declare LayerName = "L_Window_" ^ _Name;
	declare Layer = Layers::Get(LayerName);
	if (Layer != Null)
		return Layer.LocalPage;
	
	return Null;
}

Void Unload() {
	Layers::Detach(G_Current_Window);
	foreach (SubLayer in G_CurrentRealWindow.SubLayers) {
		Layers::Detach(G_Current_Window ^ "_SubLayer_" ^ SubLayer.Name);
	}
	G_Current_Window = "";
}

Void Load(Text _Window) {
	Unload();

	if (G_Windows.existskey(_Window)) {
		declare LayerName = "L_Window_" ^ _Window;

		Layers::Attach(LayerName);

		G_Current_Window = LayerName;
		G_CurrentRealWindow = G_Windows[_Window];

		foreach (SubLayer in G_Windows[_Window].SubLayers) {
			Layers::Attach(LayerName ^ "_SubLayer_" ^ SubLayer.Name);
		}

		if (Layers::Exists("Obstacle_Background")) {
			switch (_Window) {
				case "home": {
					LayerCustomEvent(Layers::Get("Obstacle_Background"), "Titlepack_Background_Show", []);
				}
				default: {
					LayerCustomEvent(Layers::Get("Obstacle_Background"), "Titlepack_Background_Hide", []);
				}
			}
		}
	}
}


Void Loop() {
	foreach(Event in PendingEvents) {
		if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
			switch (Event.CustomEventType) {
				case "window_load": {
					// asserts that the window's name is provided
					// and that preventdefault is not set
					if (
						Event.CustomEventData.count > 0
					 && Event.CustomEventData.count == 1
					 || Event.CustomEventData[1] != "preventdefault"
					)
					{ Load(Event.CustomEventData[0]); }
				}
				case "window_unload" : {
					Unload();
				}
			}
		}
	}
}