Text GetStyleSheet() {
	return """<stylesheet>
		<style class="lato" textcolor="fff" textfont="light"/>
		<style class="lator" textcolor="fff" textfont="regular"/>
	</stylesheet>""";
}

Text GetDeclareGlobals() {
	return """//!
	declare Text[][Text] ManialinkLib_CurrentAnims;
	declare CMlControl ManialinkLib_LastMenu;
	Void ManialinkLib_AnimateCursor(CMlControl _Quad) {
		declare Duration = 200;
		if (_Quad.DataAttributeExists("anim-length"))
			Duration = TL::ToInteger(_Quad.DataAttributeGet("anim-length"));
		declare AnimEnd = "" ^ (Now + Duration);

		declare Targets = TL::Split(" ", _Quad.DataAttributeGet("target"));
		if (Targets.count > 0) {
			declare Cursor = _Quad.DataAttributeGet("anim-cursor");
			declare ParentFrame = _Quad.Parent;
			if (ParentFrame.Parent.ControlId == "Frame_Menus") {
				declare Target = (ParentFrame.GetFirstChild(Targets[0]) as CMlLabel);
				ManialinkLib_CurrentAnims["pos"] = [Cursor, AnimEnd, "" ^ ParentFrame.RelativePosition_V3.X];
				ManialinkLib_CurrentAnims["size"] = [Cursor, AnimEnd, "" ^ Target.ComputeWidth(Target.Value) + 10.];
			} else {
				ManialinkLib_CurrentAnims["pos"] = [Cursor, AnimEnd, "160"];
				ManialinkLib_CurrentAnims["size"] = [Cursor, AnimEnd, "0"];
			}
		}
	}
	Void ManialinkLib_OnClickMenu(CMlControl _Quad) {
		if ( _Quad.DataAttributeExists("anim-cursor")
		  && !( _Quad.Parent.DataAttributeExists("preventdefault")
		     && _Quad.Parent.DataAttributeGet("preventdefault") == "True" )
		) {
			ManialinkLib_LastMenu = _Quad;
			ManialinkLib_AnimateCursor(_Quad);
		}
	}
	Void ManialinkLib_MouseEvent(CMlScriptEvent _Event) {
		if (!_Event.Control.DataAttributeExists("target")) return;
		declare Frame_MenuItem = _Event.Control.Parent;

		declare Duration = 200;
		if (_Event.Control.DataAttributeExists("anim-length")) {
			Duration = TL::ToInteger(_Event.Control.DataAttributeGet("anim-length"));
		}

		declare AttributeAnim = "target-anim";
		declare EasingType = CAnimManager::EAnimManagerEasing::QuadIn;

		if (_Event.Type == CMlScriptEvent::Type::MouseOver) {
			declare Vec3[Text] ModulateColor_Target for _Event.Control;

			foreach (Id => Color in ModulateColor_Target) {
				declare Quad = (Frame_MenuItem.GetFirstChild(Id) as CMlQuad);
				Quad.ModulateColor = Color;
			}

			if (_Event.Control.DataAttributeExists("anim-cursor")) {
				ManialinkLib_AnimateCursor(_Event.Control);
			}
		} else { // MouseOut or MouseClick
			declare Vec3[Text] ModulateColor_Default for _Event.Control;

			foreach (Id => Color in ModulateColor_Default) {
				declare Quad = (Frame_MenuItem.GetFirstChild(Id) as CMlQuad);
				Quad.ModulateColor = Color;
			}

			if (_Event.Type == CMlScriptEvent::Type::MouseOut) {
				if (_Event.Control.DataAttributeExists("anim-cursor") && ManialinkLib_LastMenu != Null) {
					ManialinkLib_AnimateCursor(ManialinkLib_LastMenu);
				}
			} else { // MouseClick
				if (_Event.Control.DataAttributeExists("anim-cursor")) {
					ManialinkLib_AnimateCursor(_Event.Control);
				}
			}

			EasingType = CAnimManager::EAnimManagerEasing::QuadOut;
			AttributeAnim = "default-anim";
		}

		if (!_Event.Control.DataAttributeExists(AttributeAnim)) return;

		declare Targets = TL::Split(" ", _Event.Control.DataAttributeGet("target"));
		declare States = TL::RegexFind("<[^!>][^>]*>", _Event.Control.DataAttributeGet(AttributeAnim), "g");

		foreach (I => Target in Targets) {
			AnimMgr.Add(
				Frame_MenuItem.GetFirstChild(Target),
				States[I],
				Duration,
				EasingType
			);
		}
	}

	Vec3[Text] ManialinkLib_ParseModulateColor (Text[] _Targets, Text _XML) {
		declare Tags = TL::RegexFind("<[^!>][^>]*>", _XML, "g");
		declare Vec3[Text] Results;
		foreach (I => Tag in Tags) {
			declare Match = TL::RegexMatch("modulatecolor=\"([abcdef\\d]{1,8})\"", Tag, "i");
			if (Match.count == 2 && TL::Length(Match[1]) > 0) {
				Results[_Targets[I]] = CL::HexToRgb(Match[1]);
			}
		}
		return Results;
	}
	""";
}

Text GetInitFrameMenus() {
	return """//!
	declare Frame_Menus = (Page.GetFirstChild("Frame_Menus") as CMlFrame);
	foreach (MenuContainer in Frame_Menus.Controls) {
		declare Frame_MenuItem = (MenuContainer as CMlFrame);
		declare Quad_Trigger = (Frame_MenuItem.GetFirstChild("Quad_Trigger") as CMlQuad);

		if (Quad_Trigger == Null) continue;

		if (Frame_MenuItem.DataAttributeExists("name")) {
			declare Text ItemId for Quad_Trigger;
			ItemId = Frame_MenuItem.DataAttributeGet("name");
		}
		declare Targets = TL::Split(" ", Quad_Trigger.DataAttributeGet("target"));

		if (Quad_Trigger.DataAttributeExists("default-anim")) {
			declare Vec3[Text] ModulateColor_Default for Quad_Trigger;
			ModulateColor_Default = ManialinkLib_ParseModulateColor(Targets, Quad_Trigger.DataAttributeGet("default-anim"));
		}

		if (Quad_Trigger.DataAttributeExists("target-anim")) {
			declare Vec3[Text] ModulateColor_Target for Quad_Trigger;
			ModulateColor_Target = ManialinkLib_ParseModulateColor(Targets, Quad_Trigger.DataAttributeGet("target-anim"));
		}
	}""";
}

Text GetEventLoopActiveItem(Text _EventName) {
	declare ML = """switch(Event.Type) {""";
	if (_EventName != "") {	
		ML ^= """//!
		case CMlScriptEvent::Type::MouseClick: {
			declare Text Id;
			if (Event.Control.DataAttributeExists("name")) {
				Id = Event.Control.DataAttributeGet("name");
			} else {
				declare Text ItemId for Event.Control;
				Id = ItemId;
			}
			if (Id != "") {
				if ( Event.Control.DataAttributeExists("preventdefault")
				  && Event.Control.DataAttributeGet("preventdefault") == "True"
				)
					SendCustomEvent("{{{_EventName}}}", [Id, "preventdefault"]);
				else {
					SendCustomEvent("{{{_EventName}}}", [Id]);
					Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowMenu, 0, 0.0);
				}
			}
			ManialinkLib_MouseEvent(Event);
			ManialinkLib_OnClickMenu(Event.Control);
		}
""";
	}

	ML ^=  """//!
		case CMlScriptEvent::Type::MouseOver: {
			ManialinkLib_MouseEvent(Event);
		}

		case CMlScriptEvent::Type::MouseOut: {
			ManialinkLib_MouseEvent(Event);
		}
	}""";

	return ML;
}

Text GetEventLoopActiveItem() {
	return GetEventLoopActiveItem("menu_item_click");
}

Text GetLoopActiveItem() {
	return """//!
	declare Text[] ToRemove;
	foreach (Type => Anim in ManialinkLib_CurrentAnims) {
		declare Target = Page.GetFirstChild(Anim[0]);
		declare AnimEnd = TL::ToInteger(Anim[1]);
		declare Value = TL::ToReal(Anim[2]);

		if (AnimEnd <= Now) {
			ToRemove.add(Type);
			switch (Type) {
				case "pos": {
					Target.RelativePosition_V3.X = Value;
				}
				case "size": {
					Target.Size.X = Value;
				}
			}
			continue;
		}
		declare Factor = ML::Clamp((AnimEnd - Now) / 15., 1., 40.);
		switch (Type) {
			case "pos": {
				Target.RelativePosition_V3.X += (Value - Target.RelativePosition_V3.X) / Factor;
			}
			case "size": {
				Target.Size.X += (Value - Target.Size.X) / Factor;
			}
		}
	}
	foreach (Key in ToRemove) {
		ManialinkLib_CurrentAnims.removekey(Key);
	}
	foreach(Event in PendingEvents) {
		{{{GetEventLoopActiveItem()}}}
	}""";
}