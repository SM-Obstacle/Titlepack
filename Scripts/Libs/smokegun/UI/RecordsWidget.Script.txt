#Include "TextLib" as TL
#Include "Libs/miltant/Nadeo_Fork/CustomUI.Script.txt" as CustomUI
#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/smokegun/Constants.Script.txt" as Constants

#Include "Libs/ahmad3/ErrMgr.Script.txt" as ErrMgr
#Include "Libs/ahmad3/Ban.Script.txt" as Ban

#Include "Libs/ahmad3/UI/CachedRequests.Script.txt" as CachReqs
#Include "Libs/ahmad3/EventAPI/InGame.Script.txt" as Events
#Include "Libs/ahmad3/ErrorReport.Script.txt" as ErrorReport
#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr

/*********************************************
    CONSTANTS
*********************************************/

#Const  Version     "2024-07-16"
#Const  ScriptName  "RecordsWidget.Script.txt"

#Const C_Ev_LocalPlayerTime "recordswidget:localplayertime"

Void Yield() {
    foreach (Event in UIManager.PendingEvents) {
        if (
            Event.Type != CUIConfigEvent::EType::OnLayerCustomEvent
            || Event.CustomEventType != C_Ev_LocalPlayerTime
        ) {
            continue;
        }

        declare Integer TimeInLb = TL::ToInteger(Event.CustomEventData[0]);

        declare CSmPlayer Player <=> GetPlayer(Event.UI);
        Player::setTimeInLb(Player, TimeInLb);
    }
}

Text Private_GetSmallRecords() {
    declare Real QuadHeight = 67.;
    declare Text LabelEvent;
    declare Real RecordsFrameY = -8.;

    if (Events::HasEventLoaded()) {
        declare CurrentEdition = Events::CurrentEdition();
        declare Text EventName = CurrentEdition.name;
        if (TL::Length(CurrentEdition.subtitle) > 0) {
            EventName ^= " " ^ CurrentEdition.subtitle;
        }

        QuadHeight = 71.;
        LabelEvent = """
<label pos="0 -7.25" size="80 5" text="on {{{EventName}}}" style="TextValueSmall" textsize="1" halign="center" textfont="OswaldMono" maxline="1" valign="top" textemboss="1"/>
""";
        RecordsFrameY = -12.;
    }

    CustomUI::Add("Frame_Small_Records", <139., 41.5>, <44., 67.>);
    return """
<frame id="Frame_Small_Records" class="LibCustomUI_Module">
    <frame pos="139 75">
        <frame id="Frame_Background" halign="center" valign="center2" z-index="-1">
            <quad z-index="-1" size="44 {{{QuadHeight}}}" style="BgRaceScore2" substyle="BgCardPlayer" halign="center" valign="top" scriptevents="1"/>
            <label pos="0 -1" size="40 5" text="Records" style="TextTitle3" textsize="4" halign="center" textfont="OswaldMono" maxline="1" valign="top" textemboss="1"/>
            {{{LabelEvent}}}
        </frame>
        <frame id="Frame_Records" pos="0 {{{RecordsFrameY}}}">
            <frameinstance modelid="small_record" pos="0 0" id="record0" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -4" id="record1" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -8" id="record2" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -12" id="record3" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -16" id="record4" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -20" id="record5" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -24" id="record6" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -28" id="record7" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -32" id="record8" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -36" id="record9" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -40" id="record10" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -44" id="record11" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -48" id="record12" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -52" id="record13" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -56" id="record14" hidden="1"/>
        </frame>
        <frame id="Frame_Error" hidden="1" pos="0 -{{{QuadHeight / 2}}}">
            <label text="Error" textcolor="f20" halign="center" valign="center2" />
        </frame>
    </frame>
    <framemodel id="small_record">
        <label id="rank" pos="-20 0" size="6 4" halign="left" valign="center2" style="TextCardSmallScores2" textsize="1" text="1." textfont="OswaldMono"/>
        <label id="name" pos="-14 0" size="20 4" halign="left" valign="center2" textsize="1" text="mon super pseudo" textfont="Oswald"/>
        <label id="time" pos="20 0" size="14 4" halign="right" valign="center2" style="TextTitle2" textsize="1" text="00:00:01" textfont="OswaldMono"/>
        <quad halign="center" valign="center" size="44 3.5" id="background" bgcolor="f20f2022" hidden="1" />
    </framemodel>
</frame>
    """;
}

Text GetLayer() {
    return """
<manialink version="3" name="Obstacle:RecordsWidget">
<frame>
    {{{Private_GetSmallRecords()}}}
</frame>
<script><!--
    #Include "TextLib" as TL

    #Struct K_RankedRecord {
        Integer rank;
        Text login;
        Text nickname;
        Integer time;
    }
    
    #Struct K_Response {
        K_RankedRecord[] response;
    }

    {{{ReqMgr::ML_Preproc("ReqMgr")}}}
    {{{Ban::ML_Preproc("BanMgr")}}}
    {{{ErrMgr::ML_Preproc("ErrMgr", "BanMgr")}}}

    {{{ReqMgr::ML_Content("ReqMgr")}}}
    {{{Ban::ML_Content("BanMgr")}}}
    {{{ErrMgr::ML_Content("ErrMgr", "TL", "BanMgr")}}}
    {{{ErrorReport::ML_Content("ErrReport")}}}

    declare ReqMgr_K_GetReqId G_ReqId;
    declare ReqMgr_K_GetRequest G_Req;

    declare CMlFrame G_Frame_Records;
    declare CMlFrame G_Frame_Widget;
    declare CMlFrame G_Frame_Error;

    declare CSmPlayer G_LocalPlayer;

    Void UpdateUI(K_Response _Response) {
        declare netread Boolean Net_HasWrongLbLine for G_LocalPlayer = False;
        declare HasLocalPlayerFinished = False;
        declare Integer LocalPlayerTime = -1;
        foreach (Idx => Control in G_Frame_Records.Controls) {
            declare frame <=> (Control as CMlFrame);
            declare rankLabel <=> (frame.GetFirstChild("rank") as CMlLabel);
            declare nameLabel <=> (frame.GetFirstChild("name") as CMlLabel);
            declare timeLabel <=> (frame.GetFirstChild("time") as CMlLabel);
            declare bgQuad <=> (frame.GetFirstChild("background") as CMlQuad);
            bgQuad.Hide();

            if (_Response.response.existskey(Idx)) {
                rankLabel.SetText(""^_Response.response[Idx].rank);
                nameLabel.SetText(_Response.response[Idx].nickname);
                timeLabel.SetText(TL::TimeToText(_Response.response[Idx].time, True));

                if (_Response.response[Idx].login == G_LocalPlayer.User.Login) {
                    HasLocalPlayerFinished = True;
                    LocalPlayerTime = _Response.response[Idx].time;
                    if (Net_HasWrongLbLine) bgQuad.Show();
                }

                Control.Show();
            } else if (!HasLocalPlayerFinished && Idx == G_Frame_Records.Controls.count - 1) {
                rankLabel.SetText("");
                nameLabel.SetText(G_LocalPlayer.User.Name);
                timeLabel.SetText("--:--:--");
                Control.Show();
                if (Net_HasWrongLbLine) bgQuad.Show();
            } else {
                Control.Hide();
            }
        }

        if (HasLocalPlayerFinished && G_LocalPlayer == InputPlayer) {
            SendCustomEvent({{{dump(C_Ev_LocalPlayerTime)}}}, [LocalPlayerTime ^ ""]);
        }
    }

    Void UpdateRecords(Text _Login) {
        if (ReqMgr_IsPending(G_ReqId) && !ReqMgr_IsWaiting(G_ReqId)) {
            Http.Destroy(ReqMgr_GetReq(G_ReqId));
        }

        declare Text Params = "?mapId=" ^ Map.Id ^ "&playerId=" ^ _Login;
        declare Text Route = {{{dump(Events::PrefixRoute("overview"))}}} ^ Params;

        G_Req = ReqMgr_K_GetRequest {
            Route = Route,
            UseCache = False,
            Headers = ReqMgr_DefaultHeaders()
        };

        G_ReqId = ReqMgr_Make(G_Req);
    }

    Void LoopUpdateRecords() {
        if (!ReqMgr_IsPending(G_ReqId)) return;

        if (ReqMgr_IsWaiting(G_ReqId)) {
            G_ReqId = ReqMgr_MakePending(G_ReqId);
            if (ReqMgr_IsWaiting(G_ReqId)) return;
        }

        declare CHttpRequest Req <=> ReqMgr_GetReq(G_ReqId);
        if (!Req.IsCompleted) return;
        G_ReqId = ReqMgr_NullGetReq();

        if (Req.StatusCode == 200) {
            declare K_Response Res;
            Res.fromjson(Req.Result);
            UpdateUI(Res);
            G_Frame_Error.Hide();
            G_Frame_Records.Show();
        } else {
            declare ErrMgr_K_Error Err = ErrMgr_Handle(Req.StatusCode, Req.Result);
            if (Err.Err.type != ErrMgr_C_Err_Maintenance) {
                ErrReport_ReportGet(G_Req.Route, Req.StatusCode, Req.Result);
            }
            G_Frame_Error.Show();
            G_Frame_Records.Hide();
        }

        Http.Destroy(Req);
    }

    {{{CachReqs::ML_CacheUpdatedFunc("InitCacheUpdater", "CachedReqsSent")}}}

    main() {
        {{{CustomUI::InjectMLInit()}}}
        wait(InputPlayer != Null && Page != Null);

        G_ReqId = ReqMgr_NullGetReq();

        InitCacheUpdater();

        declare LastPlayerLogin = "";

        G_Frame_Widget <=> (Page.GetFirstChild("Frame_Small_Records") as CMlFrame);
        G_Frame_Records <=> (G_Frame_Widget.GetFirstChild("Frame_Records") as CMlFrame);
        G_Frame_Error <=> (Page.GetFirstChild("Frame_Error") as CMlFrame);
        declare netread Net_RecordsUpdated for Teams[0] = -1;
        declare LastUpdate = Net_RecordsUpdated;

        while (True) {
            yield;

            G_LocalPlayer <=> InputPlayer;
            if (GUIPlayer != Null) G_LocalPlayer <=> GUIPlayer;
            if (G_LocalPlayer == Null) continue;

            if (G_LocalPlayer.User.Login != LastPlayerLogin) {
                LastUpdate = -1;
                LastPlayerLogin = G_LocalPlayer.User.Login;
            }

            if ((Net_RecordsUpdated != LastUpdate || CachedReqsSent()) && G_Frame_Widget.Visible) {
                LastUpdate = Net_RecordsUpdated;
                UpdateRecords(G_LocalPlayer.User.Login);
            }

            LoopUpdateRecords();

            foreach (Event in PendingEvents) {
               switch (Event.Type) {
                    case CMlScriptEvent::Type::MouseClick: {
                        OpenLink({{{dump(Constants::C_WebsiteUrl ^ "/" ^ Events::PrefixRoute("map/"))}}} ^ Map.Id, CMlScript::LinkType::ExternalBrowser);
                    }
                }
            }

            {{{CustomUI::InjectMLLoop()}}}
        }
    }
--></script>
</manialink>
    """;
}
