#Include "Libs/ahmad3/EventAPI/Impl.Script.txt" as EventAPI
#Include "Libs/ahmad3/EventAPI/Types.Script.txt" as Types

declare Types::K_EventEditionDetails G_Event;
declare Boolean G_EventLoaded;
declare Boolean G_Failed;
declare Text G_FailReason;

declare Text G_EventHandle;
declare Integer G_EventEdition;

/**
 * Used to force the non-use of an event, because of a failure somewhere.
 */
declare Boolean G_ForceClear;
declare Text G_LastEventHandle;
declare Integer G_LastEventEdition;

Boolean EventHasCurrentMap(Text _EventHandle, Integer _EventEdition, Boolean _IncludeOriginals) {
    if (!EventAPI::EventHasContent(_EventHandle)
        || !EventAPI::GetEvent(_EventHandle).EditionsDetails.existskey(_EventEdition))
    {
        return False;
    }

    declare Types::K_EventEditionDetails ThisEvent =
        EventAPI::GetEvent(_EventHandle).EditionsDetails[_EventEdition];

    foreach (Category in ThisEvent.categories) {
        foreach (CatMap in Category.maps) {
            if (CatMap.map_uid == "" ^ Map.Id) {
                return True;
            }
        }
    }

    foreach (MapUid in ThisEvent.original_map_uids) {
        if (MapUid == Map.Id ^ "") {
            return True;
        }
    }

    return False;
}

Boolean EventHasCurrentMap(Text _EventHandle, Integer _EventEdition) {
    return EventHasCurrentMap(_EventHandle, _EventEdition, True);
}

Void LoadEdition() {
    // We first load the event
    EventAPI::LoadEvent(G_EventHandle);
    while (True) {
        yield;
        EventAPI::Loop();
        if (EventAPI::GetEvents().existskey(G_EventHandle) || EventAPI::HasFailed()) {
            break;
        }
    }

    // Then we load the edition
    EventAPI::LoadEdition(G_EventHandle, G_EventEdition);
    while (True) {
        yield;
        EventAPI::Loop();
        if (EventAPI::EventHasContent(G_EventHandle) || EventAPI::HasFailed()) {
            break;
        }
    }

    G_Failed = False;
    G_EventLoaded = False;
    if (EventAPI::HasFailed()) {
        G_Failed = True;
        G_FailReason = EventAPI::GetFailReason();
    } else if (!EventHasCurrentMap(G_EventHandle, G_EventEdition, False)) {
        G_Failed = True;
        G_FailReason = "The map isn't in the event";
    } else {
        G_Event = EventAPI::GetEvent(G_EventHandle).EditionsDetails[G_EventEdition];
        if (G_Event.expired) {
            G_Failed = True;
            G_FailReason = "The event has expired";
        } else {
            G_EventLoaded = True;
        }
    }
}

Text GetEventHandle() {
    return G_EventHandle;
}
Void SetEventHandle(Text _EventHandle) {
    G_EventHandle = _EventHandle;
}

Integer GetEventEdition() {
    return G_EventEdition;
}
Void SetEventEdition(Integer _EventEdition) {
    G_EventEdition = _EventEdition;
}

Boolean HasForcedClear() {
    return G_ForceClear;
}

Void ClearSelectedEvent(Boolean _Force) {
    G_ForceClear = _Force;
    G_LastEventHandle = G_EventHandle;
    G_LastEventEdition = G_EventEdition;
    G_EventHandle = "";
    G_EventEdition = -1;
    G_EventLoaded = False;
}

Void ClearSelectedEvent() {
    ClearSelectedEvent(False);
}

Types::K_EventEditionDetails CurrentEdition() {
    return G_Event;
}

Boolean HasEventLoaded() {
    return G_EventLoaded;
}

Text PrefixRoute(Text _Rest) {
    if (HasEventLoaded()) {
        return "event/" ^ G_EventHandle ^ "/" ^ G_EventEdition ^ "/" ^ _Rest;
    }
    return _Rest;
}

Boolean HasFailed() {
    return G_Failed;
}
Text GetFailReason() {
    return G_FailReason;
}

Text GetLastEventHandle() {
    return G_LastEventHandle;
}
Integer GetLastEventEdition() {
    return G_LastEventEdition;
}

Void Init() {
    G_EventLoaded = False;
    G_LastEventHandle = "";
    G_LastEventEdition = -1;
    G_ForceClear = False;
    EventAPI::Init();

    if (G_EventHandle != "" && G_EventEdition != -1) {
        LoadEdition();
    }
}

Types::K_Event[Text] GetEvents() {
    return EventAPI::GetEvents();
}

Boolean Loop() {
    return EventAPI::Loop();
}