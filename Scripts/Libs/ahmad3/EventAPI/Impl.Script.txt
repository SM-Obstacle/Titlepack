#Include "TextLib" as TL

#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr
#Include "Libs/smokegun/Constants.Script.txt" as C
#Include "Libs/ahmad3/EventAPI/Types.Script.txt" as Types
#Include "Libs/ahmad3/ErrMgr.Script.txt" as Err

#Struct K_RequestAttr {
    Integer Type;
    Text Route;
    ReqMgr::K_GetReqId Request;
}

#Struct K_PendingEventHandleReq {
    Ident ReqId;
    Text Handle;
    Types::K_EventEdition[] EventEditions;
}

declare CUser G_LocalUser;

declare Integer G_LastReqId;

declare Text[] G_PendingEvents;
declare Integer[Text] G_PendingLoadingEditions;
declare K_RequestAttr[Integer] G_PendingRequests;
declare Types::K_Event[Text] G_Events;

declare Boolean G_HasFailed;
declare Err::K_Error G_Failure;

declare Boolean G_EventRequestLoaded;
declare K_PendingEventHandleReq[] G_PendingEventHandleReqs;

Boolean HasFailed() {
    return G_HasFailed;
}

Text GetFailReason() {
    return G_Failure.Err.message;
}

Boolean EventHandleIsLoading(Text _EventHandle) {
    return G_PendingEvents.exists(_EventHandle);
}

Boolean EventEditionIsLoading(Text _EventHandle, Integer _EventEdition) {
    return EventHandleIsLoading(_EventHandle)
        || G_PendingLoadingEditions.existskey(_EventHandle)
            && G_PendingLoadingEditions[_EventHandle] == _EventEdition;
}

Boolean IsEventEditionLoaded(Text _EventHandle, Integer _EditionId) {
    return G_Events.existskey(_EventHandle) && G_Events[_EventHandle].EditionsDetails.existskey(_EditionId);
}

Boolean EventHasContent(Text _EventHandle) {
    if (!G_Events.existskey(_EventHandle) || G_PendingEvents.exists(_EventHandle)) return False;
    declare Types::K_Event Event = G_Events[_EventHandle];
    // If this event is not pending, at least count its editions amount to be sure it's fully loaded
    return !G_HasFailed && Event.Editions.count > 0 && Event.EditionsDetails.count > 0;
}

Types::K_Event[Text] GetEvents() {
    return G_Events;
}

Types::K_Event GetEvent(Text _EventHandle) {
    return G_Events[_EventHandle];
}

Boolean Private_CheckErr(CHttpRequest _Req) {
    if (_Req.StatusCode == 200) return False;
    if (G_HasFailed) return True;

    G_Failure = Err::Handle(_Req.StatusCode, _Req.Result);

    G_HasFailed = True;
    return True;
}

Text[Text] Private_Headers() {
    if (G_LocalUser == Null) {
        return ReqMgr::DefaultHeaders();
    }
    return ReqMgr::DefaultHeadersWith(ReqMgr::AuthHeaders(G_LocalUser));
}

Void Private_InitRequest(Text _Route, Integer _Type) {
    G_LastReqId += 1;
    G_PendingRequests[G_LastReqId] = K_RequestAttr {
        Request = ReqMgr::Make(ReqMgr::K_GetRequest {
            Route = _Route,
            Headers = Private_Headers()
        }),
        Route = _Route,
        Type = _Type
    };
}

Void Private_InitRequest(Text _Route, Integer _Type, Text _EventHandle) {
    Private_InitRequest(_Route, _Type);
    if (!G_PendingEvents.exists(_EventHandle)) G_PendingEvents.add(_EventHandle);
}

Boolean LoadEdition(Text _EventHandle, Integer _EventEdition, Boolean _Lazy) {
    // If the event hasn't been fetched yet, then we put it with the requested edition
    // in the pending list
    if (!G_Events.existskey(_EventHandle) || !G_Events[_EventHandle].Editions.existskey(_EventEdition)) {
        G_PendingLoadingEditions[_EventHandle] = _EventEdition;
        return False;
    }

    // We already loaded the edition for this event, so it doesn't require to refetch the API
    if (_Lazy && G_Events[_EventHandle].EditionsDetails.existskey(_EventEdition)) {
        return True;
    }

    Private_InitRequest("event/" ^ _EventHandle ^ "/" ^ _EventEdition, C::C_Request_EventHandleEdition, _EventHandle);
    return False;
}

Boolean LoadEdition(Text _EventHandle, Integer _EventEdition) {
    return LoadEdition(_EventHandle, _EventEdition, True);
}

Void LoadEvent(Text _EventHandle) {
    Private_InitRequest("event/" ^ _EventHandle, C::C_Request_EventHandle, _EventHandle);
}

Void Private_InitEventEditions(Types::K_EventResponse[] _Events) {
    foreach (Event in _Events) {
        Private_InitRequest("event/" ^ Event.handle, C::C_Request_EventHandle, Event.handle);
        // This equals -1 if there's no edition registered yet
        declare Integer EventEdition = Event.last_edition_id;
        if (G_PendingLoadingEditions.existskey(Event.handle)) {
            EventEdition = G_PendingLoadingEditions[Event.handle];
            G_PendingLoadingEditions.removekey(Event.handle);
        }
        if (EventEdition > 0) {
            Private_InitRequest("event/" ^ Event.handle ^ "/" ^ EventEdition, C::C_Request_EventHandleEdition, Event.handle);
        }
        G_Events[Event.handle] = Types::K_Event {
            Event = Event,
            Editions = [],
            EditionsDetails = []
        };
    }
}

Boolean HasAnyEventLoading() {
    return !G_EventRequestLoaded || G_PendingEvents.count > 0;
}

Text Private_IncludeExpiredToQueryParam(Boolean _IncludeExpired) {
    if (_IncludeExpired) {
        return "include_expired=true";
    }
    return "include_expired=false";
}

Void Init(Boolean _IncludeExpired) {
    G_LocalUser = Null;
    G_HasFailed = False;
    G_Events = [];
    G_PendingEvents = [];
    G_PendingLoadingEditions = [];
    G_PendingRequests = [];
    G_EventRequestLoaded = False;
    Private_InitRequest("event?" ^ Private_IncludeExpiredToQueryParam(_IncludeExpired), C::C_Request_Event);
}

Void Init() {
    Init(False);
}

Void SetLocalUser(CUser _User) {
    G_LocalUser <=> _User;
}

/**
 * Returns True if a new event edition was loaded with its details, False otherwise.
 */
Boolean Loop() {
    declare Integer[] ReqToDelete;
    declare Text[] PendingEventsToDelete;
    declare Boolean EventEditionLoaded = False;

    foreach (Idx => ReqAttr in G_PendingRequests) {
        if (ReqMgr::IsWaiting(ReqAttr.Request)) {
            G_PendingRequests[Idx].Request = ReqMgr::MakePending(ReqAttr.Request);
        } else {
            declare CHttpRequest Request <=> ReqMgr::GetReq(ReqAttr.Request);
            if (Request.IsCompleted) {
                ReqToDelete.add(Idx);

                if (!Private_CheckErr(Request)) {
                    switch (ReqAttr.Type) {
                        // The /event request
                        case C::C_Request_Event: {
                            declare Types::K_EventResponse[] Events;
                            Events.fromjson(Request.Result);
                            Private_InitEventEditions(Events);
                            G_EventRequestLoaded = True;
                        }

                        // The /event/<handle> request
                        case C::C_Request_EventHandle: {
                            declare Types::K_EventEdition[] EventEditions;
                            EventEditions.fromjson(Request.Result);

                            declare Text Handle = TL::Split("/", ReqAttr.Route)[1];

                            G_PendingEventHandleReqs.add(K_PendingEventHandleReq {
                                ReqId = Request.Id,
                                Handle = Handle,
                                EventEditions = EventEditions
                            });
                        }

                        // The /event/<handle>/<edition> request
                        case C::C_Request_EventHandleEdition: {
                            declare Types::K_EventEditionDetails EventEditionDetails;
                            EventEditionDetails.fromjson(Request.Result);

                            declare Text[] Splits = TL::Split("/", ReqAttr.Route);
                            declare Text Handle = Splits[1];
                            declare Integer EditionId = TL::ToInteger(Splits[2]);
                            G_Events[Handle].EditionsDetails[EditionId] = EventEditionDetails;
                            PendingEventsToDelete.add(Handle);

                            EventEditionLoaded = True;
                        }
                    }
                }
            }
        }
    }

    if (G_EventRequestLoaded) {
        foreach (Req in G_PendingEventHandleReqs) {
            // If this happens, it's because the request to `/event` didn't return
            // an event with the `Handle` event handle. This means that the event is
            // not playable, because it doesn't exist, has expired, or is not yet released.
            if (!G_Events.existskey(Req.Handle)) {
                PendingEventsToDelete.add(Req.Handle);
                G_HasFailed = True;
                G_Failure.Err.message = "Event was not found or has expired (handle: `" ^ Req.Handle ^ "`)";
                continue;
            }

            foreach (Edition in Req.EventEditions) {
                G_Events[Req.Handle].Editions[Edition.id] = Edition;
            }
            PendingEventsToDelete.add(Req.Handle);
        }

        G_PendingEventHandleReqs.clear();
    }

    foreach (ReqId in ReqToDelete) {
        if (!ReqMgr::IsWaiting(G_PendingRequests[ReqId].Request)) {
            Http.Destroy(ReqMgr::GetReq(G_PendingRequests[ReqId].Request));
        }
        G_PendingRequests.removekey(ReqId);
    }

    foreach (PendingEventToDel in PendingEventsToDelete) {
        G_PendingEvents.remove(PendingEventToDel);
    }

    return EventEditionLoaded;
}