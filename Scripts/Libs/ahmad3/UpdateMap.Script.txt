/************************************************
 *   Obstacle Library
 *   Author:     ahmad3
 *
 *   Util functions used to make the request to the API to update the map info
 ***********************************************/

#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr
#Include "Libs/ahmad3/ErrMgr.Script.txt" as ErrMgr
#Include "Libs/ahmad3/ErrorReport.Script.txt" as ErrReport

#Include "Libs/ahmad3/InGameDialog.Script.txt" as Dialogs

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-08-11"
#Const ScriptName "Libs/ahmad3/UpdateMap.Script.txt"

/*********************************************
  TYPES
 *********************************************/

#Struct K_UpdatePlayerBody {
    Text login;
    Text name;
    Text zone_path;
}

#Struct K_MedalTimes {
    Integer bronze_time;
    Integer silver_time;
    Integer gold_time;
    Integer author_time;
}

#Struct K_UpdateMapBody {
    Text name;
    Text map_uid;
    Integer cps_number;
    K_UpdatePlayerBody author;
    K_MedalTimes medal_times;
}

/*********************************************
  FUNCTIONS
 *********************************************/

////////////////////
//// Private
////////////////////

K_MedalTimes Private_GetMedalTimesBody() {
    declare K_MedalTimes Ret = K_MedalTimes {};

    declare metadata Boolean Meta_IsMedalSet for Map = False;
    if (Meta_IsMedalSet) {
        declare metadata Integer Meta_Bronze_Medal for Map = -1;
        declare metadata Integer Meta_Silver_Medal for Map = -1;
        declare metadata Integer Meta_Gold_Medal for Map = -1;
        declare metadata Integer Meta_Champion_Medal for Map = -1;

        if (Meta_Champion_Medal > 0
            && Meta_Bronze_Medal > Meta_Silver_Medal
            && Meta_Silver_Medal > Meta_Gold_Medal
            && Meta_Gold_Medal > Meta_Champion_Medal
        ) {
            Ret.bronze_time = Meta_Bronze_Medal;
            Ret.silver_time = Meta_Silver_Medal;
            Ret.gold_time = Meta_Gold_Medal;
            Ret.author_time = Meta_Champion_Medal;
        }
    }

    return Ret;
}

Void Private_UpdateMap(Integer _CpsNumber) {
    declare K_UpdateMapBody Body = K_UpdateMapBody {
        name = Map.MapName,
        map_uid = ""^Map.Id,
        cps_number = _CpsNumber,
        author = K_UpdatePlayerBody {
            login = Map.AuthorLogin,
            name = Map.AuthorNickName,
            zone_path = Map.AuthorZonePath
        },
        medal_times = Private_GetMedalTimesBody()
    };

    declare Text JsonBody = Body.tojson();

    declare ReqId = ReqMgr::Make(ReqMgr::K_PostRequest {
        Route = "map/insert",
        Body = JsonBody,
        Headers = ReqMgr::DefaultHeaders()
    });

    // Wait for the request to be sent
    while (ReqMgr::IsWaiting(ReqId)) {
        yield;
        ReqId = ReqMgr::MakePending(ReqId);
    }

    declare CHttpRequest Req <=> ReqMgr::GetReq(ReqId);
    wait(Req.IsCompleted);

    if (Req.StatusCode == 200) {
        Http.Destroy(Req);
        return;
    }

    declare ErrMgr::K_Error Err = ErrMgr::Handle(Req.StatusCode, Req.Result);
    if (Err.Err.type == ErrMgr::C_Err_Maintenance) {
        Dialogs::NewDialog(Dialogs::K_Dialog {
            Title = "Maintenance",
            Msg = """The API is currently in a maintenance mode, so records won't be saved immediately.

You can still play as usual, you don't need to alert any admin of your missing records.

Thank you.""",
            CloseOnSuccess = True,
            Buttons = [
                Dialogs::K_Button {
                    Label = "OK",
                    Success = True
                }
            ]
        });
    } else {
        ErrReport::ReportPost("/map/insert", JsonBody, Req.StatusCode, Req.Result);
        UIManager.UIAll.SendChat(Err.Err.message);
    }

    Http.Destroy(Req);
}

Void Private_UpdateRecordsWidget() {
    declare netwrite Integer Net_RecordsUpdated for Teams[0] = -1;
    Net_RecordsUpdated = Now;
}

////////////////////
//// Public
////////////////////

/**
 * Returns the version of the script module.
 */
Text GetVersion() {
    return Version;
}

/**
 * Returns the name of the script module.
 */
Text GetScriptName() {
    return ScriptName;
}

Void Init(Integer _CpsNumber) {
    Private_UpdateMap(_CpsNumber);
    Private_UpdateRecordsWidget();
}