/************************************************
 *   Obstacle Library
 *   Author:     ahmad3
 *
 *   Initializes the CP times of the player with their PB
 ***********************************************/

#Include "Libs/ahmad3/ErrorReport.Script.txt" as ErrorReport
#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr
#Include "Libs/ahmad3/UI/UpdateAuth.Script.txt" as UpdateAuth
#Include "Libs/ahmad3/UI/CachedRequests.Script.txt" as CachReqs

#Include "Libs/smokegun/Tools.Script.txt" as Tools
#Include "Libs/miltant/Randomizer.Script.txt" as RNG
#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/smokegun/ObstacleLib.Script.txt" as Obstacle
#Include "Libs/smokegun/CPTimes.Script.txt" as CPTimes

#Include "Libs/ahmad3/EventAPI/InGame.Script.txt" as ObsEvents

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-07-26"
#Const ScriptName "InitPb.Script.txt"

#Const C_Ev_PbInit "playerpb:init"

/*********************************************
  TYPES
 *********************************************/

#Struct K_PbCpTimeItem {
    Integer cp_num;
    Integer time;
}

#Struct K_PbRes {
    Integer rs_count;
    K_PbCpTimeItem[] cps_times;
}

#Struct K_PendingPbInit {
    Integer RsCount;
    Integer BestRun;
    Integer[Ident] CpTimes;
}

/*********************************************
  GLOBALES
 *********************************************/

declare K_PendingPbInit[Ident] G_PendingPbInits;

/*********************************************
  FUNCTIONS
 *********************************************/

////////////////////
//// Private
////////////////////

Void Private_AddPendingPbInit(CUIConfig _UI, K_PendingPbInit _Params) {
    G_PendingPbInits[_UI.Id] = _Params;
}

Void Private_YieldPendingPbInits() {
    declare Ident[] ToRemove = [];

    foreach (UIId => Params in G_PendingPbInits) {
        if (!UIManager.UI.existskey(UIId)) {
            ToRemove.add(UIId);
            continue;
        }

        declare CSmPlayer Player <=> GetPlayer(UIManager.UI[UIId]);
        if (Player == Null || !CPTimes::IsInitialized()) continue;

        Player::InitPlayer(Player);
        Player::setRespawnCount(Player, Params.RsCount);
        Obstacle::UpdatePlayerRsCounterColumn(Player);
        Player::setRespawnCount(Player, 0);
        Player::setBestRun(Player, Params.BestRun);
        Player::setBestCPTimes(Player, Params.CpTimes);
        CPTimes::UpdateLayer(Player);
        Obstacle::UpdatePlayerBestTimeColumn(Player);

        Player::setHasInitPb(Player, True);

        ToRemove.add(UIId);
    }

    foreach (UIId in ToRemove) {
        G_PendingPbInits.removekey(UIId);
    }
}

////////////////////
//// Public
////////////////////

/**
 * Returns the version of the script module.
 */
Text GetVersion() {
    return Version;
}

/**
 * Returns the name of the script module.
 */
Text GetScriptName() {
    return ScriptName;
}

Void Yield() {
    foreach (Event in UIManager.PendingEvents) {
        if (Event.Type != CUIConfigEvent::EType::OnLayerCustomEvent
            || Event.CustomEventType != C_Ev_PbInit
        ) {
            continue;
        }

        declare Text PbRes = Event.CustomEventData[0];
        declare K_PbRes Res;
        Res.fromjson(PbRes);

        if (Res.cps_times.count == 0) return;

        declare Integer[Ident] CpTimes;
        declare Time = 0;
        
        foreach (PbCpTime in Res.cps_times) {
            Time += PbCpTime.time;
            foreach (Landmark in MapLandmarks) {
                if (Tools::IsCheckpoint(Landmark) && RNG::GetOrder(Landmark) == PbCpTime.cp_num + 1) {
                    CpTimes[Landmark.Id] = Time;
                    break;
                }
            }
        }

        Private_AddPendingPbInit(Event.UI, K_PendingPbInit {
            RsCount = Res.rs_count,
            BestRun = Time,
            CpTimes = CpTimes
        });
    }

    Private_YieldPendingPbInits();
}

Text GetLayer() {
    return """
<manialink version="3" name="Obstacle:InitCpTimes">
    <script><![CDATA[

{{{ReqMgr::ML_Preproc("ReqMgr")}}}

{{{ReqMgr::ML_Content("ReqMgr")}}}
{{{ErrorReport::ML_Content("ErrReport")}}}
{{{UpdateAuth::ML_Content("Auth")}}}

declare Text G_PbRoute;

///////////////////// ML Update

declare Integer G_AuthUpdated;

declare ReqMgr_K_GetReqId G_ReqId;
declare ReqMgr_K_GetRequest G_Req;
declare Boolean G_NeedAuth;

Void InitPbReq() {
    G_Req = ReqMgr_K_GetRequest {
        Route = G_PbRoute ^ "?map_uid=" ^ Map.Id,
        UseCache = False,
        Headers = ReqMgr_DefaultHeadersWith(ReqMgr_AuthHeaders())
    };

    G_ReqId = ReqMgr_Make(G_Req);
}

Void LoopInitPbReq() {
    if (!ReqMgr_IsPending(G_ReqId)) return;

    if (ReqMgr_IsWaiting(G_ReqId)) {
        G_ReqId = ReqMgr_MakePending(G_ReqId);
        if (ReqMgr_IsWaiting(G_ReqId)) return;
    }

    declare CHttpRequest Req <=> ReqMgr_GetReq(G_ReqId);
    if (!Req.IsCompleted) return;
    G_ReqId = ReqMgr_NullGetReq();

    switch (Req.StatusCode) {
        case 200: {
            SendCustomEvent({{{dump(C_Ev_PbInit)}}}, [Req.Result]);
        }
        case 401: {
            Auth_NotifyNeedUpdate();
            G_NeedAuth = True;
        }
        default: {
            ErrReport_ReportGet(G_Req.Route, Req.StatusCode, Req.Result);
        }
    }

    Http.Destroy(Req);
}

Void InitAuthUpdated() {
    declare netread Integer Net_AuthUpdated for UI = -1;
    G_AuthUpdated = Net_AuthUpdated;
}

Boolean AuthUpdated() {
    declare netread Integer Net_AuthUpdated for UI = -1;
    if (G_AuthUpdated != Net_AuthUpdated) {
        G_AuthUpdated = Net_AuthUpdated;
        return True;
    }
    return False;
}

{{{CachReqs::ML_CacheUpdatedFunc("InitCacheUpdater", "CachedReqsSent")}}}

main() {
    G_ReqId = ReqMgr_NullGetReq();
    G_PbRoute = {{{dump(ObsEvents::PrefixRoute("player/pb"))}}};
    InitAuthUpdated();
    InitCacheUpdater();

    InitPbReq();

    while (True) {
        yield;

        LoopInitPbReq();

        if (G_NeedAuth && AuthUpdated() || CachedReqsSent()) {
            G_NeedAuth = False;
            InitPbReq();
        }
    }
}

    ]]></script>
</manialink>
    """;
}