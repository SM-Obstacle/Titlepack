/************************************************
 *   Obstacle Library
 *   Author:     ahmad3
 *
 *   Manages the cached requests of the player
 ***********************************************/

#Include "TextLib" as TL
#Include "TimeLib" as TiL

#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr
#Include "Libs/ahmad3/ErrorReport.Script.txt" as ErrorReport
#Include "Libs/ahmad3/Utils.Script.txt" as Utils
#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/ahmad3/UI/UpdateAuth.Script.txt" as UpdateAuth
#Include "Libs/smokegun/Player.Script.txt" as Player

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-07-25"
#Const ScriptName "CachedRequests.Script.txt"

#Const C_Ev_SaveCache "cachreqs:save"
#Const C_Ev_CachedReqsSent "cachreqs:sent"

/*********************************************
  TYPES
 *********************************************/

#Struct K_CachedReq {
    Text Route;
    Integer Tstp;
    Text Body;
}

/*********************************************
  GLOBALES
 *********************************************/

declare K_CachedReq[][Ident] G_CachedReqs;

declare Ident[] G_PendingResetWrongLbLine;

/*********************************************
  FUNCTIONS
 *********************************************/

////////////////////
//// Private
////////////////////

Void Private_AddPendingResetWrongLbLine(CUIConfig _UI) {
    if (!G_PendingResetWrongLbLine.exists(_UI.Id)) {
        G_PendingResetWrongLbLine.add(_UI.Id);
    }
}

Void Private_ManagePendingResetWrongLbLine() {
    declare Ident[] ToRemove = [];

    foreach (Id in G_PendingResetWrongLbLine) {
        if (!UIManager.UI.existskey(Id)) {
            ToRemove.add(Id);
            continue;
        }

        declare CSmPlayer Player <=> GetPlayer(UIManager.UI[Id]);
        if (Player == Null) continue;

        Player::setHasWrongLbLine(Player, False, True);
        ToRemove.add(Id);
    }

    foreach (Id in ToRemove) {
        G_PendingResetWrongLbLine.remove(Id);
    }
}

////////////////////
//// Public
////////////////////

/**
 * Returns the version of the script module.
 */
Text GetVersion() {
    return Version;
}

/**
 * Returns the name of the script module.
 */
Text GetScriptName() {
    return ScriptName;
}

K_CachedReq[] GetCacheOf(CUIConfig _UI) {
    return G_CachedReqs.get(_UI.Id, []);
}

Boolean HasSavedCache(CUIConfig _UI) {
    return G_CachedReqs.existskey(_UI.Id);
}

K_CachedReq SaveCacheFor(CUIConfig _UI, Text _Body, Text _Route) {
    declare K_CachedReq Out = K_CachedReq {
        Route = _Route,
        Tstp = TL::ToInteger(TiL::GetCurrent()),
        Body = _Body
    };

    declare netwrite Integer Net_CachReqs_SaveCacheUpdate for _UI = -1;
    declare netwrite K_CachedReq Net_CachReqs_SaveCacheBody for _UI = K_CachedReq {};
    Net_CachReqs_SaveCacheBody = Out;
    Net_CachReqs_SaveCacheUpdate = Now;

    return Out;
}

Void RemoveCache(CUIConfig _UI, K_CachedReq _CachReq) {
    declare netwrite Integer Net_CachReqs_RemoveCacheUpdate for _UI = -1;
    declare netwrite K_CachedReq Net_CachReqs_RemoveCacheBody for _UI = K_CachedReq {};

    Net_CachReqs_RemoveCacheBody = _CachReq;
    Net_CachReqs_RemoveCacheUpdate = Now;
}

Void Unload() {
    G_CachedReqs = [];
}

Void Load() {
    Unload();
}

Void Yield() {
    foreach (Event in UIManager.PendingEvents) {
        if (Event.Type != CUIConfigEvent::EType::OnLayerCustomEvent) continue;

        switch (Event.CustomEventType) {
            case C_Ev_SaveCache: {
                declare Text Body = Event.CustomEventData[0];
                declare Text Route = Event.CustomEventData[1];
                SaveCacheFor(Event.UI, Body, Route);
            }

            case C_Ev_CachedReqsSent: {
                declare K_CachedReq[] CachedReqs = [];
                CachedReqs.fromjson(Event.CustomEventData[0]);
                G_CachedReqs[Event.UI.Id] = CachedReqs;

                Private_AddPendingResetWrongLbLine(Event.UI);
                declare netwrite Integer Net_CachReqs_CachedReqsSentUpdate for Event.UI = -1;
                Net_CachReqs_CachedReqsSentUpdate = Now;
            }
        }
    }

    Private_ManagePendingResetWrongLbLine();
}

Text ML_CacheUpdatedFunc(
    Text _InitCacheUpdaterFuncName,
    Text _CacheUpdatedFuncName
) {
    return """//!
declare Integer {{{_CacheUpdatedFuncName}}}_G_LastUpdate;

Void {{{_InitCacheUpdaterFuncName}}}() {
    {{{_CacheUpdatedFuncName}}}_G_LastUpdate = -1;
}

Boolean {{{_CacheUpdatedFuncName}}}() {
    declare netread Integer Net_CachReqs_CachedReqsSentUpdate for UI = -1;
    if (Net_CachReqs_CachedReqsSentUpdate != {{{_CacheUpdatedFuncName}}}_G_LastUpdate) {
        {{{_CacheUpdatedFuncName}}}_G_LastUpdate = Net_CachReqs_CachedReqsSentUpdate;
        return True;
    }
    return False;
}
    """;
}

Text GetLayer() {
    return """
<manialink version="3" name="Obstacle:CachedRequests">
    <script><![CDATA[

#Include "TextLib" as TL
#Include "TimeLib" as TimeLib

#Struct K_CachedReq {
    Text Route;
    Integer Tstp;
    Text Body;
}

{{{ReqMgr::ML_Preproc("ReqMgr")}}}

{{{ReqMgr::ML_Content("ReqMgr")}}}
{{{UpdateAuth::ML_Content("AuthMgr")}}}
{{{Utils::ML_FindCharIndex("Utils", "TL")}}}
{{{ErrorReport::ML_Content("ErrReport")}}}

declare Integer G_SaveCacheUpdate;
declare Integer G_RemoveCacheUpdate;

declare ReqMgr_K_PostReqId[Integer] G_StaggeredReqs;
declare K_CachedReq[Integer] G_IndexedCachedReqs;
declare Text[Integer] G_ReqBodies;

declare Boolean G_NeedAuth;

K_CachedReq[] GetCache() {
	declare persistent Text ObsStore_ReqCache for LocalUser = "";
	declare Integer VersIndex = Utils_FindCharIndex(ObsStore_ReqCache, "[");
	if (VersIndex == -1) return [];
	declare Text ReqCache = TL::SubText(ObsStore_ReqCache, VersIndex, TL::Length(ObsStore_ReqCache) - VersIndex);
    // FIXME: do we really have to give up here?
	// if ("{{{Constants::C_Version_ReqCache}}}" != Version)
	//	return [];
	declare K_CachedReq[] StaggeredReqs;
	StaggeredReqs.fromjson(ReqCache);
	return StaggeredReqs;
}

Void SaveCache(K_CachedReq[] _Cache) {
    declare persistent Text ObsStore_ReqCache for LocalUser = "";
    ObsStore_ReqCache = "{{{Constants::C_Version_ReqCache}}}" ^ _Cache.tojson();
}

Void SaveCacheSingle(K_CachedReq _CachReq) {
    log("[ObsCache]" ^ Now ^ "> Saving to cache: `" ^ _CachReq.Route ^ "` (" ^ _CachReq.Tstp ^ ")");
    declare K_CachedReq[] Cache = GetCache();
    Cache.add(_CachReq);
    SaveCache(Cache);
}

Void RemoveCache(K_CachedReq _CachReq) {
    log("[ObsCache]" ^ Now ^ "> Removing from cache: `" ^ _CachReq.Route ^ "` (" ^ _CachReq.Tstp ^ ")");
    declare K_CachedReq[] Cache = GetCache();
    declare Integer IdxToRemove = -1;
    foreach (Idx => Cached in Cache) {
        if (Cached == _CachReq) {
            IdxToRemove = Idx;
            break;
        }
    }
    if (IdxToRemove < 0) return;
    Cache.removekey(IdxToRemove);
    SaveCache(Cache);
}

Void NotifyCacheSent() {
    // Save the remaining cache
    declare K_CachedReq[] CachedReqs = [];
    foreach (Remaining in G_IndexedCachedReqs) {
        CachedReqs.add(Remaining);
    }
    SaveCache(CachedReqs);

    // Notify the gamemode
    SendCustomEvent({{{dump(C_Ev_CachedReqsSent)}}}, [CachedReqs.tojson()]);
}

Void InitTrySendCached() {
    declare K_CachedReq[] CachedReqs = GetCache();

    if (CachedReqs.count == 0) {
        NotifyCacheSent();
        return;
    }

    log("[ObsCache]" ^ Now ^ "> Trying to send " ^ CachedReqs.count ^ " cached request(s)");

    foreach (Idx => Req in CachedReqs) {
        G_IndexedCachedReqs[Idx] = Req;
        G_ReqBodies[Idx] = "{\"req_tstp\":" ^ Req.Tstp ^ ",\"body\":" ^ Req.Body ^ "}";
        G_StaggeredReqs[Idx] = ReqMgr_Make(ReqMgr_K_PostRequest {
            Route = "staggered/" ^ Req.Route,
            Body = G_ReqBodies[Idx],
            Headers = ReqMgr_DefaultHeadersWith(ReqMgr_AuthHeaders())
        });
    }
}

Void LoopTrySendCached() {
    if (G_StaggeredReqs.count == 0) return;

    declare ReqMgr_K_PostReqId[Integer] UpdatedStaggeredReqs = G_StaggeredReqs;
    declare Integer[] CachedReqsToRemove;

    foreach (Idx => ReqId in G_StaggeredReqs) {
        if (ReqMgr_IsWaiting(ReqId)) {
            UpdatedStaggeredReqs[Idx] = ReqMgr_MakePending(ReqId);
            if (ReqMgr_IsWaiting(UpdatedStaggeredReqs[Idx])) continue;
        }

        declare CHttpRequest Req <=> ReqMgr_GetReq(ReqId);
        if (!Req.IsCompleted) continue;

        switch (Req.StatusCode) {
            case 200: {
                CachedReqsToRemove.add(Idx);
            }
            case 401: {
                G_NeedAuth = True;
                AuthMgr_NotifyNeedUpdate();
            }
            default: {
                // We report only if it's not an Unauthorized error, because in this case
                // all the cached requests would probably have this error too
                // so it would flood the error report system.
                ErrReport_ReportPost(
                    "staggered/" ^ G_IndexedCachedReqs[Idx].Route,
                    G_ReqBodies[Idx],
                    Req.StatusCode,
                    Req.Result
                );
            }
        }

        Http.Destroy(Req);
        UpdatedStaggeredReqs.removekey(Idx);
    }

    G_StaggeredReqs = UpdatedStaggeredReqs;

    foreach (ToRemove in CachedReqsToRemove) {
        G_IndexedCachedReqs.removekey(ToRemove);
    }

    if (G_StaggeredReqs.count == 0) {
        if (CachedReqsToRemove.count == 0) {
            log("[ObsCache]" ^ Now ^ "> All failed :(");
        } else {
            log("[ObsCache]" ^ Now ^ "> Successfully sent " ^ CachedReqsToRemove.count ^ " cached request(s), "
                ^ G_IndexedCachedReqs.count ^ " remaining.");
        }
        NotifyCacheSent();
    }
}

Void InitSaveCacheUpdate() {
    declare netread Net_CachReqs_SaveCacheUpdate for UI = -1;
    G_SaveCacheUpdate = Net_CachReqs_SaveCacheUpdate;
}

Boolean SaveCacheUpdate() {
    declare netread Net_CachReqs_SaveCacheUpdate for UI = -1;
    if (G_SaveCacheUpdate != Net_CachReqs_SaveCacheUpdate) {
        G_SaveCacheUpdate = Net_CachReqs_SaveCacheUpdate;
        return True;
    }
    return False;
}

Void InitRemoveCacheUpdate() {
    declare netread Net_CachReqs_RemoveCacheUpdate for UI = -1;
    G_RemoveCacheUpdate = Net_CachReqs_RemoveCacheUpdate;
}

Boolean RemoveCacheUpdate() {
    declare netread Net_CachReqs_RemoveCacheUpdate for UI = -1;
    if (G_RemoveCacheUpdate != Net_CachReqs_RemoveCacheUpdate) {
        G_RemoveCacheUpdate = Net_CachReqs_RemoveCacheUpdate;
        return True;
    }
    return False;
}

Void ClearEventsCache() {
    declare persistent Text ObsStore_EventsCache2 for LocalUser = "";
    ObsStore_EventsCache2 = "";
}

declare Integer G_AuthUpdated;

Void InitAuthUpdated() {
    declare netread Integer Net_AuthUpdated for UI = -1;
    G_AuthUpdated = Net_AuthUpdated;
}

Boolean AuthUpdated() {
    declare netread Integer Net_AuthUpdated for UI = -1;
    if (G_AuthUpdated != Net_AuthUpdated) {
        G_AuthUpdated = Net_AuthUpdated;
        return True;
    }
    return False;
}

main() {
    ClearEventsCache();

    InitAuthUpdated();
    InitSaveCacheUpdate();
    InitRemoveCacheUpdate();
    InitTrySendCached();

    declare netread K_CachedReq Net_CachReqs_SaveCacheBody for UI;
    declare netread K_CachedReq Net_CachReqs_RemoveCacheBody for UI;

    while (True) {
        yield;

        if (SaveCacheUpdate()) {
            SaveCacheSingle(Net_CachReqs_SaveCacheBody);
        }

        if (RemoveCacheUpdate()) {
            RemoveCache(Net_CachReqs_RemoveCacheBody);
        }

        if (AuthUpdated()) {
            InitTrySendCached();
        }

        LoopTrySendCached();
    }
}

    ]]></script>
</manialink>
    """;
}