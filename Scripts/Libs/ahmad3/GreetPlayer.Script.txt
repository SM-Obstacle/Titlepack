/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Utility functions used to manage the player *
 *   when they enter the Titlepack.              *
 ************************************************/

#Include "TextLib" as TL

#Include "Libs/smokegun/Constants.Script.txt" as Constants

#Include "Libs/ahmad3/AuthUtils.Script.txt" as AuthUtils
#Include "Libs/ahmad3/ErrorReport.Script.txt" as ErrorReport
#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr
#Include "Libs/ahmad3/ErrMgr.Script.txt" as ErrMgr
#Include "Libs/ahmad3/Ban.Script.txt" as Ban

#Include "Libs/miltant/ObstacleV2/Titlepack/Dialogs/UI.Script.txt" as DialogsUI
#Include "Libs/miltant/ObstacleV2/Titlepack/Dialogs/Index.Script.txt" as Dialogs

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-07-22"
#Const ScriptName "GreetPlayer.Script.txt"

#Const C_UpdateTokenDialogOk "OK_Button"
#Const C_UpdateTokenDialogSkip "Skip_Button"

/*********************************************
  TYPES
 *********************************************/

#Struct Private_K_UpdatePlayerBody {
    Text login;
    Text name;
    Text zone_path;
}

#Struct Private_K_GetTokenBody {
    Text login;
    Text state;
    Text redirect_uri;
}

#Struct Private_K_GetTokenResponse {
    Text token;
}

/*********************************************
  GLOBALES
 *********************************************/

//////////////// Ban dialog

declare Integer G_BanDialogId;

//////////////// Token update procedure

declare Integer G_TokenUpdateReqDialogId;
declare ReqMgr::K_PostRequest G_TokenUpdateReq;
declare ReqMgr::K_PostReqId G_TokenUpdateReqId;
declare Boolean G_TokenUpdateReqFinished;
declare Boolean G_TokenUpdateReqOk;

declare Boolean G_TokenUpdateDialogOk;
declare Integer G_TokenUpdateDialogId;

//////////////// Player update procedure

declare ReqMgr::K_PostRequest G_PlayerUpdateReq;
declare ReqMgr::K_PostReqId G_PlayerUpdateReqId;
declare Boolean G_PlayerUpdateOk;
declare Boolean G_PlayerUpdateFailed;
declare Ban::K_OptBanishment G_PlayerUpdateOptBan;
declare Boolean G_PlayerUpdateNeedsTokenUpdate;

//////////////// Online test

declare Boolean G_OnlineTestSkipped;
declare Boolean G_OnlineTestResult;
declare ReqMgr::K_GetReqId  G_OnlineTestReq;

//////////////// Welcome dialog

declare Integer G_WelcomeDialogId;

/*********************************************
  FUNCTIONS
 *********************************************/

////////////////////
//// Private
////////////////////

/**
 * Initializes the test to check if the player has access to online network.
 *
 * If the result is OK, then we can proceed with some requests to update the player info
 * in the API and its token if needed.
 *
 * @return True if the online test is OK, False if it hasn't started yet
 */
Boolean Private_InitOnlineTest() {
	if (TL::Split("|", LocalUser.ZonePath).count > 0) {
        G_OnlineTestSkipped = True;
		return True;
    }

    G_OnlineTestReq = ReqMgr::Make(
        ReqMgr::K_GetRequest { Route = "/generate_204" },
        "http://clients3.google.com"
    );

    return False;
}

/**
 * Updates the state of the online test.
 *
 * @return True if the test has finished, False otherwise.
 */
Boolean Private_LoopOnlineTest() {
    if (G_OnlineTestSkipped) {
        G_OnlineTestSkipped = False;
        G_OnlineTestResult = True;
        return True;
    }

    if (!ReqMgr::IsPending(G_OnlineTestReq)) return False;

    if (ReqMgr::IsWaiting(G_OnlineTestReq)) {
        G_OnlineTestReq = ReqMgr::MakePending(G_OnlineTestReq);
        if (ReqMgr::IsWaiting(G_OnlineTestReq)) return False;
    }

    declare CHttpRequest Req <=> ReqMgr::GetReq(G_OnlineTestReq);
    if (!Req.IsCompleted) return False;

    G_OnlineTestReq = ReqMgr::NullGetReq();
    G_OnlineTestResult = Req.StatusCode == 204 || Req.StatusCode == 200;

    Http.Destroy(Req);

    return True;
}

/**
 * Returns the result of the online test.
 *
 * This function is callable only if `Private_LoopOnlineTest()` returned true.
 *
 * @return True if the online test is OK, False otherwise.
 */
Boolean Private_IsOnline() {
    return G_OnlineTestResult;
}

/**
 * Initializes the welcome dialog to the player.
 */
Void Private_InitWelcomeDialog() {
    G_WelcomeDialogId = DialogsUI::NewDialog("Welcome to Obstacle!",
        DialogsUI::K_Message {
            Label = "Before we race on, let's take a quick pit stop: We're "
                ^ "upgrading our system to include browser-based "
                ^ "authentication via Maniaplanet services.\n\n"
                ^ "This quick step ensures that only you can set "
                ^ "records under your name.\n\n"
                ^ "We appreciate your understanding and support. Let's race on!"
        }, [
            DialogsUI::K_Button {
                ControlId = "OK_Button",
                Label = "Gear Up!",
                Default = True
            }
        ]
    );
}

/**
 * Updates the state of the welcome dialog.
 *
 * @return True if the dialog is over, False otherwise.
 */
Boolean Private_LoopWelcomeDialog() {
    if (G_WelcomeDialogId == -1) return False;
    declare Dialogs::K_Result DialogState = DialogsUI::Prompt(G_WelcomeDialogId, True);
    if (DialogState.Over && DialogState.Success) {
        DialogsUI::CloseDialog(G_WelcomeDialogId);
        G_WelcomeDialogId = -1;
        return True;
    }
    return False;
}

/**
 * Initializes the update token procedure.
 */
Void Private_InitUpdateToken() {
    G_TokenUpdateDialogId = DialogsUI::NewDialog(
        "Authentication",
        DialogsUI::K_Message {
            Label = "We are about to refresh your personal tokens.\n\n"
                ^ "This procedure will open your browser to the "
                ^ "ManiaPlanet's login page. You will only have to "
                ^ "authenticate with the same account as the "
                ^ "one you use in game."
        }, [
            DialogsUI::K_Button {
                ControlId = C_UpdateTokenDialogOk,
                Label = "OK",
                Default = True
            },
            DialogsUI::K_Button {
                ControlId = C_UpdateTokenDialogSkip,
                Label = "Skip",
                Default = False
            }
        ]
    );
}

/**
 * Updates the state of the authentication dialog.
 *
 * @return True if the dialog is over, False otherwise.
 */
Boolean Private_LoopUpdateTokenDialog() {
    if (G_TokenUpdateDialogId == -1) return False;
    declare Dialogs::K_Result DialogState = DialogsUI::Prompt(G_TokenUpdateDialogId);
    if (DialogState.Over) {
        G_TokenUpdateDialogOk = DialogState.Success && DialogState.CustomData.exists(C_UpdateTokenDialogOk);
        DialogsUI::CloseDialog(G_TokenUpdateDialogId);
        G_TokenUpdateDialogId = -1;
        return True;
    }
    return False;
}

/**
 * Returns the result of the authentication dialog.
 *
 * @return True if the user clicked "OK", False otherwise.
 */
Boolean Private_UpdateTokenDialogIsOk() {
    return G_TokenUpdateDialogOk;
}

/**
 * Initializes the token update procedure.
 *
 * This includes the dialog and the token update HTTP request.
 */
Void Private_InitUpdateTokenReq() {
    declare Text Login = LocalUser.Login;
    declare Text State = Login ^ Now;
    declare Private_K_GetTokenBody Body = Private_K_GetTokenBody {
        login = Login,
        state = State,
        redirect_uri = Constants::C_MP_Redirect
    };

    G_TokenUpdateReq = ReqMgr::K_PostRequest {
        Route = "player/get_token",
        Body = Body.tojson(),
        Headers = ReqMgr::DefaultHeaders()
    };

    G_TokenUpdateReqId = ReqMgr::Make(G_TokenUpdateReq);

    declare Text Link = Constants::C_MP_Link
        ^ "client_id=" ^ Constants::C_MP_App_Id
        ^ "&redirect_uri=" ^ Constants::C_MP_Redirect
        ^ "&state=" ^ State
        ^ "&scope=basic";

    OpenLink(Link, CManiaApp::ELinkType::ExternalBrowser);

    G_TokenUpdateReqDialogId = DialogsUI::NewDialog(
        "Authentication procedure",
        DialogsUI::K_Message {
            Label = "Please follow the instructions in your browser, or scan the QR code bellow:"
        },
        []
    );
    DialogsUI::Add(
        DialogsUI::K_Image {
            URL = "http://api.qrserver.com/v1/create-qr-code/?size=300x300&data=" ^ TL::URLEncode(Link) ^ "&.png",
            PlaceHolder = "(Click to load...)",
            Width = 50,
            Height = 50
        },
        G_TokenUpdateReqDialogId
    );
}

/**
 * Updates the state of the token update procedure.
 *
 * @return True if the procedure is over, False otherwise.
 */
Boolean Private_LoopUpdateTokenReq() {
    if (!ReqMgr::IsPending(G_TokenUpdateReqId)) return False;

    DialogsUI::Prompt(G_TokenUpdateReqDialogId, True);

    if (ReqMgr::IsWaiting(G_TokenUpdateReqId)) {
        G_TokenUpdateReqId = ReqMgr::MakePending(G_TokenUpdateReqId);
        if (ReqMgr::IsWaiting(G_TokenUpdateReqId)) return False;
    }

    declare CHttpRequest Req <=> ReqMgr::GetReq(G_TokenUpdateReqId);
    if (!Req.IsCompleted) return False;

    // At this point, the procedure is over

    G_TokenUpdateReqId = ReqMgr::NullPostReq();

    DialogsUI::CloseDialog(G_TokenUpdateReqDialogId);

    if (Req.StatusCode == 200) {
        G_TokenUpdateReqOk = True;
        declare Private_K_GetTokenResponse Res;
        Res.fromjson(Req.Result);
        AuthUtils::SetUserToken(Res.token, LocalUser);
    } else {
        G_TokenUpdateReqOk = False;
        ErrorReport::ReportPost(G_TokenUpdateReq.Route, G_TokenUpdateReq.Body, LocalUser.Login, Req.StatusCode, Req.Result);
        // Reset to a dummy auth token, to avoid keeping it empty if it's a new player.
        AuthUtils::SetUserToken("FAILED", LocalUser);
    }

    Http.Destroy(Req);
    return True;
}

/**
 * Returns the result of the token update procedure.
 *
 * @return True if the token update was successful, False otherwise.
 */
Boolean Private_UpdateTokenReqIsOk() {
    return G_TokenUpdateReqOk;
}

/**
 * Updates the state of the update token procedure.
 *
 * @return True if the procedure is over, False otherwise.
 */
Boolean Private_LoopUpdateToken() {
    if (Private_LoopUpdateTokenDialog() && Private_UpdateTokenDialogIsOk()) {
        Private_InitUpdateTokenReq();
    }

    return Private_LoopUpdateTokenReq();
}

/**
 * Returns the result of the token update procedure.
 *
 * @return True if the token update was successful, False otherwise.
 */
Boolean Private_UpdateTokenIsOk() {
    return Private_UpdateTokenReqIsOk();
}

/**
 * Initializes the player info update in the API.
 *
 * @param _Token the Obstacle token of the player. It must not be empty.
 */
Void Private_InitPlayerUpdateReq(Text _Token) {
    declare Private_K_UpdatePlayerBody Body = Private_K_UpdatePlayerBody {
        login = LocalUser.Login,
        name = LocalUser.Name,
        zone_path = LocalUser.ZonePath
    };

    G_PlayerUpdateReq = ReqMgr::K_PostRequest {
        Route = "player/update",
        Body = Body.tojson(),
        Headers = ReqMgr::DefaultHeadersWith(ReqMgr::AuthHeaders(LocalUser, _Token))
    };

    G_PlayerUpdateReqId = ReqMgr::Make(G_PlayerUpdateReq);
}

Void Private_InitPlayerUpdateReq() {
    Private_InitPlayerUpdateReq(AuthUtils::GetUserToken(LocalUser));
}

/**
 * Updates the state of the player info update procedure.
 *
 * @return True if the player update procedure has finished, False otherwise.
 */
Boolean Private_LoopPlayerUpdateReq() {
    if (!ReqMgr::IsPending(G_PlayerUpdateReqId)) return False;

    if (ReqMgr::IsWaiting(G_PlayerUpdateReqId)) {
        G_PlayerUpdateReqId = ReqMgr::MakePending(G_PlayerUpdateReqId);
        if (ReqMgr::IsWaiting(G_PlayerUpdateReqId)) return False;
    }

    declare CHttpRequest Req <=> ReqMgr::GetReq(G_PlayerUpdateReqId);
    if (!Req.IsCompleted) return False;

    G_PlayerUpdateReqId = ReqMgr::NullPostReq();

    switch (Req.StatusCode) {
        case ErrMgr::C_HttpErr_Unauthorized: {
            G_PlayerUpdateNeedsTokenUpdate = True;
        }
        case 200: {
            G_PlayerUpdateNeedsTokenUpdate = False;
            G_PlayerUpdateOk = True;
        }
        default: {
            G_PlayerUpdateFailed = True;
            declare ErrMgr::K_Error Err = ErrMgr::Handle(Req.StatusCode, Req.Result);
            G_PlayerUpdateOptBan = Err.Ban;
            G_PlayerUpdateNeedsTokenUpdate = False;
            if (Err.Err.type != ErrMgr::C_Err_Maintenance) {
                ErrorReport::ReportPost(G_PlayerUpdateReq.Route, G_PlayerUpdateReq.Body, LocalUser.Login, Req.StatusCode, Req.Result);
            }
        }
    }

    Http.Destroy(Req);

    return True;
}

/**
 * Returns whether the update procedure failed because the authentication failed or not.
 *
 * @return True if the update procedure needs the token update procedure to run before,
 * False otherwise.
 */
Boolean Private_PlayerUpdateReqNeedsTokenUpdate() {
    return G_PlayerUpdateNeedsTokenUpdate;
}

/**
 * Returns whether the update procedure failed.
 *
 * This returns False if the update procedure failed because the authentication failed.
 *
 * @return True if the update procedure failed, False otherwise.
 */
Boolean Private_PlayerUpdateReqFailed() {
    return G_PlayerUpdateFailed;
}

/**
 * Returns the optional ban that results from the update procedure.
 *
 * @return the optional banishment type.
 */
Ban::K_OptBanishment Private_PlayerUpdateReqGetOptBan() {
    return G_PlayerUpdateOptBan;
}

/**
 * Initializes the banishment dialog.
 */
Void Private_InitBanDialog() {
    G_BanDialogId = DialogsUI::NewDialog(
        "Account banned",
        DialogsUI::K_Message {
            Label = "We're sorry, but it appears that your account "
                ^ "has been banned from Obstacle.\n\n"
                ^ "This may be due to violation of our community "
                ^ "standards, like cheating or offensive behavior.\n\n"
                ^ "If you believe this is a mistake or if you'd like "
                ^ "to appeal the decision, please contact our "
                ^ "support team on Discord."
        },
        [
            DialogsUI::K_Button {
                ControlId = "OK",
                Label = "Understood",
                Default = True
            }
        ]
    );
}

/**
 * Updates the state of the banishment dialog.
 *
 * This waits for the player to valid the dialog, then quits the TP.
 */
Void Private_LoopBanDialog() {
    if (G_BanDialogId == -1) return;

    declare Dialogs::K_Result DialogState = DialogsUI::Prompt(G_BanDialogId, True);
    if (DialogState.Over) {
        Menu_Quit();
    }
}

/**
 * Welcomes the player to the TP according to whether they're new or not.
 *
 * If they're new, the welcome dialog is initialized. Otherwise, the player update procedure begins.
 */
Void Private_InitGreetPlayer() {
    Private_InitPlayerUpdateReq();
}

/**
 * Returns whether the token update procedure failed or not.
 *
 * @return True if the token update failed, False otherwise.
 */
Boolean Private_TokenUpdateFailed() {
    return G_TokenUpdateReqFinished && !G_TokenUpdateReqOk;
}

////////////////////
//// Public
////////////////////

/**
 * Returns whether the authentication was successful or not.
 *
 * A successful authentication can result from a successful player update procedure,
 * or a successful token update procedure.
 *
 * @return True if the authentication is successful, False otherwise.
 */
Boolean AuthSuccess() {
    return G_PlayerUpdateOk || G_TokenUpdateReqFinished && G_TokenUpdateReqOk;
}

/**
 * Unloads the library.
 */
Void Unload() {
    G_BanDialogId = -1;

    G_TokenUpdateDialogId = -1;
    G_TokenUpdateReq = ReqMgr::K_PostRequest {};
    G_TokenUpdateReqId = ReqMgr::NullPostReq();
    G_TokenUpdateReqFinished = False;
    G_TokenUpdateReqOk = False;

    G_TokenUpdateDialogOk = False;
    G_TokenUpdateDialogId = -1;

    G_PlayerUpdateReq = ReqMgr::K_PostRequest {};
    G_PlayerUpdateReqId = ReqMgr::NullPostReq();
    G_PlayerUpdateOk = False;
    G_PlayerUpdateFailed = False;
    G_PlayerUpdateOptBan = Ban::K_OptBanishment {};
    G_PlayerUpdateNeedsTokenUpdate = False;

    G_OnlineTestSkipped = False;
    G_OnlineTestResult = False;
    G_OnlineTestReq = ReqMgr::NullGetReq();

    G_WelcomeDialogId = -1;
}

/**
 * Loads the library.
 */
Void Load() {
    Unload();
    Private_InitOnlineTest();
}

/**
 * Updates the state of the library.
 */
Void Loop() {
    // Checks if the online test is over and is OK
    if (Private_LoopOnlineTest() && Private_IsOnline()) {
        Private_InitGreetPlayer();
    }

    // Checks if the welcome dialog is over
    if (Private_LoopWelcomeDialog()) {
        Private_InitUpdateToken();
    }

    // Checks if the token update procedure is over and is OK
    if (Private_LoopUpdateToken() && Private_UpdateTokenIsOk()) {
        Private_InitPlayerUpdateReq();
    }

    // Checks if the player update procedure is over
    if (Private_LoopPlayerUpdateReq()) {
        if (Private_PlayerUpdateReqNeedsTokenUpdate() && !Private_TokenUpdateFailed()) {
            Private_InitUpdateToken();
        } else if (Private_PlayerUpdateReqGetOptBan().IsPresent) {
            Private_InitBanDialog();
        }
    }

    // This is noop if there's no ban dialog.
    Private_LoopBanDialog();

    ErrorReport::Yield();
}